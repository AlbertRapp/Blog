breaks = sort(x_sample),
minor_breaks = NULL,
labels = labs
) +
scale_y_continuous(
breaks = NULL,
limits = c(0, max(tib$density) + 0.025)
) +
labs(x = element_blank(), y = element_blank())
print(g)
}
final_plot(tib)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
bblogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(collapse = T)
n <- 100
sample <- rexp(n)
library(tidyverse)
ggplot() +
geom_density(aes(x = sample))
h <- 1
ggplot() +
geom_density(aes(x = sample), bw = h) +
annotate(
"label",
x = 0.5,
y = 0.1,
label = glue::glue("bw = {h}")
)
plot_gen <- function(h) {
g <- ggplot() +
geom_density(aes(x = sample), bw = h) +
annotate(
"label",
x = 0.5,
y = 0.1,
label = glue::glue("bw = {h}")
)
print(g)
# For the animation we need this to be printed!
}
all_the_plots <- function() {
map(seq(0.05, 0.5, 0.05), plot_gen)
}
library(animation)
saveGIF(all_the_plots())
knitr::include_graphics("animation.gif")
compute_density <- function(x_0, h, K = dnorm) {
xx <- seq(-6, 6, 0.001) * h
tibble(
x = xx,
density = K((x - x_0) / h) / h
)
}
set.seed(123)
# For simplicity we simple take a uniformly distributed sample here
x_sample <- runif(5, -5, 5)
h <- 1
tib <- tibble(
k = seq_along(x_sample),
density = map(x_sample, compute_density, h = h)
) %>%
unnest(density)
draw_axis <- function(x_sample, tib) {
labs <- glue::glue("$x_{seq_along(x_sample)}$")
labs <- latex2exp::TeX(labs)
p <- ggplot(data = NULL, aes(x = x_sample)) +
theme_minimal() +
theme(
axis.line.x = element_line(),
panel.grid = element_blank(),
axis.ticks = element_line(size = 1),
axis.text = element_text(size = 14)
) +
scale_x_continuous(
limits = c(min(tib$x), max(tib$x)),
breaks = sort(x_sample),
minor_breaks = NULL,
labels = labs
) +
scale_y_continuous(
breaks = NULL,
limits = c(0, max(tib$density) + 0.025)
) +
labs(x = element_blank())
p
}
p <- draw_axis(x_sample, tib)
p
draw_kernel <- function(p, tib) {
p <- p +
geom_line(data = tib, aes(x, density, group = k), size = 1) +
geom_segment(
aes(
x = x_sample,
xend = x_sample,
y = 0,
yend = dnorm(0)
),
linetype = 2
) +
labs(y = element_blank())
p
}
draw_kernel(p, tib)
plot_until_x0 <- function(tib, x0) {
labs <- glue::glue("$x_{seq_along(x_sample)}$")
labs <- latex2exp::TeX(labs)
tib_x0 <- tib %>%
filter(x <= x0) %>%
group_by(x) %>%
summarise(est = mean(density), .groups = "drop")
anim_col <- 'firebrick3'
g <- ggplot() +
geom_line(
data = tib,
aes(x, density, group = k),
alpha = 0.5,
size = 1
) +
geom_point(
data = filter(tib, x == x0),
aes(x, density),
#col = anim_col,
alpha = 0.75,
size = 3
) +
geom_vline(xintercept = x0, col = anim_col, alpha = 0.5) +
geom_point(
data = slice_tail(tib_x0, n = 1),
aes(x, est),
col = anim_col,
size = 3
) +
geom_line(
data = tib_x0,
aes(x, est),
col = anim_col,
size = 1
) +
theme_classic() +
theme(
axis.line.x = element_line(),
axis.line.y = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_line(size = 1),
axis.text = element_text(size = 14)
) +
scale_x_continuous(
limits = c(min(tib$x), max(tib$x)),
breaks = sort(x_sample),
minor_breaks = NULL,
labels = labs
) +
scale_y_continuous(
breaks = NULL,
limits = c(0, max(tib$density) + 0.025)
) +
labs(x = element_blank(), y = element_blank())
print(g)
}
x0 <- (0)
plot_until_x0(tib, x0)
final_plot <- function(tib) {
labs <- glue::glue("$x_{seq_along(x_sample)}$")
labs <- latex2exp::TeX(labs)
tib_x0 <- tib %>%
group_by(x) %>%
summarise(est = mean(density), .groups = "drop")
anim_col <- 'firebrick3'
g <- tib_x0 %>%
ggplot() +
geom_line(
aes(x, est),
col = anim_col,
size = 1
) +
theme_classic() +
theme(
axis.line.x = element_line(),
axis.line.y = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_line(size = 1),
axis.text = element_text(size = 14)
) +
scale_x_continuous(
limits = c(min(tib$x), max(tib$x)),
breaks = sort(x_sample),
minor_breaks = NULL,
labels = labs
) +
scale_y_continuous(
breaks = NULL,
limits = c(0, max(tib$density) + 0.025)
) +
labs(x = element_blank(), y = element_blank())
print(g)
}
final_plot(tib)
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:5, ~print(p))
p <- draw_kernel(p, tib)
map(1:10, ~print(p))
map(seq(min(tib$x), max(tib$x), 0.1), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.2, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:5, ~print(p))
p <- draw_kernel(p, tib)
map(1:10, ~print(p))
map(seq(min(tib$x), max(tib$x), 0.01), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.2, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:5, ~print(p))
p <- draw_kernel(p, tib)
map(1:10, ~print(p))
map(seq(min(tib$x), max(tib$x), 0.1), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.2, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:5, ~print(p))
p <- draw_kernel(p, tib)
map(1:10, ~print(p))
map(seq(min(tib$x), max(tib$x), 1), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.2, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:5, ~print(p))
p <- draw_kernel(p, tib)
map(1:10, ~print(p))
map(seq(min(tib$x), max(tib$x), 1), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.5, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:5, ~print(p))
p <- draw_kernel(p, tib)
map(1:10, ~print(p))
map(seq(min(tib$x), max(tib$x), 0.5), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.5, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:3, ~print(p))
p <- draw_kernel(p, tib)
map(1:5, ~print(p))
map(seq(min(tib$x), max(tib$x), 0.5), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.5, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
blogdown::serve_site()
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:3, ~print(p))
p <- draw_kernel(p, tib)
map(1:5, ~print(p))
map(seq(min(tib$x), max(tib$x), 0.5), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.4, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
knitr::opts_chunk$set(collapse = T)
n <- 100
sample <- rexp(n)
library(tidyverse)
ggplot() +
geom_density(aes(x = sample))
h <- 1
ggplot() +
geom_density(aes(x = sample), bw = h) +
annotate(
"label",
x = 0.5,
y = 0.1,
label = glue::glue("bw = {h}")
)
plot_gen <- function(h) {
g <- ggplot() +
geom_density(aes(x = sample), bw = h) +
annotate(
"label",
x = 0.5,
y = 0.1,
label = glue::glue("bw = {h}")
)
print(g)
# For the animation we need this to be printed!
}
all_the_plots <- function() {
map(seq(0.05, 0.5, 0.05), plot_gen)
}
library(animation)
saveGIF(all_the_plots())
knitr::include_graphics("animation.gif")
compute_density <- function(x_0, h, K = dnorm) {
xx <- seq(-6, 6, 0.001) * h
tibble(
x = xx,
density = K((x - x_0) / h) / h
)
}
set.seed(123)
# For simplicity we simple take a uniformly distributed sample here
x_sample <- runif(5, -5, 5)
h <- 1
tib <- tibble(
k = seq_along(x_sample),
density = map(x_sample, compute_density, h = h)
) %>%
unnest(density)
draw_axis <- function(x_sample, tib) {
labs <- glue::glue("$x_{seq_along(x_sample)}$")
labs <- latex2exp::TeX(labs)
p <- ggplot(data = NULL, aes(x = x_sample)) +
theme_minimal() +
theme(
axis.line.x = element_line(),
panel.grid = element_blank(),
axis.ticks = element_line(size = 1),
axis.text = element_text(size = 14)
) +
scale_x_continuous(
limits = c(min(tib$x), max(tib$x)),
breaks = sort(x_sample),
minor_breaks = NULL,
labels = labs
) +
scale_y_continuous(
breaks = NULL,
limits = c(0, max(tib$density) + 0.025)
) +
labs(x = element_blank())
p
}
p <- draw_axis(x_sample, tib)
p
draw_kernel <- function(p, tib) {
p <- p +
geom_line(data = tib, aes(x, density, group = k), size = 1) +
geom_segment(
aes(
x = x_sample,
xend = x_sample,
y = 0,
yend = dnorm(0)
),
linetype = 2
) +
labs(y = element_blank())
p
}
draw_kernel(p, tib)
plot_until_x0 <- function(tib, x0) {
labs <- glue::glue("$x_{seq_along(x_sample)}$")
labs <- latex2exp::TeX(labs)
tib_x0 <- tib %>%
filter(x <= x0) %>%
group_by(x) %>%
summarise(est = mean(density), .groups = "drop")
anim_col <- 'firebrick3'
g <- ggplot() +
geom_line(
data = tib,
aes(x, density, group = k),
alpha = 0.5,
size = 1
) +
geom_point(
data = filter(tib, x == x0),
aes(x, density),
#col = anim_col,
alpha = 0.75,
size = 3
) +
geom_vline(xintercept = x0, col = anim_col, alpha = 0.5) +
geom_point(
data = slice_tail(tib_x0, n = 1),
aes(x, est),
col = anim_col,
size = 3
) +
geom_line(
data = tib_x0,
aes(x, est),
col = anim_col,
size = 1
) +
theme_classic() +
theme(
axis.line.x = element_line(),
axis.line.y = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_line(size = 1),
axis.text = element_text(size = 14)
) +
scale_x_continuous(
limits = c(min(tib$x), max(tib$x)),
breaks = sort(x_sample),
minor_breaks = NULL,
labels = labs
) +
scale_y_continuous(
breaks = NULL,
limits = c(0, max(tib$density) + 0.025)
) +
labs(x = element_blank(), y = element_blank())
print(g)
}
x0 <- (0)
plot_until_x0(tib, x0)
final_plot <- function(tib) {
labs <- glue::glue("$x_{seq_along(x_sample)}$")
labs <- latex2exp::TeX(labs)
tib_x0 <- tib %>%
group_by(x) %>%
summarise(est = mean(density), .groups = "drop")
anim_col <- 'firebrick3'
g <- tib_x0 %>%
ggplot() +
geom_line(
aes(x, est),
col = anim_col,
size = 1
) +
theme_classic() +
theme(
axis.line.x = element_line(),
axis.line.y = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_line(size = 1),
axis.text = element_text(size = 14)
) +
scale_x_continuous(
limits = c(min(tib$x), max(tib$x)),
breaks = sort(x_sample),
minor_breaks = NULL,
labels = labs
) +
scale_y_continuous(
breaks = NULL,
limits = c(0, max(tib$density) + 0.025)
) +
labs(x = element_blank(), y = element_blank())
print(g)
}
final_plot(tib)
gif <- function(x_sample, tib) {
p <- draw_axis(x_sample, tib)
map(1:3, ~print(p))
p <- draw_kernel(p, tib)
map(1:5, ~print(p))
map(seq(min(tib$x), max(tib$x), 0.5), ~plot_until_x0(tib, .))
map(1:15, ~final_plot(tib))
}
saveGIF(gif(x_sample, tib),
interval = 0.4, # animation speed
ani.width = 720,
ani.height = 405,
movie.name = "kernelAnimation.gif")
View(final_plot)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
