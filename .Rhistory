avg_rank = scales::comma(avg_rank, accuracy = .01),
dist = case_when(
dist == "high_skills" ~ "High skills",
dist == "low_skills" ~ "Low skills",
dist == "uniform_skills" ~ "Uniform skills",
dist == "normal_skills" ~ "Normal skills"
)
)
avgTable <- tableGrob(
avgs,
rows = NULL,
cols = NULL,
theme = ttheme_minimal(
core=list(fg_params = list(col = colorScale, fontface = 2))
)
)
simus %>%
mutate(dist = fct_reorder(dist, skill_rank)) %>%
ggplot(aes(y = dist, x = skill_rank, col = dist)) +
geom_boxplot(show.legend = F) +
theme_classic() +
labs(
x = "Skill Rank",
y = element_blank(),
title = "Skill Rank Distribution Among Successful Applicants",
subtitle = "(Average rank depicted in the table)"
) +
annotation_custom(avgTable, xmin = 60,  xmax = 70, ymin = 2, ymax = 5) +
scale_y_discrete(breaks = NULL) +
scale_color_manual(values = rev(colorScale)) +
theme(axis.line.y = element_blank(),
plot.subtitle = element_text(size = 10)) +
coord_cartesian(xlim = c(0, 75))
simus %>%
group_by(dist) %>%
summarize(avg_rank = mean(skill_rank))
simus
simus %>%
filter(skill_rank > 24)
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 22) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 22) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 23) %>%
nrow()
applicants_greater_double <- simus %>%
filter(skill_rank > 23) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 30) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 28) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 25) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 24) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
applicants_greater_double <- simus %>%
filter(skill_rank > 22) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
n <- 100
simus <- expand_grid(
dist = c("uniform_skills", "normal_skills", "low_skills", "high_skills"),
simuID = 1:N
) %>%
mutate(applicants = map(dist, ~pick_applicants2(n, get(.), m = 1))) %>%
unnest(applicants) %>%
filter(selected == 'yes')
knitr::opts_chunk$set(collapse = T)
library(tidyverse)
simulate_applicants <- function(n, dist, luck_ratio = 0.05) {
tibble(
skill = dist(n),
luck = runif(n, min = 0, max = 100),
overall = (1 - luck_ratio) * skill + luck_ratio * luck
)
}
set.seed(123)
simulate_applicants(5, function(x) rnorm(x, 50, 1))
normal_skills <- function(n) {
rnorm(n, mean = 50, sd = 50 / 4) %>%
# Make sure that score stays in bounds
pmax(0) %>%
pmin(100)
}
uniform_skills <- function(n) {
runif(n, min = 0, max = 100)
}
high_skills <- function(n) {
100 * (1 - rbeta(n, 1.2, 10))
}
low_skills <- function(n) {
100 * rbeta(n, 1.2, 10)
}
tibble(
x = seq(0, 100, 0.01),
high = dbeta(1 - x / 100, 1.2, 10) / 100,
low = dbeta(x / 100, 1.2, 10) / 100
) %>%
pivot_longer(cols = 2:3, names_to = "skill", values_to = "density") %>%
ggplot(aes(x, density,  col = skill)) +
geom_line(size = 1) +
theme_classic()
pick_applicants <- function(n, dist, m = 11) {
applicants <- simulate_applicants(n, dist)
applicants %>%
arrange(desc(overall)) %>%
mutate(selected = c(rep('yes', m), rep('no', n - m)))
}
n <- 18300
pick_applicants(n, normal_skills)
set.seed(123)
N <- 1000
simus <- expand_grid(
dist = c("uniform_skills", "normal_skills", "low_skills", "high_skills"),
simuID = 1:N
) %>%
mutate(applicants = map(dist, ~pick_applicants(n, get(.)))) %>%
unnest(applicants) %>%
filter(selected == 'yes')
library(grid)
library(gridExtra)
library(gtable)
avgs <- simus %>%
group_by(dist) %>%
summarize(avg_luck = mean(luck)) %>%
arrange(desc(avg_luck)) %>%
mutate(
avg_luck = scales::comma(avg_luck, accuracy = .01),
dist = case_when(
dist == "high_skills" ~ "High skills",
dist == "low_skills" ~ "Low skills",
dist == "uniform_skills" ~ "Uniform skills",
dist == "normal_skills" ~ "Normal skills"
)
)
colorScale <- glue::glue("dodgerblue{1:4}")
avgTable <- tableGrob(
avgs,
rows = NULL,
cols = NULL,
theme = ttheme_minimal(
core=list(fg_params = list(col = colorScale, fontface = 2))
)
)
simus %>%
mutate(dist = fct_reorder(dist, luck)) %>%
ggplot(aes(y = dist, x = luck, col = dist)) +
geom_boxplot(show.legend = F) +
theme_classic() +
labs(
x = "Luck",
y = element_blank(),
title = "Luck Distribution Among Successful Applicants",
subtitle = "(Average luck score depicted in the table)"
) +
annotation_custom(avgTable, xmin = 20,  xmax = 60, ymin = 2, ymax = 5) +
scale_y_discrete(breaks = NULL) +
scale_color_manual(values = rev(colorScale)) +
theme(axis.line.y = element_blank(),
plot.subtitle = element_text(size = 10))
n <- 100
simus <- expand_grid(
dist = c("uniform_skills", "normal_skills", "low_skills", "high_skills"),
simuID = 1:N
) %>%
mutate(applicants = map(dist, ~pick_applicants(n, get(.), m = 1))) %>%
unnest(applicants) %>%
filter(selected == 'yes')
avgs <- simus %>%
group_by(dist) %>%
summarize(avg_luck = mean(luck)) %>%
arrange(desc(avg_luck)) %>%
mutate(
avg_luck = scales::comma(avg_luck, accuracy = .01),
dist = case_when(
dist == "high_skills" ~ "High skills",
dist == "low_skills" ~ "Low skills",
dist == "uniform_skills" ~ "Uniform skills",
dist == "normal_skills" ~ "Normal skills"
)
)
avgTable <- tableGrob(
avgs,
rows = NULL,
cols = NULL,
theme = ttheme_minimal(
core=list(fg_params = list(col = colorScale, fontface = 2))
)
)
simus %>%
mutate(dist = fct_reorder(dist, luck)) %>%
ggplot(aes(y = dist, x = luck, col = dist)) +
geom_boxplot(show.legend = F) +
theme_classic() +
labs(
x = "Luck",
y = element_blank(),
title = "Luck Distribution Among Successful Applicants",
subtitle = "(Average luck score depicted in the table)"
) +
annotation_custom(avgTable, xmin = 10,  xmax = 20, ymin = 2, ymax = 5) +
scale_y_discrete(breaks = NULL) +
scale_color_manual(values = rev(colorScale)) +
theme(axis.line.y = element_blank(),
plot.subtitle = element_text(size = 10))
pick_applicants2 <- function(n, dist, m = 11, luck_thresh = 50) {
applicants <- simulate_applicants(n, dist)
applicants <- applicants %>%
mutate(skill_rank = min_rank(desc(skill))) %>%
filter(luck > luck_thresh)
applicants %>%
arrange(desc(skill)) %>%
mutate(selected = c(rep('yes', m), rep('no', nrow(applicants) - m)))
}
pick_applicants2(n, high_skills)
set.seed(123)
N <- 1000
n <- 18300
simus <- expand_grid(
dist = c("uniform_skills", "normal_skills", "low_skills", "high_skills"),
simuID = 1:N
) %>%
mutate(applicants = map(dist, ~pick_applicants2(n, get(.)))) %>%
unnest(applicants) %>%
filter(selected == 'yes')
avgs <- simus %>%
group_by(dist) %>%
summarize(avg_rank = mean(skill_rank)) %>%
arrange(desc(avg_rank)) %>%
mutate(
avg_rank = scales::comma(avg_rank, accuracy = .01),
dist = case_when(
dist == "high_skills" ~ "High skills",
dist == "low_skills" ~ "Low skills",
dist == "uniform_skills" ~ "Uniform skills",
dist == "normal_skills" ~ "Normal skills"
)
)
avgTable <- tableGrob(
avgs,
rows = NULL,
cols = NULL,
theme = ttheme_minimal(
core=list(fg_params = list(col = colorScale, fontface = 2))
)
)
simus %>%
mutate(dist = fct_reorder(dist, skill_rank)) %>%
ggplot(aes(y = dist, x = skill_rank, col = dist)) +
geom_boxplot(show.legend = F) +
theme_classic() +
labs(
x = "Skill Rank",
y = element_blank(),
title = "Skill Rank Distribution Among Successful Applicants",
subtitle = "(Average rank depicted in the table)"
) +
annotation_custom(avgTable, xmin = 60,  xmax = 70, ymin = 2, ymax = 5) +
scale_y_discrete(breaks = NULL) +
scale_color_manual(values = rev(colorScale)) +
theme(axis.line.y = element_blank(),
plot.subtitle = element_text(size = 10)) +
coord_cartesian(xlim = c(0, 75))
applicants_greater_double <- simus %>%
filter(skill_rank > 22) %>%
nrow()
applicants_greater_double / 4 / (11 * N)
n <- 100
simus <- expand_grid(
dist = c("uniform_skills", "normal_skills", "low_skills", "high_skills"),
simuID = 1:N
) %>%
mutate(applicants = map(dist, ~pick_applicants2(n, get(.), m = 1))) %>%
unnest(applicants) %>%
filter(selected == 'yes')
avgs <- simus %>%
group_by(dist) %>%
summarize(avg_rank = mean(skill_rank)) %>%
arrange(desc(avg_rank)) %>%
mutate(
avg_rank = scales::comma(avg_rank, accuracy = .01),
dist = case_when(
dist == "high_skills" ~ "High skills",
dist == "low_skills" ~ "Low skills",
dist == "uniform_skills" ~ "Uniform skills",
dist == "normal_skills" ~ "Normal skills"
)
)
avgTable <- tableGrob(
avgs,
rows = NULL,
cols = NULL,
theme = ttheme_minimal(
core=list(fg_params = list(col = colorScale, fontface = 2))
)
)
simus %>%
mutate(dist = fct_reorder(dist, skill_rank)) %>%
ggplot(aes(y = dist, x = skill_rank, col = dist)) +
geom_boxplot(show.legend = F) +
theme_classic() +
labs(
x = "Skill Rank",
y = element_blank(),
title = "Skill Rank Distribution Among Successful Applicants",
subtitle = "(Average rank depicted in the table)"
) +
annotation_custom(avgTable, xmin = 15,  xmax = 20, ymin = 2, ymax = 5) +
scale_y_discrete(breaks = NULL) +
scale_color_manual(values = rev(colorScale)) +
theme(axis.line.y = element_blank(),
plot.subtitle = element_text(size = 10)) +
coord_cartesian(xlim = c(0, 20))
n <- 100
set.seed(123)
simus <- expand_grid(
dist = c("uniform_skills", "normal_skills", "low_skills", "high_skills"),
simuID = 1:N
) %>%
mutate(applicants = map(dist, ~pick_applicants2(n, get(.), m = 1))) %>%
unnest(applicants) %>%
filter(selected == 'yes')
avgs <- simus %>%
group_by(dist) %>%
summarize(avg_rank = mean(skill_rank)) %>%
arrange(desc(avg_rank)) %>%
mutate(
avg_rank = scales::comma(avg_rank, accuracy = .01),
dist = case_when(
dist == "high_skills" ~ "High skills",
dist == "low_skills" ~ "Low skills",
dist == "uniform_skills" ~ "Uniform skills",
dist == "normal_skills" ~ "Normal skills"
)
)
avgTable <- tableGrob(
avgs,
rows = NULL,
cols = NULL,
theme = ttheme_minimal(
core=list(fg_params = list(col = colorScale, fontface = 2))
)
)
simus %>%
mutate(dist = fct_reorder(dist, skill_rank)) %>%
ggplot(aes(y = dist, x = skill_rank, col = dist)) +
geom_boxplot(show.legend = F) +
theme_classic() +
labs(
x = "Skill Rank",
y = element_blank(),
title = "Skill Rank Distribution Among Successful Applicants",
subtitle = "(Average rank depicted in the table)"
) +
annotation_custom(avgTable, xmin = 15,  xmax = 20, ymin = 2, ymax = 5) +
scale_y_discrete(breaks = NULL) +
scale_color_manual(values = rev(colorScale)) +
theme(axis.line.y = element_blank(),
plot.subtitle = element_text(size = 10)) +
coord_cartesian(xlim = c(0, 20))
simus %>%
filter(skill_rank > 5) %>%
group_by(dist) %>%
count() %>%
mutate(prop = n / 1000)
simus %>%
filter(skill_rank > 4) %>%
group_by(dist) %>%
count() %>%
mutate(prop = n / 1000)
simus %>%
filter(skill_rank > 4) %>%
group_by(dist) %>%
count(sort = T) %>%
mutate(prop = n / 1000)
simus %>%
filter(skill_rank > 4) %>%
group_by(dist) %>%
count(sort = T) %>%
mutate(prop = n / 1000) %>%
mutate(prop = scales::percent(accurary = 0.1))
simus %>%
filter(skill_rank > 4) %>%
group_by(dist) %>%
count(sort = T) %>%
mutate(prop = n / 1000) %>%
mutate(prop = scales::percent(accuracy = 0.1))
simus %>%
filter(skill_rank > 4) %>%
group_by(dist) %>%
count(sort = T) %>%
mutate(prop = n / 1000) %>%
mutate(prop = scales::percent(prop, accuracy = 0.1))
simus %>%
filter(skill_rank > 4) %>%
group_by(dist) %>%
count(sort = T) %>%
mutate(prop = n / 1000) %>%
mutate(prop = scales::percent(prop, accuracy = 0.1)) %>%
mutate(dist = case_when(
dist == "high_skills" ~ "High skills",
dist == "low_skills" ~ "Low skills",
dist == "uniform_skills" ~ "Uniform skills",
dist == "normal_skills" ~ "Normal skills"
))
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site(method = "html")
blogdown::build_site(build_rmd = T)
blogdown::new_post(ext = ".Rmarkdown")
blogdown::new_post("luck-vs-skill", ext = ".Rmarkdown")
blogdown::serve_site()
?geom_boxplot
??geom_boxplot
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post("A few ggplot tips", ext = ".Rmarkdown")
library(modeldata)
ames
data(ames)
ames
housing <- data(ames)
library(modeldata)
data(ames)
ames
blogdown:::preview_site()
ames <- ames %>% janitor::clean_names()
library(tidyverse)
library(modeldata)
data(ames)
ames <- ames %>% janitor::clean_names()
ames
ames %>%
ggplot(aes(x = sale_price)) +
geom_histogram()
ames %>%
ggplot(aes(x = sale_price)) +
geom_histogram()
ames %>%
ggplot(aes(x = log(sale_price))) +
geom_histogram()
ames %>%
ggplot(aes(x = log(sale_price))) +
geom_histogram()
ames %>%
ggplot(aes(x = log(sale_price, 10))) +
geom_histogram()
ames %>%
ggplot(aes(x = sale_price)) +
geom_histogram() +
scale_x_log10()
ames %>%
ggplot(aes(x = sale_price)) +
geom_histogram() +
scale_x_log10(labels = scales::label_number())
ames %>%
ggplot(aes(x = sale_price)) +
geom_histogram() +
scale_x_log10()
ames %>%
ggplot(aes(x = sale_price)) +
geom_histogram() +
scale_x_log10(labels = scales::label_number())
ames %>%
ggplot(aes(x = sale_price)) +
geom_histogram() +
scale_x_log10(labels = scales::label_dollar())
ames %>%
ggplot(aes(y = sale_price)) +
geom_histogram() +
scale_y_log10(labels = scales::label_dollar())
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
