<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Albert Rapp</title>
<link>https://albert-rapp.de/blog.html</link>
<atom:link href="https://albert-rapp.de/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Albert Rapp's personal Blog.</description>
<generator>quarto-0.9.80</generator>
<lastBuildDate>Mon, 09 May 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>How to embed a Shiny app into your blog posts</title>
  <link>https://albert-rapp.de/posts/12_embedding_shiny_app/12_embedding_shiny_app.html</link>
  <description><![CDATA[ 

<p>Today’s a short blog post. It’s mainly for sharing a cool trick I just learned.</p>
<p>Here’s a simple template to incorporate your Shiny app into an HTML file. For instance, you can incorporate your shiny app into your blog post like I do here. Simply exchange the src argument by your Shiny app’s URL and then you’re good to go. Here, I use the app that I have <a href="../08_drawing_ggplot_interactively/08_drawing_ggplot_interactively.html">shown you a couple of months ago</a>.</p>
<pre><code>&lt;iframe src="https://rappa.shinyapps.io/interactive-ggplot" data-external="1" width="925px" height="800px"&gt;
&lt;/iframe&gt;</code></pre>
<p>From what I could tell, this is same code that <code>knitr::include_app()</code> drops. But including the <code>iframe</code> manually let’s you adjust the width <strong>and</strong> height of your frame. Beware that you will have to choose the dimensions large enough for your Shiny app.</p>
<p>UPDATE: Originally, I had demonstrated the above code chunk here. But that causes unnecessary traffic on my shinyapps.io account, so I removed the demo.</p>


 ]]></description>
  <category>Shiny</category>
  <category>Shorts</category>
  <guid>https://albert-rapp.de/posts/12_embedding_shiny_app/12_embedding_shiny_app.html</guid>
  <pubDate>Mon, 09 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Use {lubridate} and {rtweet} to analyze your Twitter timeline</title>
  <link>https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers.html</link>
  <description><![CDATA[ 


<p>This week, I am oddly proud to announce that I have reached 1000 followers on <a href="https://twitter.com/rappa753">Twitter</a>. Check out the visualization that I have created for this joyous occasion.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/11_track_twitter_followers/final_viz.png" class="img-fluid" width="1754"></p>
</div>
</div>
<p>To me, my rising follower count and the somewhat regular mails that I receive are a sign that people like to read my blog. And to thank you all for following my work, let me give you a quick intro to the packages <code>rtweet</code> and <code>lubridate</code>. These were instrumental in creating the above visual.</p>
<section id="working-with-rtweet" class="level2">
<h2 class="anchored" data-anchor-id="working-with-rtweet">Working with rtweet</h2>
<p>At the end of February 2022, I wondered how my follower count evolves over time. Unfortunately, this is not something Twitter shows you by default. The Analytics page only shows me the change within my last 28 days. To overcome this drawback, I consulted the <code>rtweet</code> package which is a fabulous package that lets you interact with Twitter’s API through R.</p>
<p>In my case, I only do rudimentary work with it and track my followers over time. For this to work, I have set up an R script that runs every hour to download a list of my followers. Each hour, the list’s length tells me how many followers I have.</p>
<p>If you want to do the same, install the package first. Make sure to install the development version from GitHub, though.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1">remotes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"rOpenSci/rtweet"</span>)</span></code></pre></div>
</div>
<section id="basic-functionalities" class="level3">
<h3 class="anchored" data-anchor-id="basic-functionalities">Basic functionalities</h3>
<p><code>rtweet</code> comes with a lot of convenient function. Most of these start with <code>get_</code>. For instance, there are</p>
<ul>
<li><code>get_followers()</code>: This is the function to get a list of an account’s followers.</li>
<li><code>get_timeline()</code>: This gives you the a user’s timeline like tweets, replies and mentions.</li>
<li><code>get_retweets()</code>: This gives you the most recent retweets of a given tweet.</li>
</ul>
<p>My aforementioned R script just runs <code>get_followers()</code> and computes the number of rows of the resulting tibble.</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(rtweet)</span>
<span id="cb2-2">tib <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_followers</span>(<span class="st" style="color: #20794D;">'rappa753'</span>)</span>
<span id="cb2-3">tib</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 2,130 × 2
   from_id             to_id   
   &lt;chr&gt;               &lt;chr&gt;   
 1 1403459307690020865 rappa753
 2 708311039419490304  rappa753
 3 1009256944501174272 rappa753
 4 3185243893          rappa753
 5 1334663210801057792 rappa753
 6 1546881068183199744 rappa753
 7 449390779           rappa753
 8 1177241848504406026 rappa753
 9 85539709            rappa753
10 1476991028          rappa753
# … with 2,120 more rows</code></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">nrow</span>(tib)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] 2130</code></pre>
</div>
</div>
<p>For my above visualization, I used <code>get_timeline()</code> to extract my five most popular tweets. Here, I ranked the popularity by the count of likes resp. “favorites” as <code>rtweet</code> likes to call it.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb6-2">tl <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_timeline</span>(<span class="st" style="color: #20794D;">'rappa753'</span>, <span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb6-3">tl_slice <span class="ot" style="color: #00769E;">&lt;-</span> tl <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">slice_max</span>(favorite_count, <span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">select</span>(created_at, full_text, favorite_count, retweet_count) </span>
<span id="cb6-6">tl_slice</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 5 × 4
  created_at          full_text                     favorite_count retweet_count
  &lt;dttm&gt;              &lt;chr&gt;                                  &lt;int&gt;         &lt;int&gt;
1 2022-06-18 15:46:22 "Ever heard of logistic regr…           1462           231
2 2022-07-10 16:18:10 "The #rstats ecosystem makes…            635            90
3 2022-03-05 21:56:33 "The fun thing about getting…            507            82
4 2022-07-09 13:21:04 "Creating calendar plots wit…            420            52
5 2022-02-19 18:32:23 "Ever wanted to use colors i…            347            56</code></pre>
</div>
</div>
<p>Notice that I tweeted two of these before I started tracking my followers. Consequently, I ignored them for my visualization.</p>
<p>Unfortunately, the <code>rtweet</code> package cannot do everything. For example, the snapshot functionality <code>tweet_shot()</code> does not work anymore. I think that’s because the Twitter API changed.</p>
<p>This bothered me during the <a href="https://twitter.com/30DayChartChall">30 day chart challenge</a> in April because I wanted to automatically extract great visualizations from Twitter. But as <code>tweet_shot()</code> was not working, I had to call Twitter’s API manually without <code>rtweet</code>. If you’re curious about how that works, check out my <a href="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html">corresponding blog post</a>. There, I’ve also explained how to set up a script that gets executed, say, every hour automatically.</p>
</section>
<section id="setting-up-a-twitter-app" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-a-twitter-app">Setting up a Twitter app</h3>
<p>This pretty much explains how <code>rtweet</code> works. In general, it is really easy to use. And if you only want to use it only occasionally, there is not much more to it.</p>
<p>However, if you want to use the package more often - as in calling the API every hour - then you need to set up a Twitter app. You can read up on how that works in the “Preparations” section of the <a href="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html">above blog post</a>. Once you’ve got that down, your <code>rtweet</code> calls can be authenticated through your Twitter app like so.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">auth <span class="ot" style="color: #00769E;">&lt;-</span> rtweet<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rtweet_app</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #677623;">bearer_token =</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'twitter-bearer-token'</span>, <span class="at" style="color: #677623;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb8-3">)</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">auth_as</span>(auth)</span></code></pre></div>
</div>
<p>Here, I have used the <code>keyring</code> package to hide the bearer token of my Twitter app. If that doesn’t mean anything to you, let me once again refer to the <a href="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html">above blog post</a>. The important thing is that after these lines ran your <code>rtweet</code> calls get funneled through your own Twitter app.</p>
</section>
</section>
<section id="working-with-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="working-with-lubridate">Working with lubridate</h2>
<p>As you saw above, the timeline that we extracted and saved in <code>rtweet</code> contains time data. Here it is once again.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">tl_slice</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 5 × 4
  created_at          full_text                     favorite_count retweet_count
  &lt;dttm&gt;              &lt;chr&gt;                                  &lt;int&gt;         &lt;int&gt;
1 2022-06-18 15:46:22 "Ever heard of logistic regr…           1462           231
2 2022-07-10 16:18:10 "The #rstats ecosystem makes…            635            90
3 2022-03-05 21:56:33 "The fun thing about getting…            507            82
4 2022-07-09 13:21:04 "Creating calendar plots wit…            420            52
5 2022-02-19 18:32:23 "Ever wanted to use colors i…            347            56</code></pre>
</div>
</div>
<p>Sadly, working with times and dates is rarely pleasant. But we can make our life a bit easier by using the <code>lubridate</code> package which was made for that. To show you how it works, it is probably best to show you a couple of use cases.</p>
<p>All of these will be taken from what I had to deal with to create my celebratory visualization. But I simplified it to minimal examples for this blog post. More use cases can be found in the <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/lubridate.pdf">lubridate cheatsheet</a> or the <a href="https://bookdown.org/Tazinho/Tidyverse-Cookbook/dates-and-times.html">tidyverse cookbook ressource</a> by Malte Grosser.</p>
<section id="parse-dates-and-times" class="level3">
<h3 class="anchored" data-anchor-id="parse-dates-and-times">Parse dates and times</h3>
<p><strong>EDIT July 13, 2022:</strong> After moving my blog to quarto, <code>{rtweet}</code> updated its default output format. Now, parsing dates and times is not necessary anymore. I leave this section in here because the code may still be helpful in other situations.</p>
<p>First, I needed to convert the <code>created_at</code> column from <code>character</code> to <code>datetime</code> format. The easiest way to do that gets rid of <code>+0000</code> in the character vector and then parses the vector into the right format via <code>parse_date_time()</code>. But there is a catch. Check out what happens if I try this on my computer.</p>
<div class="cell" data-mesage="false">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb11-2">tl_slice <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">created_at =</span> <span class="fu" style="color: #4758AB;">parse_date_time</span>(</span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">str_remove</span>(created_at, <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">+0000'</span>), <span class="co" style="color: #5E5E5E;"># remove the +0000 </span></span>
<span id="cb11-5">    <span class="at" style="color: #677623;">orders =</span> <span class="st" style="color: #20794D;">'a b d H:M:S Y'</span></span>
<span id="cb11-6">  ))</span></code></pre></div>
</div>
<p>See how all values in <code>created_at</code> are <code>NA</code> now? That’s a problem. And we will solve it very soon. But first, let me explain how the function call works.</p>
<p>The <code>orders</code> argument specifies how the vector <code>created_at</code> (without <code>+0000</code>) is to be understood. We clarify that <code>created_at</code> contains (in the order of appearance)</p>
<ol type="1">
<li>abbreviated week day names (<code>a</code>)</li>
<li>abbreviated month names (<code>b</code>)</li>
<li>the day of the month as decimals (<code>d</code>)</li>
<li>and so on</li>
</ol>
<p>Where do these abbreviations <code>a</code>, <code>b</code>, <code>d</code>, etc. come from? They are defined in the help page of <code>parse_date_time()</code>. You can find them in the section “Details”. But why does the code not work? Why do we always get an <code>NA</code>? For once, my computer is truly the problem. Or rather, its settings.</p>
<p>By default, my computer is set to German. But even if RStudio or R’s error messages are set to English, my computer’s so-called “locale” may be still be set to German. That’s a problem because abbreviations like “Sat” and “Wed” refer to the <strong>English</strong> words “Saturday” and “Wednesday”. So, we need to make sure that <code>parse_date_time()</code> understands that it needs to use an English locale. Then, everything works out.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1">parsed_highlights <span class="ot" style="color: #00769E;">&lt;-</span> tl_slice <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">created_at =</span> <span class="fu" style="color: #4758AB;">parse_date_time</span>(</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">str_remove</span>(created_at, <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">+0000'</span>), <span class="co" style="color: #5E5E5E;"># remove the +0000 </span></span>
<span id="cb12-4">    <span class="at" style="color: #677623;">orders =</span> <span class="st" style="color: #20794D;">'a b d H:M:S Y'</span>,</span>
<span id="cb12-5">    <span class="at" style="color: #677623;">locale =</span> <span class="st" style="color: #20794D;">"en_US.UTF-8"</span></span>
<span id="cb12-6">  ))</span>
<span id="cb12-7">parsed_highlights</span></code></pre></div>
</div>
<div class="cell">

</div>
<p>We are now ready to send this data to ggplot. Since <code>created_at</code> is formatted in datetime now, ggplot will understand what it means when we map <code>x = created_at</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1">parsed_highlights <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(created_at, favorite_count)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="using-scale_x_datetime-and-locale" class="level3">
<h3 class="anchored" data-anchor-id="using-scale_x_datetime-and-locale">Using scale_x_date(time) and locale</h3>
<p>Did you see that the x-axis uses German abbreviations and doesn’t show what year we’re in? That’s not great. Let’s change that. As is always the case when we want to format the axes we will need a <code>scale_*()</code> function. Here, what we need is <code>scale_x_datetime()</code>.</p>
<p>But this won’t solve our German locale problem. The easiest way to solve that tricky ordeal is to change the locale globally via <code>Sys.setlocale()</code>. Don’t worry, though. The locale will reset after restarting R. No permanent “damage” here.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">Sys.setlocale</span>(<span class="st" style="color: #20794D;">"LC_ALL"</span>,<span class="st" style="color: #20794D;">"en_US.UTF-8"</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=de_DE.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=de_DE.UTF-8;LC_IDENTIFICATION=C"</code></pre>
</div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb16-1">p <span class="ot" style="color: #00769E;">&lt;-</span> parsed_highlights <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(created_at, favorite_count)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;">scale_x_datetime</span>(</span>
<span id="cb16-5">    <span class="at" style="color: #677623;">date_breaks =</span> <span class="st" style="color: #20794D;">'2 months'</span>, <span class="co" style="color: #5E5E5E;"># break every two months</span></span>
<span id="cb16-6">    <span class="at" style="color: #677623;">date_labels =</span> <span class="st" style="color: #20794D;">'%b %Y'</span></span>
<span id="cb16-7">  )</span>
<span id="cb16-8">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that we have once again used the same abbreviation as for <code>parse_date_time()</code>. This time, though, they have to be preceded by <code>%</code>. Don’t ask me why. It is just the way it is.</p>
</section>
<section id="create-new-dates" class="level3">
<h3 class="anchored" data-anchor-id="create-new-dates">Create new dates</h3>
<p>Let us add a rectangle to our previous plot via an annotation. This is similar to what I needed to do when adding my “mysterious wonderland” to my plot.</p>
<p>Since the <code>x</code> aesthetic is formatted to datetime, we have to specify dates for the <code>xmin</code> and <code>xmax</code> aesthetic of our annotation. Therefore, we need to create dates manually. In this case, <code>make_datetime()</code> is the way to go. If we’re dealing only with dates (without times), then <code>make_date()</code> is a useful pendant. Both functions are quite straightforward.</p>
<div class="cell">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb17-3">    <span class="st" style="color: #20794D;">'rect'</span>,</span>
<span id="cb17-4">    <span class="at" style="color: #677623;">xmin =</span> <span class="fu" style="color: #4758AB;">make_datetime</span>(<span class="at" style="color: #677623;">year =</span> <span class="dv" style="color: #AD0000;">2021</span>, <span class="at" style="color: #677623;">month =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #677623;">day =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #677623;">hour =</span> <span class="dv" style="color: #AD0000;">12</span>),</span>
<span id="cb17-5">    <span class="at" style="color: #677623;">xmax =</span> <span class="fu" style="color: #4758AB;">make_datetime</span>(<span class="at" style="color: #677623;">year =</span> <span class="dv" style="color: #AD0000;">2021</span>, <span class="at" style="color: #677623;">month =</span> <span class="dv" style="color: #AD0000;">9</span>), </span>
<span id="cb17-6">    <span class="at" style="color: #677623;">ymin =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb17-7">    <span class="at" style="color: #677623;">ymax =</span> <span class="dv" style="color: #AD0000;">273</span>,</span>
<span id="cb17-8">    <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb17-9">  )</span>
<span id="cb17-10">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="filter-with-intervals" class="level3">
<h3 class="anchored" data-anchor-id="filter-with-intervals">Filter with intervals</h3>
<p>Maybe we want to highlight a part of our line. To do so, we could filter our data to check whether certain date ranges correspond to parts that we want to highlight. Usually when we want to check if a value <code>x</code> is within a certain set of <code>objects</code> we use <code>x %in% objects</code>.</p>
<p>To do the same with dates, we need to create an interval with <code>interval()</code> first. Then, we can use that in <code>filter()</code> in conjunction with <code>%within%</code> instead of <code>%in%</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb18-1">my_interval <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">interval</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #677623;">start =</span> <span class="fu" style="color: #4758AB;">make_date</span>(<span class="at" style="color: #677623;">year =</span> <span class="dv" style="color: #AD0000;">2022</span>, <span class="at" style="color: #677623;">month =</span> <span class="dv" style="color: #AD0000;">2</span>), </span>
<span id="cb18-3">  <span class="at" style="color: #677623;">end =</span> <span class="fu" style="color: #4758AB;">make_date</span>(<span class="at" style="color: #677623;">year =</span> <span class="dv" style="color: #AD0000;">2022</span>, <span class="at" style="color: #677623;">month =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #677623;">day =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb18-4">)</span>
<span id="cb18-5"></span>
<span id="cb18-6">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;">geom_line</span>(</span>
<span id="cb18-8">    <span class="at" style="color: #677623;">data =</span> parsed_highlights <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(created_at <span class="sc" style="color: #5E5E5E;">%within%</span> my_interval),</span>
<span id="cb18-9">    <span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">'red'</span>,</span>
<span id="cb18-10">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb18-11">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="calculations-with-times" class="level3">
<h3 class="anchored" data-anchor-id="calculations-with-times">Calculations with times</h3>
<p>Say that you want to highlight the first five days after a certain date. (That’s exactly what I did in my plot.) Then, you can simply add <code>days(5)</code> to this date. There are similar functions like <code>minutes()</code>, <code>hours()</code> and so on. Let me show you how that may look in a visualization.</p>
<div class="cell">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb19-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb19-3">    <span class="st" style="color: #20794D;">'rect'</span>,</span>
<span id="cb19-4">    <span class="at" style="color: #677623;">xmin =</span> parsed_highlights[[<span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>]] <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">hours</span>(<span class="dv" style="color: #AD0000;">24</span>),</span>
<span id="cb19-5">    <span class="at" style="color: #677623;">xmax =</span> parsed_highlights[[<span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>]] <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">days</span>(<span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb19-6">    <span class="at" style="color: #677623;">ymin =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="cn" style="color: #8f5902;">Inf</span>,</span>
<span id="cb19-7">    <span class="at" style="color: #677623;">ymax =</span> <span class="cn" style="color: #8f5902;">Inf</span>,</span>
<span id="cb19-8">    <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.25</span>,</span>
<span id="cb19-9">    <span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">'blue'</span></span>
<span id="cb19-10">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>This was a short intro to <code>lubridate</code> and <code>rtweet</code>. Naturally, the evolution of my follower count contained a lot more steps. In the end, though, these steps were merely a collection of</p>
<ul>
<li>techniques you know from my two previous storytelling with ggplot posts (see <a href="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html">here</a> and <a href="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html">here</a>) plus</li>
<li>data wrangling using times and dates with the functions that I just showed you.</li>
</ul>
<p>Once again, thank you all for your support. And if you liked this post and don’t follow my work yet, then consider following me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <category>API</category>
  <guid>https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers.html</guid>
  <pubDate>Fri, 06 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Storytelling in ggplot using rounded rectangles</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html</link>
  <description><![CDATA[ 


<p>A standard ggplot output can rarely convey a powerful message. For effective data visualization you need to customize your plot. <a href="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html">A couple of weeks ago</a>, I showed you how.</p>
<p>In this blog post, I will rebuild another great data viz from scratch. If you have read my original blog post, then you won’t have to learn many new tricks. Most of the techniques that I use can be found there. This is also why I save explanations only for the parts that are new. This should keep this blog post a bit shorter. You’re welcome.</p>
<p>Nevertheless, in today’s installment of my <a href="https://albert-rapp.de/ggplot-series.html">ggplot2 series</a> I will teach you something truly special. I will teach you how to create…*drum roll*…rounded rectangles. Sounds exciting, doesn’t it? Well, maybe not. But it looks great. Check out what we’ll build today.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/final_remake.png" class="img-fluid" width="944"></p>
</div>
</div>
<p>This plot comes to you via another excellent entry of the <a href="https://www.storytellingwithdata.com/blog/bar-charts-and-dot-plots-and-line-graphs-oh-my">storytelling with data (SWD) blog</a>. To draw rectangles with rounded rectangles we can leverage the <a href="https://github.com/hrbrmstr/ggchicklet">ggchicklet package</a>. Though, for some mysterious reason, the <code>geom_*</code> that we need is hidden in that package. Therefore, we will have to dig it out. That’s the easy way to do it. And honestly, this is probably also the practical way to do it.</p>
<p>However, every now and then I want to do things the hard way. So, my dear reader, this is why I will also show you how to go from rectangles to rounded rectangles the hard way. But only after showing you the easy way first, of course. Only then, in the second part of this blog post, will I take the sadistically-inclined among you on a tour to the world of grobs.</p>
<p>Grobs, you say? <a href="https://www.youtube.com/watch?v=71GWS3ccmvI">Is that an instrument</a>? No, Patrick, it is an <strong>gr</strong>aphical <strong>ob</strong>ject. Under the hood, we can transform a ggplot to a list of graphical objects. And with a few hacks, we can adjust that list. This way, the list will contain not <code>rectGrobs</code> but <code>roundrectGrobs</code>. Then, we can put everything back together, close the hood and enjoy our round rectangles. Now, enough intro, let’s go.</p>
<section id="basic-plot" class="level2">
<h2 class="anchored" data-anchor-id="basic-plot">Basic plot</h2>
<p>First, let us recreate the “bad” plot that the above SWD blog post remodels. In the end, we will work on the remodeled data viz too. As always, though, there is something to be learnt from <a href="https://www.allisonhorst.com/post/do-your-worst/">creating an ugly plot</a>. So, here’s the beast that we will build.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/before_plot.png" class="img-fluid figure-img" style="width:100.0%"></p>
<p></p><p></p>
</figure>
</div>
</div>
</div>
<section id="read-data" class="level3">
<h3 class="anchored" data-anchor-id="read-data">Read data</h3>
<p>I didn’t find the underlying data and had to guess the values from the plot. Thus, I probably didn’t get the values exactly right. But for our purposes this should suffice. If you want, you can download the European csv-file that I created <a href="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/ratios.csv">here</a>.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># Use read_csv2 because it's an European file</span></span>
<span id="cb1-3">dat <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv2</span>(<span class="st" style="color: #20794D;">'ratios.csv'</span>)</span></code></pre></div>
</div>
</section>
<section id="compute-averages" class="level3">
<h3 class="anchored" data-anchor-id="compute-averages">Compute averages</h3>
<p>Let me point out that taking the average of the ratios may not necessarily give an appropriate result (in a statistical kind of sense). But, once again, this should not bother us as we only want to learn how to plot.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1">avgs <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #677623;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb2-4">    <span class="at" style="color: #677623;">names_to =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb2-5">    <span class="at" style="color: #677623;">values_to =</span> <span class="st" style="color: #20794D;">'ratio'</span></span>
<span id="cb2-6">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;">group_by</span>(type) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #677623;">ratio =</span> <span class="fu" style="color: #4758AB;">mean</span>(ratio)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">location =</span> <span class="st" style="color: #20794D;">'REGION AVERAGE'</span>)</span>
<span id="cb2-10">avgs</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 3 × 3
  type               ratio location      
  &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;         
1 inventory_turnover  9.78 REGION AVERAGE
2 store_lower         7.11 REGION AVERAGE
3 store_upper        12.1  REGION AVERAGE</code></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">### Combine with data </span></span>
<span id="cb4-2">dat_longer <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #677623;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-5">    <span class="at" style="color: #677623;">names_to =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb4-6">    <span class="at" style="color: #677623;">values_to =</span> <span class="st" style="color: #20794D;">'ratio'</span></span>
<span id="cb4-7">  ) </span>
<span id="cb4-8">dat_longer_with_avgs <span class="ot" style="color: #00769E;">&lt;-</span> dat_longer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">bind_rows</span>(avgs)</span></code></pre></div>
</div>
</section>
<section id="create-bars" class="level3">
<h3 class="anchored" data-anchor-id="create-bars">Create bars</h3>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Colors we will use throughout this blog post</span></span>
<span id="cb5-2">color_palette <span class="ot" style="color: #00769E;">&lt;-</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;"># Make sure that bars are in the same order as in the data set</span></span>
<span id="cb5-5">dat_factored <span class="ot" style="color: #00769E;">&lt;-</span> dat_longer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">location =</span> <span class="fu" style="color: #4758AB;">factor</span>(location, <span class="at" style="color: #677623;">levels =</span> dat<span class="sc" style="color: #5E5E5E;">$</span>location)) </span>
<span id="cb5-7"></span>
<span id="cb5-8">p <span class="ot" style="color: #00769E;">&lt;-</span> dat_factored <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(location, ratio)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb5-11">    <span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'inventory_turnover'</span>),</span>
<span id="cb5-12">    <span class="at" style="color: #677623;">fill =</span> color_palette[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb5-13">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-14">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb5-15">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="turn-labels-and-get-rid-of-axis-text" class="level3">
<h3 class="anchored" data-anchor-id="turn-labels-and-get-rid-of-axis-text">Turn labels and get rid of axis text</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb6-4">    <span class="at" style="color: #677623;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">angle =</span> <span class="dv" style="color: #AD0000;">50</span>, <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-5">  )</span>
<span id="cb6-6">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="remove-expansion-to-get-x-labels-closer-to-the-bars" class="level3">
<h3 class="anchored" data-anchor-id="remove-expansion-to-get-x-labels-closer-to-the-bars">Remove expansion to get x-labels closer to the bars</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #677623;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">30</span>), <span class="at" style="color: #677623;">expand =</span> F)</span>
<span id="cb7-2">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="remove-other-grid-lines" class="level3">
<h3 class="anchored" data-anchor-id="remove-other-grid-lines">Remove other grid lines</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #677623;">panel.grid.minor =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb8-4">    <span class="at" style="color: #677623;">panel.grid.major.x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb8-5">    <span class="at" style="color: #677623;">panel.grid.major.y =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #677623;">colour =</span> <span class="st" style="color: #20794D;">'black'</span>, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb8-6">  )</span>
<span id="cb8-7">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="format-y-axis" class="level3">
<h3 class="anchored" data-anchor-id="format-y-axis">Format y-axis</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #677623;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb9-4">    <span class="at" style="color: #677623;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>(<span class="at" style="color: #677623;">accuracy =</span> <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb9-5">  )</span>
<span id="cb9-6">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-points" class="level3">
<h3 class="anchored" data-anchor-id="add-points">Add points</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'store_lower'</span>),</span>
<span id="cb10-4">    <span class="at" style="color: #677623;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb10-5">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb10-6">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'store_upper'</span>),</span>
<span id="cb10-9">    <span class="at" style="color: #677623;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">3</span>],</span>
<span id="cb10-10">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb10-11">  ) </span>
<span id="cb10-12">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-average-lines" class="level3">
<h3 class="anchored" data-anchor-id="add-average-lines">Add average lines</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">geom_hline</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #677623;">yintercept =</span> avgs[[<span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">'ratio'</span>]], </span>
<span id="cb11-4">    <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span>, </span>
<span id="cb11-5">    <span class="at" style="color: #677623;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb11-6">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">geom_hline</span>(</span>
<span id="cb11-8">    <span class="at" style="color: #677623;">yintercept =</span> avgs[[<span class="dv" style="color: #AD0000;">2</span>, <span class="st" style="color: #20794D;">'ratio'</span>]], </span>
<span id="cb11-9">    <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span>, </span>
<span id="cb11-10">    <span class="at" style="color: #677623;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb11-11">  )</span>
<span id="cb11-12">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-text-labels" class="level3">
<h3 class="anchored" data-anchor-id="add-text-labels">Add text labels</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'inventory_turnover'</span>),</span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">label =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">comma</span>(ratio, <span class="at" style="color: #677623;">accuarcy =</span> <span class="fl" style="color: #AD0000;">0.1</span>)),</span>
<span id="cb12-5">    <span class="at" style="color: #677623;">nudge_y =</span> <span class="fl" style="color: #AD0000;">0.8</span>,</span>
<span id="cb12-6">    <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span></span>
<span id="cb12-7">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="improved-plot" class="level2">
<h2 class="anchored" data-anchor-id="improved-plot">Improved plot</h2>
<p>Now, let us begin building the improved plot. First, let us get the long labels onto the y-axis and use regular rectangles before we worry about the rounded rectangles.</p>
<section id="flip-axes-and-use-rectangles-to-show-upper-and-lower-bounds." class="level3">
<h3 class="anchored" data-anchor-id="flip-axes-and-use-rectangles-to-show-upper-and-lower-bounds.">Flip axes and use rectangles to show upper and lower bounds.</h3>
<p>Unfortunately, <code>geom_rect()</code> does not work as intended.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1">dat_with_avgs <span class="ot" style="color: #00769E;">&lt;-</span> dat_longer_with_avgs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #677623;">names_from =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb13-4">    <span class="at" style="color: #677623;">values_from =</span> <span class="st" style="color: #20794D;">'ratio'</span></span>
<span id="cb13-5">  ) </span>
<span id="cb13-6"></span>
<span id="cb13-7">dat_with_avgs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">geom_rect</span>(</span>
<span id="cb13-10">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb13-11">      <span class="at" style="color: #677623;">xmin =</span> store_lower, </span>
<span id="cb13-12">      <span class="at" style="color: #677623;">xmax =</span> store_upper, </span>
<span id="cb13-13">      <span class="at" style="color: #677623;">ymin =</span> location, </span>
<span id="cb13-14">      <span class="at" style="color: #677623;">ymax =</span> location</span>
<span id="cb13-15">    )</span>
<span id="cb13-16">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Instead, let us create a new numeric column containing a location’s rank based on its <code>inventory_turnover</code>. This is done with <code>row_number()</code>. While we’re at it, let us create a new tibble that also contains information on the colors each geom will use. Then, we can map to these new columns in ggplot and make sure that the values are used as is by setting <code>scale_*_identity()</code>. This is one convenient way to control the aesthetics of each geom <a href="http://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot.html#how-do-i-manually-set-aesthetics-with-aes-and-scale__identity">without functional programming</a>. With the image from above in mind, we know that our final plot will need</p>
<ul>
<li>different <code>col</code>, <code>fill</code> and <code>size</code> values in <code>geom_point()</code></li>
<li>different <code>fill</code> and <code>alpha</code> values in <code>geom_rect()</code></li>
</ul>
<p>Here’s what this tibble looks like.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1">bar_height <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.4</span> </span>
<span id="cb14-2">no_highlight_col <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'grey70'</span></span>
<span id="cb14-3">average_highlight_col <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb14-4">below_highlight <span class="ot" style="color: #00769E;">&lt;-</span> color_palette[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb14-5"></span>
<span id="cb14-6">sorted_dat <span class="ot" style="color: #00769E;">&lt;-</span> dat_with_avgs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">num =</span> <span class="fu" style="color: #4758AB;">row_number</span>(inventory_turnover)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-8">  <span class="co" style="color: #5E5E5E;"># Sort so that everything is in order of rank</span></span>
<span id="cb14-9">  <span class="co" style="color: #5E5E5E;"># Important for text labels later on</span></span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-11">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb14-12">    <span class="at" style="color: #677623;">rect_color =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb14-13">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower <span class="sc" style="color: #5E5E5E;">~</span> below_highlight,</span>
<span id="cb14-14">      location <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'REGION AVERAGE'</span> <span class="sc" style="color: #5E5E5E;">~</span> average_highlight_col,</span>
<span id="cb14-15">      T <span class="sc" style="color: #5E5E5E;">~</span> no_highlight_col</span>
<span id="cb14-16">    ),</span>
<span id="cb14-17">    <span class="at" style="color: #677623;">rect_alpha =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-18">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-19">      <span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb14-20">      <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb14-21">    ),</span>
<span id="cb14-22">    <span class="at" style="color: #677623;">point_color =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-23">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-24">      below_highlight,</span>
<span id="cb14-25">      <span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb14-26">    ),</span>
<span id="cb14-27">    <span class="at" style="color: #677623;">point_fill =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-28">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-29">      below_highlight,</span>
<span id="cb14-30">      <span class="st" style="color: #20794D;">'white'</span></span>
<span id="cb14-31">    ),</span>
<span id="cb14-32">    <span class="at" style="color: #677623;">point_size =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-33">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-34">      <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb14-35">      <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb14-36">    )</span>
<span id="cb14-37">  )</span>
<span id="cb14-38">sorted_dat</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 24 × 10
   location inventory_turno… store_upper store_lower   num rect_color rect_alpha
   &lt;chr&gt;               &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;           &lt;dbl&gt;
 1 Castle …             14.7        24.3        20      24 #009E73           0.5
 2 Wellsvi…             13.6         7.6         2.5    23 grey70            1  
 3 Basin C…             12.7         8           4.5    22 grey70            1  
 4 Atlantis             12.3        12.8         7.8    21 grey70            1  
 5 Neverla…             12.1        18          13.4    20 #009E73           0.5
 6 Bluffin…             11.7         4.2         3      19 grey70            1  
 7 Bikini …             11.6        12.5         7.8    18 grey70            1  
 8 Metropo…             11.3        24          11.3    17 grey70            1  
 9 Hill Va…             11          22           7.5    16 grey70            1  
10 Venusvi…             10.4        15.5        12.3    15 #009E73           0.5
# … with 14 more rows, and 3 more variables: point_color &lt;chr&gt;,
#   point_fill &lt;chr&gt;, point_size &lt;dbl&gt;</code></pre>
</div>
</div>
<p>Now, we can create our plot. Notice that I set <code>shape = 21</code> in <code>geom_point()</code> to use both the <code>fill</code> and <code>col</code> aesthetic.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb16-1">sorted_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_rect</span>(</span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb16-5">      <span class="at" style="color: #677623;">xmin =</span> store_lower, </span>
<span id="cb16-6">      <span class="at" style="color: #677623;">xmax =</span> store_upper, </span>
<span id="cb16-7">      <span class="at" style="color: #677623;">ymin =</span> num <span class="sc" style="color: #5E5E5E;">-</span> bar_height, </span>
<span id="cb16-8">      <span class="at" style="color: #677623;">ymax =</span> num <span class="sc" style="color: #5E5E5E;">+</span> bar_height, </span>
<span id="cb16-9">      <span class="at" style="color: #677623;">fill =</span> rect_color,</span>
<span id="cb16-10">      <span class="at" style="color: #677623;">alpha =</span> rect_alpha</span>
<span id="cb16-11">    ),</span>
<span id="cb16-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb16-14">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb16-15">      <span class="at" style="color: #677623;">x =</span> inventory_turnover,</span>
<span id="cb16-16">      <span class="at" style="color: #677623;">y =</span> num,</span>
<span id="cb16-17">      <span class="at" style="color: #677623;">fill =</span> point_fill,</span>
<span id="cb16-18">      <span class="at" style="color: #677623;">col =</span> point_color,</span>
<span id="cb16-19">      <span class="at" style="color: #677623;">size =</span> point_size</span>
<span id="cb16-20">    ),</span>
<span id="cb16-21">    <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb16-22">    <span class="at" style="color: #677623;">stroke =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb16-23">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-24">  <span class="fu" style="color: #4758AB;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-25">  <span class="fu" style="color: #4758AB;">scale_color_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-26">  <span class="fu" style="color: #4758AB;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-27">  <span class="fu" style="color: #4758AB;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-28">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="use-ggchicklet-for-rounded-rectangles" class="level3">
<h3 class="anchored" data-anchor-id="use-ggchicklet-for-rounded-rectangles">Use ggchicklet for rounded rectangles</h3>
<p>The whole point of this blog post is to use rounded rectangles. So let’s do that. The <a href="https://github.com/hrbrmstr/ggchicklet">ggchicklet package</a> has a geom called <code>geom_rrect()</code>. It works just like <code>geom_rect()</code> but accepts another value <code>r</code> which is used to determine the radius of the rounded rectangles. Unfortunately, this geom is not an exported function of this package. This means that if you write <code>ggchicklet::</code> (e.g.&nbsp;in RStudio) and press <code>TAB</code> you won’t see <code>geom_rrect()</code>. Thus, you have to access the internal function via <code>:::</code> (three colons).</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">p <span class="ot" style="color: #00769E;">&lt;-</span> sorted_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-3">  ggchicklet<span class="sc" style="color: #5E5E5E;">:::</span><span class="fu" style="color: #4758AB;">geom_rrect</span>(</span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb17-5">      <span class="at" style="color: #677623;">xmin =</span> store_lower, </span>
<span id="cb17-6">      <span class="at" style="color: #677623;">xmax =</span> store_upper, </span>
<span id="cb17-7">      <span class="at" style="color: #677623;">ymin =</span> num <span class="sc" style="color: #5E5E5E;">-</span> bar_height, </span>
<span id="cb17-8">      <span class="at" style="color: #677623;">ymax =</span> num <span class="sc" style="color: #5E5E5E;">+</span> bar_height, </span>
<span id="cb17-9">      <span class="at" style="color: #677623;">fill =</span> rect_color,</span>
<span id="cb17-10">      <span class="at" style="color: #677623;">alpha =</span> rect_alpha</span>
<span id="cb17-11">    ),</span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;"># Use relative npc unit (values between 0 and 1)</span></span>
<span id="cb17-13">    <span class="co" style="color: #5E5E5E;"># This ensures that radius is not too large for your canvas</span></span>
<span id="cb17-14">    <span class="at" style="color: #677623;">r =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">'npc'</span>)</span>
<span id="cb17-15">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-16">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb17-17">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb17-18">      <span class="at" style="color: #677623;">x =</span> inventory_turnover,</span>
<span id="cb17-19">      <span class="at" style="color: #677623;">y =</span> num,</span>
<span id="cb17-20">      <span class="at" style="color: #677623;">fill =</span> point_fill,</span>
<span id="cb17-21">      <span class="at" style="color: #677623;">col =</span> point_color,</span>
<span id="cb17-22">      <span class="at" style="color: #677623;">size =</span> point_size</span>
<span id="cb17-23">    ),</span>
<span id="cb17-24">    <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb17-25">    <span class="at" style="color: #677623;">stroke =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb17-26">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-27">  <span class="fu" style="color: #4758AB;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-28">  <span class="fu" style="color: #4758AB;">scale_color_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-29">  <span class="fu" style="color: #4758AB;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-30">  <span class="fu" style="color: #4758AB;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-31">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb17-32">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="remove-grid-lines-move-axis-and-add-some-text-elements" class="level3">
<h3 class="anchored" data-anchor-id="remove-grid-lines-move-axis-and-add-some-text-elements">Remove grid lines, move axis and add some text elements</h3>
<p>We will set the y-axis labels manually later on. Otherwise, we cannot change its colors one-by-one. For now, let’s get rid of superfluous grid lines, move the x-axis and add a title.</p>
<p>Notice that I draw the axis line manually with a segment annotation. This seems weird, I know. Unfortunately, it cannot be helped because I still need room for the y-axis labels. And if I do not plot the axis line manually, then the axis line will start all the way to the left. Make sure that you set <code>clip = 'off'</code> in <code>coord_cartesian()</code> for the annotation to be displayed.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb18-1">title_lab <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'Review stores with turnover ratios that are below their</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">forecasted range'</span></span>
<span id="cb18-2">title_size <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">14</span></span>
<span id="cb18-3">axis_label_size <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">8</span></span>
<span id="cb18-4">text_size <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">18</span></span>
<span id="cb18-5">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(</span>
<span id="cb18-7">    <span class="at" style="color: #677623;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb18-8">    <span class="at" style="color: #677623;">position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb18-9">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-10">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(</span>
<span id="cb18-11">    <span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">25</span>), </span>
<span id="cb18-12">    <span class="at" style="color: #677623;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.75</span>, <span class="fl" style="color: #AD0000;">24.75</span>),  </span>
<span id="cb18-13">    <span class="at" style="color: #677623;">expand =</span> F,</span>
<span id="cb18-14">    <span class="at" style="color: #677623;">clip =</span> <span class="st" style="color: #20794D;">'off'</span></span>
<span id="cb18-15">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-16">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb18-17">    <span class="st" style="color: #20794D;">'segment'</span>,</span>
<span id="cb18-18">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb18-19">    <span class="at" style="color: #677623;">xend =</span> <span class="dv" style="color: #AD0000;">25</span>,</span>
<span id="cb18-20">    <span class="at" style="color: #677623;">y =</span> <span class="fl" style="color: #AD0000;">24.75</span>,</span>
<span id="cb18-21">    <span class="at" style="color: #677623;">yend =</span> <span class="fl" style="color: #AD0000;">24.75</span>,</span>
<span id="cb18-22">    <span class="at" style="color: #677623;">col =</span> no_highlight_col,</span>
<span id="cb18-23">    <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">0.25</span></span>
<span id="cb18-24">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-25">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb18-26">    <span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'INVENTORY TURNOVER RATIO'</span>,</span>
<span id="cb18-27">    <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb18-28">    <span class="at" style="color: #677623;">title =</span> title_lab</span>
<span id="cb18-29">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-30">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb18-31">    <span class="at" style="color: #677623;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb18-32">      <span class="at" style="color: #677623;">size =</span> text_size,</span>
<span id="cb18-33">      <span class="at" style="color: #677623;">color =</span> average_highlight_col</span>
<span id="cb18-34">    ),</span>
<span id="cb18-35">    <span class="at" style="color: #677623;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb18-36">    <span class="at" style="color: #677623;">panel.grid =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb18-37">    <span class="at" style="color: #677623;">axis.title.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb18-38">      <span class="at" style="color: #677623;">size =</span> axis_label_size,</span>
<span id="cb18-39">      <span class="at" style="color: #677623;">hjust =</span> <span class="fl" style="color: #AD0000;">0.21</span>,</span>
<span id="cb18-40">      <span class="at" style="color: #677623;">color =</span> no_highlight_col</span>
<span id="cb18-41">    ),</span>
<span id="cb18-42">    <span class="at" style="color: #677623;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb18-43">      <span class="at" style="color: #677623;">size =</span> axis_label_size,</span>
<span id="cb18-44">      <span class="at" style="color: #677623;">color =</span> no_highlight_col</span>
<span id="cb18-45">    ),</span>
<span id="cb18-46">    <span class="at" style="color: #677623;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #677623;">color =</span> no_highlight_col, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb18-47">    <span class="at" style="color: #677623;">axis.text.y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb18-48">    <span class="at" style="color: #677623;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()</span>
<span id="cb18-49">  )</span>
<span id="cb18-50">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-y-axis-labels" class="level3">
<h3 class="anchored" data-anchor-id="add-y-axis-labels">Add y-axis labels</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb19-1">y_axis_text_size <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb19-2">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb19-5">      <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb19-6">      <span class="at" style="color: #677623;">y =</span> num,</span>
<span id="cb19-7">      <span class="at" style="color: #677623;">label =</span> location,</span>
<span id="cb19-8">      <span class="at" style="color: #677623;">col =</span> no_highlight_col,</span>
<span id="cb19-9">      <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb19-10">      <span class="at" style="color: #677623;">size =</span> y_axis_text_size</span>
<span id="cb19-11">    )</span>
<span id="cb19-12">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="highlight-words" class="level3">
<h3 class="anchored" data-anchor-id="highlight-words">Highlight words</h3>
<p>Let us turn to text highlights. For that we will need <code>ggtext</code>. This will let us use <code>geom_richtext()</code> instead of <code>geom_text()</code>. Notice that I have note saved the last <code>geom_text()</code> modification in <code>p</code>. Otherwise, we would get two overlapping layers of text. You can highlight single words as demonstrated in my <a href="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html">blog post about effective use of colors</a>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb20-2">sorted_dat_with_new_labels <span class="ot" style="color: #00769E;">&lt;-</span> sorted_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">location_label =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb20-4">    inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower <span class="sc" style="color: #5E5E5E;">~</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb20-5">      <span class="st" style="color: #20794D;">'&lt;span style = "color:{below_highlight}"&gt;**{location}**&lt;/span&gt;'</span></span>
<span id="cb20-6">    ),</span>
<span id="cb20-7">    location <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'REGION AVERAGE'</span> <span class="sc" style="color: #5E5E5E;">~</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb20-8">      <span class="st" style="color: #20794D;">'&lt;span style = "color:{average_highlight_col}"&gt;**{location}**&lt;/span&gt;'</span></span>
<span id="cb20-9">    ),</span>
<span id="cb20-10">    T <span class="sc" style="color: #5E5E5E;">~</span> location</span>
<span id="cb20-11">  ))</span>
<span id="cb20-12"></span>
<span id="cb20-13">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-14">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(</span>
<span id="cb20-15">    <span class="at" style="color: #677623;">data =</span> sorted_dat_with_new_labels,</span>
<span id="cb20-16">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb20-17">      <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb20-18">      <span class="at" style="color: #677623;">y =</span> num,</span>
<span id="cb20-19">      <span class="at" style="color: #677623;">label =</span> location_label,</span>
<span id="cb20-20">      <span class="at" style="color: #677623;">col =</span> no_highlight_col,</span>
<span id="cb20-21">      <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb20-22">      <span class="at" style="color: #677623;">size =</span> y_axis_text_size</span>
<span id="cb20-23">    ),</span>
<span id="cb20-24">    <span class="at" style="color: #677623;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>,</span>
<span id="cb20-25">    <span class="at" style="color: #677623;">fill =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb20-26">  )</span>
<span id="cb20-27">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Fantastic! Next, we only have to highlight words in our call to action. Make sure that <code>plot.title</code> in <code>theme()</code> is an <code>element_markdown()</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb21-1">title_lab_adjusted <span class="ot" style="color: #00769E;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb21-2">  <span class="st" style="color: #20794D;">"Review stores with **turnover ratios** that are &lt;span style = 'color:{below_highlight}'&gt;below their&lt;/span&gt;&lt;br&gt;&lt;span style = 'color:#7fceb9;'&gt;**forecasted range**&lt;/span&gt;"</span></span>
<span id="cb21-3">)</span>
<span id="cb21-4"></span>
<span id="cb21-5">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">title =</span> title_lab_adjusted) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-7">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb21-8">    <span class="at" style="color: #677623;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(),</span>
<span id="cb21-9">    <span class="at" style="color: #677623;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #677623;">color =</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb21-10">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>There you go. This concludes the easy way to draw rounded rectangles with <code>ggplot2</code> and <code>ggchicklet</code>. Now, I am well aware that this is probably the moment when many readers will drop out. So, let me do some shameless self-promotion before everyone’s gone.</p>
<p>If you enjoyed this post, follow me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribe to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. For reaching out to me, feel free to hit the comments or send me a mail. I am always happy to see people commenting on my work.</p>
</section>
</section>
<section id="rounded-rectangles-with-grobs" class="level2">
<h2 class="anchored" data-anchor-id="rounded-rectangles-with-grobs">Rounded rectangles with grobs</h2>
<p>Alright, this is where the hacking begins. In this last part of the blog post, I will show you to how transform rectangles to rounded rectangles. In principle, you could then create our SWD plot using <code>geom_rect()</code> and transform the rectangles afterwards. No additional package needed.</p>
<section id="simple-example-with-one-bar" class="level3">
<h3 class="anchored" data-anchor-id="simple-example-with-one-bar">Simple example with one bar</h3>
<p>Let me demonstrate a quick hack when there is only one bar in the plot. Unfortunately, this does not work with more than one bar. Still, this should get you acquainted with grobs. First, create a simple dummy plot.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb22-2">p <span class="ot" style="color: #00769E;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2008</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(year)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb22-7">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Next, we can turn this plot into a so-called <code>TableGrob</code>. From what I understand, it is a highly nested list that contains all the graphical objects (grobs) that are part of our plot <code>p</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb23-1">l <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplotGrob</span>(p)</span>
<span id="cb23-2">l</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>TableGrob (12 x 9) "layout": 18 grobs
    z         cells       name                                          grob
1   0 ( 1-12, 1- 9) background       zeroGrob[plot.background..zeroGrob.831]
2   5 ( 6- 6, 4- 4)     spacer                                zeroGrob[NULL]
3   7 ( 7- 7, 4- 4)     axis-l           absoluteGrob[GRID.absoluteGrob.820]
4   3 ( 8- 8, 4- 4)     spacer                                zeroGrob[NULL]
5   6 ( 6- 6, 5- 5)     axis-t                                zeroGrob[NULL]
6   1 ( 7- 7, 5- 5)      panel                      gTree[panel-1.gTree.814]
7   9 ( 8- 8, 5- 5)     axis-b           absoluteGrob[GRID.absoluteGrob.817]
8   4 ( 6- 6, 6- 6)     spacer                                zeroGrob[NULL]
9   8 ( 7- 7, 6- 6)     axis-r                                zeroGrob[NULL]
10  2 ( 8- 8, 6- 6)     spacer                                zeroGrob[NULL]
11 10 ( 5- 5, 5- 5)     xlab-t                                zeroGrob[NULL]
12 11 ( 9- 9, 5- 5)     xlab-b titleGrob[axis.title.x.bottom..titleGrob.823]
13 12 ( 7- 7, 3- 3)     ylab-l   titleGrob[axis.title.y.left..titleGrob.826]
14 13 ( 7- 7, 7- 7)     ylab-r                                zeroGrob[NULL]
15 14 ( 4- 4, 5- 5)   subtitle         zeroGrob[plot.subtitle..zeroGrob.828]
16 15 ( 3- 3, 5- 5)      title            zeroGrob[plot.title..zeroGrob.827]
17 16 (10-10, 5- 5)    caption          zeroGrob[plot.caption..zeroGrob.830]
18 17 ( 2- 2, 2- 2)        tag              zeroGrob[plot.tag..zeroGrob.829]</code></pre>
</div>
</div>
<p>In this case, calling <code>l</code> gave us an overview of plot parts. We will want to change stuff in the panel. Thus, let us extract the grobs from the sixth list entry of <code>l</code>. As we have seen in the table, this will give us a <code>gTree</code>. That’s another nested list. And it contains an interesting sublist called <code>children</code>. That’s where the grobs of this <code>gTree</code> are stored.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb25-1">grobs <span class="ot" style="color: #00769E;">&lt;-</span> l<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]]</span>
<span id="cb25-2">grobs<span class="sc" style="color: #5E5E5E;">$</span>children</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>(gTree[grill.gTree.812], zeroGrob[NULL], rect[geom_rect.rect.800], zeroGrob[NULL], zeroGrob[panel.border..zeroGrob.801]) </code></pre>
</div>
</div>
<p>Here, the <code>rect</code> grob is what we want to access. Thus, let us take a look what we can find there.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># str() helps us to unmask the complicated list structure</span></span>
<span id="cb27-2">grobs<span class="sc" style="color: #5E5E5E;">$</span>children[[<span class="dv" style="color: #AD0000;">3</span>]] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str</span>()</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>List of 10
 $ x     : 'simpleUnit' num 0.0455native
  ..- attr(*, "unit")= int 4
 $ y     : 'simpleUnit' num 0.955native
  ..- attr(*, "unit")= int 4
 $ width : 'simpleUnit' num 0.909native
  ..- attr(*, "unit")= int 4
 $ height: 'simpleUnit' num 0.909native
  ..- attr(*, "unit")= int 4
 $ just  : chr [1:2] "left" "top"
 $ hjust : NULL
 $ vjust : NULL
 $ name  : chr "geom_rect.rect.800"
 $ gp    :List of 6
  ..$ col     : logi NA
  ..$ fill    : chr "#595959FF"
  ..$ lwd     : num 1.42
  ..$ lty     : num 1
  ..$ linejoin: chr "mitre"
  ..$ lineend : chr "square"
  ..- attr(*, "class")= chr "gpar"
 $ vp    : NULL
 - attr(*, "class")= chr [1:3] "rect" "grob" "gDesc"</code></pre>
</div>
</div>
<p>This is a grob. It can be build using <code>grid::rectGrob()</code>. Basically, what you see here is a specification of everything from <code>x</code> and <code>y</code> position to graphical properties (<code>gp</code>) of this rectangular grob.</p>
<p>There is also a function <code>grid::roundrectGrob()</code>. As you may have guessed, it builds the rounded rectangle grobs that we so desperately crave. From <code>grid::roundrectGrob()</code>’s documentation, we know that we will have to specify another variable <code>r</code> to determine the radius of the rounded rectangles. So, here’s what we could do now.</p>
<ol type="1">
<li>Extract <code>x</code>, <code>y</code>, <code>gp</code> and so on from <code>grobs$children[[3]]</code>.</li>
<li>Add another argument <code>r</code>.</li>
<li>Pass all of these arguments to <code>grid::roundrectGrob()</code></li>
<li>Exchange <code>grobs$children[[3]]</code> with our newly built <code>roundrectGrob</code></li>
</ol>
<p>This is what we will have to do at some point. But in this simple plot, I want to show you a different hack. Did you notice the <code>class</code> <a href="https://adv-r.hadley.nz/vectors-chap.html#attributes">attributes</a> of <code>grobs$children[[3]]</code>? Somewhere in there it says <code>- attr(*, "class")= chr [1:3] "rect" "grob" "gDesc"</code>. And we can access and change that information through <code>attr()</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">attr</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">'class'</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] "rect"  "grob"  "gDesc"</code></pre>
</div>
</div>
<p>Now, a really basic hack is to</p>
<ol type="1">
<li>change the class attribute from <code>rect</code> to <code>roundrect</code>.</li>
<li>stick another argument <code>r</code> into the list</li>
<li>put everything back together as if nothing happened</li>
</ol>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Change class attribute of grobs$children[3][[1]] from rect to roundrect</span></span>
<span id="cb31-2">current_attr <span class="ot" style="color: #00769E;">&lt;-</span>  <span class="fu" style="color: #4758AB;">attr</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">'class'</span>)</span>
<span id="cb31-3">new_attr <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_replace</span>(current_attr, <span class="st" style="color: #20794D;">'rect'</span>, <span class="st" style="color: #20794D;">'roundrect'</span>)</span>
<span id="cb31-4"><span class="fu" style="color: #4758AB;">attr</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">'class'</span>) <span class="ot" style="color: #00769E;">&lt;-</span> new_attr</span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;"># Add r argument for grid::roundrectGrob()</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;"># We need to add a "unit"</span></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;"># Here I use the relative unit npc</span></span>
<span id="cb31-9">grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]]<span class="sc" style="color: #5E5E5E;">$</span>r <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">'npc'</span>)</span>
<span id="cb31-10"></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;"># Copy original list and change grobs in place</span></span>
<span id="cb31-12">l_new <span class="ot" style="color: #00769E;">&lt;-</span> l</span>
<span id="cb31-13">l_new<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]] <span class="ot" style="color: #00769E;">&lt;-</span> grobs</span>
<span id="cb31-14"></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;"># Draw grobs via grid::grid.draw()</span></span>
<span id="cb31-16">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.newpage</span>()</span>
<span id="cb31-17">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.draw</span>(l_new)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="dealing-with-multiple-bars" class="level3">
<h3 class="anchored" data-anchor-id="dealing-with-multiple-bars">Dealing with multiple bars</h3>
<p>The previous hack works if we plot only one bar. However, if there are multiple <code>x</code> arguments, then <code>grid::roundrectGrob()</code> will error. It seems like that function is not vectorized. So, we will build the rounded rectangles ourselves with functional programming. First let’s take a look at the plot that we want to modify.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb32-1">p <span class="ot" style="color: #00769E;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(class, <span class="at" style="color: #677623;">fill =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb32-5">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now, let’s find out what arguments <code>grid::roundrectGrob()</code> accepts and extract as many of these from <code>grobs$children[3]</code> as possible.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb33-1">l <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplotGrob</span>(p)</span>
<span id="cb33-2">grobs <span class="ot" style="color: #00769E;">&lt;-</span> l<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]]</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;"># What arguments does roundrectGrob need?</span></span>
<span id="cb33-5">arg_names <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">args</span>(grid<span class="sc" style="color: #5E5E5E;">::</span>roundrectGrob) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.list</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">names</span>()</span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;"># Somehow last one is NULL</span></span>
<span id="cb33-7">arg_names <span class="ot" style="color: #00769E;">&lt;-</span> arg_names[<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">length</span>(arg_names)]</span>
<span id="cb33-8">arg_names</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code> [1] "x"             "y"             "width"         "height"       
 [5] "default.units" "r"             "just"          "name"         
 [9] "gp"            "vp"           </code></pre>
</div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Extract the arguments roundrectGrob needs from grobs$children[3]</span></span>
<span id="cb35-2">extracted_args <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">map</span>(arg_names, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">pluck</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>], <span class="dv" style="color: #AD0000;">1</span>, .)) </span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;">names</span>(extracted_args) <span class="ot" style="color: #00769E;">&lt;-</span> arg_names</span>
<span id="cb35-4">extracted_args <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str</span>()</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>List of 10
 $ x            : 'simpleUnit' num [1:7] 0.0208native 0.16native 0.299native 0.438native 0.576native ...
  ..- attr(*, "unit")= int 4
 $ y            : 'simpleUnit' num [1:7] 0.119native 0.735native 0.647native 0.207native 0.529native ...
  ..- attr(*, "unit")= int 4
 $ width        : 'simpleUnit' num [1:7] 0.125native 0.125native 0.125native 0.125native 0.125native 0.125native 0.125native
  ..- attr(*, "unit")= int 4
 $ height       : 'simpleUnit' num [1:7] 0.0733native 0.689native 0.601native 0.161native 0.484native ...
  ..- attr(*, "unit")= int 4
 $ default.units: NULL
 $ r            : NULL
 $ just         : chr [1:2] "left" "top"
 $ name         : chr "geom_rect.rect.911"
 $ gp           :List of 6
  ..$ col     : logi [1:7] NA NA NA NA NA NA ...
  ..$ fill    : chr [1:7] "#F8766D" "#C49A00" "#53B400" "#00C094" ...
  ..$ lwd     : num [1:7] 1.42 1.42 1.42 1.42 1.42 ...
  ..$ lty     : num [1:7] 1 1 1 1 1 1 1
  ..$ linejoin: chr "mitre"
  ..$ lineend : chr "square"
  ..- attr(*, "class")= chr "gpar"
 $ vp           : NULL</code></pre>
</div>
</div>
<p>As you can can see, in our vector <code>extracted_args</code> the components <code>x</code>, <code>y</code> and so on are vectors of length 7 (since we have 7 bars in <code>p</code>). As I said before, this works because it is a <code>rectGrob</code>. But, with a <code>roundrectGrob</code> this would cause errors.</p>
<p>Next, let us make sure that we know how many rectangles we need to change. Also, we will need to specify the radius <code>r</code>, and the graphical parameters <code>gp</code> should always have the same amount of arguments.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## How many rectangles are there?</span></span>
<span id="cb37-2">n_rects <span class="ot" style="color: #00769E;">&lt;-</span> extracted_args<span class="sc" style="color: #5E5E5E;">$</span>x <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">length</span>()</span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Add radius r</span></span>
<span id="cb37-5">extracted_args<span class="sc" style="color: #5E5E5E;">$</span>r <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="fl" style="color: #AD0000;">0.25</span>, n_rects), <span class="st" style="color: #20794D;">'npc'</span>)</span>
<span id="cb37-6"></span>
<span id="cb37-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Make sure that all list components in gp have equally many values</span></span>
<span id="cb37-8">extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>linejoin <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>linejoin, n_rects)</span>
<span id="cb37-9">extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>lineend <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>lineend, n_rects)</span></code></pre></div>
</div>
<p>Now comes the tedious part. We have to split up <code>extracted_args</code> into multiple nested lists. Unfortunately, the <code>purrr</code> package does not provide a function that works the way we want. That’s because we need many custom steps here. For instance, for the columns <code>x</code> and <code>y</code> we have to always extract a single value out of <code>extracted_args</code>. But with the columns <code>just</code> and <code>name</code> we need to extract the whole vector. Also, we have to adjust the names to ensure that they are unique.</p>
<p>In this blog post, we will get the tedious stuff out of the way with the following helper functions. Feel free to ignore them, if you only care about the general idea.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Write function that does splitting for each rectangle</span></span>
<span id="cb38-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Found no suitable purrr function that works in my case</span></span>
<span id="cb38-3">extract_value <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(list, arg, rect) {</span>
<span id="cb38-4">  x <span class="ot" style="color: #00769E;">&lt;-</span> list[[arg]]</span>
<span id="cb38-5">  <span class="co" style="color: #5E5E5E;"># name and just need do be treated different</span></span>
<span id="cb38-6">  <span class="co" style="color: #5E5E5E;"># In all cases just pick the i-th entry of list[[arg]]</span></span>
<span id="cb38-7">  <span class="cf" style="color: #00769E;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span>(arg <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'name'</span>, <span class="st" style="color: #20794D;">'just'</span>))) <span class="fu" style="color: #4758AB;">return</span>(x[rect])</span>
<span id="cb38-8">  </span>
<span id="cb38-9">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## There is only one name, so extract that and modify id</span></span>
<span id="cb38-10">  <span class="cf" style="color: #00769E;">if</span> (arg <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'name'</span>) {</span>
<span id="cb38-11">    <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">paste0</span>(x,  rect))</span>
<span id="cb38-12">  }</span>
<span id="cb38-13">  </span>
<span id="cb38-14">  <span class="co" style="color: #5E5E5E;"># 'just' is two part vector and should always be the same</span></span>
<span id="cb38-15">  <span class="cf" style="color: #00769E;">if</span> (arg <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'just'</span>) <span class="fu" style="color: #4758AB;">return</span>(x)</span>
<span id="cb38-16">}</span>
<span id="cb38-17"></span>
<span id="cb38-18">split_my_list <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(list, n_rects) {</span>
<span id="cb38-19">  combinations <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb38-20">    <span class="at" style="color: #677623;">rect =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_rects,</span>
<span id="cb38-21">    <span class="at" style="color: #677623;">arg =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">names</span>(list))</span>
<span id="cb38-22">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-23">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #677623;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(arg)) </span>
<span id="cb38-24">  </span>
<span id="cb38-25">  flattened_list <span class="ot" style="color: #00769E;">&lt;-</span> combinations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-26">    <span class="fu" style="color: #4758AB;">pmap</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">extract_value</span>(list, ..<span class="dv" style="color: #AD0000;">2</span>, ..<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb38-27">  </span>
<span id="cb38-28">  <span class="fu" style="color: #4758AB;">names</span>(flattened_list) <span class="ot" style="color: #00769E;">&lt;-</span> combinations<span class="sc" style="color: #5E5E5E;">$</span>arg</span>
<span id="cb38-29">  <span class="fu" style="color: #4758AB;">split</span>(flattened_list, combinations<span class="sc" style="color: #5E5E5E;">$</span>rect)</span>
<span id="cb38-30">}</span></code></pre></div>
</div>
<p>Finally, we can split <code>extracted_args</code> into sub-lists. Each of these is then used to call <code>grid::roundrectGrob()</code> with <code>do.call()</code>. Then, we have to replace the same part in our list <code>grobs</code> as we did before. However, since we have multiple grobs now that need to be put into a single location. Therefore, we have to bundle the grobs into one object. This is done via <code>grid::grobTree()</code> and <code>do.call()</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb39-1">list_of_arglists <span class="ot" style="color: #00769E;">&lt;-</span>  <span class="fu" style="color: #4758AB;">split_my_list</span>(extracted_args, n_rects)</span>
<span id="cb39-2">list_of_grobs <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">map</span>(list_of_arglists, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">do.call</span>(grid<span class="sc" style="color: #5E5E5E;">::</span>roundrectGrob, .)) </span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;"># Build new list of grobs by replacing one part in old list</span></span>
<span id="cb39-5">grobs_new <span class="ot" style="color: #00769E;">&lt;-</span> grobs</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;"># save one list argument into children[3]</span></span>
<span id="cb39-8">grobs_new<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>] <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(grid<span class="sc" style="color: #5E5E5E;">::</span>grobTree, list_of_grobs) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb39-9">l_new <span class="ot" style="color: #00769E;">&lt;-</span> l</span>
<span id="cb39-10">l_new<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]] <span class="ot" style="color: #00769E;">&lt;-</span> grobs_new</span>
<span id="cb39-11"></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;"># Draw Plot</span></span>
<span id="cb39-13">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.newpage</span>()</span>
<span id="cb39-14">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.draw</span>(l_new)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Woooow! Marvel at our glorious rounded rectangles! Thanks to our excellent programming skills we made it through the grob jungle. In practice, it is probably easier to use <code>geom_chicklet()</code>. But still, this was a somewhat fun exercise and helped to demystify grobs (at least to some extend).</p>
<p>That’s it for today. If you’ve made it this far, then you already know that you should follow me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribe to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. So, I expect you to be here next time. There’s no way out anymore. So long!</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html</guid>
  <pubDate>Wed, 04 May 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>6 Lessons that I learned from teaching R to non-programmers</title>
  <link>https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers.html</link>
  <description><![CDATA[ 


<p>Last week, I gave a short workshop teaching R to Economics students without prior programming experience. <a href="https://twitter.com/rappa753/status/1516497080201904129">On Twitter</a>, I shared six lessons that I wish I had learnt before. This blog post is a more detailed account of my experience. Additionally, I incorporated many excellent suggestions from others on Twitter into this blog post.</p>
<section id="do-less" class="level2">
<h2 class="anchored" data-anchor-id="do-less">Do less</h2>
<p>The first and most important lesson is that I have to plan to do less. This is probably the trickiest part for me. Usually, I like to create an ambitious curriculum for my students. For example, in my semester-long <a href="https://yards.albert-rapp.de/">YARDS course</a> for mathematicians, I introduce many topics like</p>
<ul>
<li>data viz and wrangling with <code>ggplot2</code> and <code>dplyr</code>,</li>
<li>if-conditions and for-loops (yes, I think everyone should be familiar with for-loops),</li>
<li>model building with <code>tidymodels</code>,</li>
<li>functional programming with <code>purrr</code>,</li>
<li>creating and sharing content with <code>Rmarkdown</code> and</li>
<li>interactive web apps with <code>shiny</code>.</li>
</ul>
<p>In that course, students already came with at least a basic understanding of programming. Most of the time, I only had to lay out a few code examples. Then, I quickly made students work on assignments. As students already knew how to read code and debug, they knew how to get themselves unstuck. This was nice as it enabled my ambitious curriculum. Though, I never fully appreciated how much easier this made teaching.</p>
<section id="scaling-down-for-the-workshop" class="level3">
<h3 class="anchored" data-anchor-id="scaling-down-for-the-workshop">Scaling down for the workshop</h3>
<p>Of course, I knew that I needed to scale down in a 4x3h workshop. And I thought I did that. But I was in for a surprise because there was a crucial issue:</p>
<blockquote class="blockquote">
<p>Things that are obvious to someone with programming experience are not obvious to non-programmers at all.</p>
</blockquote>
<p>Let’s go through an example. Imagine students already had seen the following fictitious code chunks.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">filter</span>(dat, year <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1995</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> dat) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">y =</span> y))</span></code></pre></div>
</div>
<p>In one exercise, the students were supposed to plot not the whole data set <code>dat</code> but a filtered version of it. So, I thought that - having seen the code chunks and heard explanations - students would “intuitively” know to combine the chunks like so</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat, year <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1994</span>)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">y =</span> y))</span></code></pre></div>
</div>
<p>But this was not the case. Students were so unfamiliar with code that they were hesitant to “stick together” the two building blocks. Unfortunately, I did not anticipate this. And without any programming experience, students will get stuck in even more unexpected places. Therefore, be sure to have time for detours. And the only way I see how that’s possible is to plan to do less.</p>
</section>
</section>
<section id="teach-through-typing" class="level2">
<h2 class="anchored" data-anchor-id="teach-through-typing">Teach through typing</h2>
<p>So, providing students with building blocks was not enough. At least in their learning stage it wasn’t. Students were just too unfamiliar with code. Fortunately, it turns out that it does not take a huge effort to familiarize students with code. Think: What’s the fastest way to learn to write code? Well, write a lot of code.</p>
<p>And that’s exactly what I tried with them. Instead of doing demos where only I typed code, I made students type along. And I know this sounds silly. But to my surprise, it helped. It helped a lot!</p>
<p>In the end, students had the same building block as if I had done the demo alone. Yet, students were more willing to experiment with the code they have written themselves. In my book, that’s a huge step on anyone’s programming journey.</p>
<section id="make-time-for-typing" class="level3">
<h3 class="anchored" data-anchor-id="make-time-for-typing">Make time for typing</h3>
<p>On Twitter, <a href="https://twitter.com/kotton_king/status/1516540525050056705">Trader Vix</a> disagreed with this typing along approach. It is a fair point to say that not everyone can type “sufficiently” fast. Subsequently, some students may fall behind. In this case, I argued that even more students struggled without this typing approach. This way though, students were not falling behind. Instead, they didn’t know how to get started.</p>
<p>Of course, you will have to make time for students to type. Once again: Plan to do less as students will be slower than you are. Also, make sure to ask students if they can execute the code. This can even have additional benefits. In one case, the students couldn’t execute the code we typed. From their description, I could tell that they forgot quotes as in <code>x == 'text'</code>. Thus, typing together can also generate teachable moments.</p>
</section>
</section>
<section id="start-with-ggplot" class="level2">
<h2 class="anchored" data-anchor-id="start-with-ggplot">Start with ggplot</h2>
<p>Some say vector manipulation should be the first thing to teach. I didn’t and this was one of the few things I wouldn’t change. My non-statistically inclined students seemed to find visual results more engaging than number/vector crunching. And once students can create graphics, the nice thing is that you can always refer back to that for motivation. Let me elaborate.</p>
<p>Shockingly, data wrangling does not have value in itself. I know that as mathematicians/statisticians/number crunchers it is hard to imagine that. However, incorporating a calculated value in a visualizations can generate insights. And many people find that more valuable. Take a look at two examples that use this idea. Both consider the <code>ames</code> data from <code>{modeldata}</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">data</span>(ames, <span class="at" style="color: #677623;">package =</span> <span class="st" style="color: #20794D;">'modeldata'</span>)</span>
<span id="cb4-3">dat <span class="ot" style="color: #00769E;">&lt;-</span> ames <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">select</span>(lot_area, sale_price, neighborhood)</span>
<span id="cb4-6">dat</span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## # A tibble: 2,930 × 3</span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">##    lot_area sale_price neighborhood</span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
font-style: italic;">##       &lt;int&gt;      &lt;int&gt; &lt;fct&gt;       </span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  1    31770     215000 North_Ames  </span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  2    11622     105000 North_Ames  </span></span>
<span id="cb4-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  3    14267     172000 North_Ames  </span></span>
<span id="cb4-13"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  4    11160     244000 North_Ames  </span></span>
<span id="cb4-14"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  5    13830     189900 Gilbert     </span></span>
<span id="cb4-15"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  6     9978     195500 Gilbert     </span></span>
<span id="cb4-16"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  7     4920     213500 Stone_Brook </span></span>
<span id="cb4-17"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  8     5005     191500 Stone_Brook </span></span>
<span id="cb4-18"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  9     5389     236500 Stone_Brook </span></span>
<span id="cb4-19"><span class="do" style="color: #5E5E5E;
font-style: italic;">## 10     7500     189000 Gilbert     </span></span>
<span id="cb4-20"><span class="do" style="color: #5E5E5E;
font-style: italic;">## # … with 2,920 more rows</span></span></code></pre></div>
</div>
<section id="slice-for-highlighting" class="level3">
<h3 class="anchored" data-anchor-id="slice-for-highlighting">Slice for highlighting</h3>
<p>Why would you want to extract specific rows from a data set? Here, we use it to highlight specific houses.</p>
<p>How do we do that? We extract the rows and throw that into another point layer.</p>
<p>Now, come up with an artificial story why house 1, 5, 7 and 10 may be important. Bam! You now have a visual motivation for why slicing data is a neat technique to master.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;">aes</span>(lot_area, sale_price)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'grey80'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">slice</span>(dat, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'red'</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="summaries-for-context" class="level3">
<h3 class="anchored" data-anchor-id="summaries-for-context">Summaries for context</h3>
<p>The same can be done to motivate vector calculations. Why is it good to extract a vector and compute its median? To put your other data into context. Let’s try that out for the sale prices in <code>dat</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="ot" style="color: #00769E;">&lt;-</span> dat<span class="sc" style="color: #5E5E5E;">$</span>sale_price</span>
<span id="cb6-2">med <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">median</span>(x)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.25</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> med, <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'red'</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'Sale price'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>For a more elaborate case, you can do the same for each neighborhood.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">summaries <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">group_by</span>(neighborhood) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #677623;">med =</span> <span class="fu" style="color: #4758AB;">median</span>(sale_price))</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> sale_price, <span class="at" style="color: #677623;">y =</span> neighborhood)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">data =</span> summaries, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> med), <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'red'</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="is-ggplot-too-hard" class="level2">
<h2 class="anchored" data-anchor-id="is-ggplot-too-hard">Is ggplot too hard?</h2>
<p>So, why didn’t I use the <code>plot()</code> function instead of ggplot? That’s because most people (including myself) would agree that ggplot’s defaults are visually more pleasing. But the more pressing question is: Was ggplot too hard for the students? Let’s take a step back on this one.</p>
<section id="every-new-syntax-is-confusing" class="level3">
<h3 class="anchored" data-anchor-id="every-new-syntax-is-confusing">Every new syntax is confusing</h3>
<p>Take a look at the following quote.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
When teaching, be careful not to mix up "I learned this a long time ago" with "This is simple"<a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a>
</p>
— David Robinson (<span class="citation" data-cites="drob">@drob</span>) <a href="https://twitter.com/drob/status/722806375005302785?ref_src=twsrc%5Etfw">April 20, 2016</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>In the same spirit, let me say:</p>
<blockquote class="blockquote">
<p>When teaching, be careful not to mix up “I learned this only fairly recently” with “This is pretty advanced stuff and better not taught early on”.</p>
</blockquote>
<p>Personally, I have encountered ggplot and the tidyverse only late in my programming game. Therefore, I have refrained from teaching it to students for some time. Honestly though, this was also due to my own lack of wanting to learn new “complicated” syntax. As David Robinson states in his insightful <a href="http://varianceexplained.org/r/teach-tidyverse/">“Teach the tidyverse to beginners”</a> essay:</p>
<p><em>“…all programming syntax is confusing for non-programmers.”</em></p>
<p>In my case, I was not a non-programmer. But ggplot has its own ecosystem with its own syntax. Thus, it is easy to say that ggplot is way too hard for beginners. But the truth is:</p>
<blockquote class="blockquote">
<p>Every syntax is confusing to the uninitiated.</p>
</blockquote>
</section>
<section id="so-did-students-cope-with-ggplot-or-not" class="level3">
<h3 class="anchored" data-anchor-id="so-did-students-cope-with-ggplot-or-not">So, did students cope with ggplot or not?</h3>
<p>Coming back to my students, this long-winded detour explains why they did surprisingly well with ggplot. Sure, the intricacies of <code>aes()</code> are probably not fully understood after this workshop. But having no prior experience in programming whatsoever, they were surprisingly willing to accept that <code>aes()</code> is just a necessary fact of <del>life</del> ggplot.</p>
<p>As a mathematician, I like to compare this to integral notation $ \int_0^1 f(x)\, \mathrm{d}x $. In high school, I did not fully grasp the meaning of $ \mathrm{d}x $. But I accepted its presence and treated it like a delimiter for what’s inside and outside the integral. Clearly, this is far from understanding the meaning of this notation. Yet, it enabled me to do what I needed to do.</p>
<p>Overall, students would sometimes forget to put e.g.&nbsp;<code>col =</code> into the correct place. For most parts, though, the students accepted the syntax just the way it is and understood that within <code>aes()</code> we refer to the columns in <code>data</code>. And what may sound even more surprising:</p>
<p><em>Students fared better with <code>ggplot()</code> than with other functions like <code>filter()</code>, <code>slice()</code> or <code>mutate()</code>.</em></p>
<p>I suspect that is because ggplot is its own ecosystem and each plot follows the same template. But <code>filter()</code>, <code>slice()</code> and <code>mutate()</code> each work differently. One wants a conditional statement, one wants row indices and one wants a new column name plus its “formula”.</p>
</section>
</section>
<section id="stress-to-save-variables-before-using-them" class="level2">
<h2 class="anchored" data-anchor-id="stress-to-save-variables-before-using-them">Stress to save variables before using them</h2>
<p>This was another surprising moments for me. Apparently, if you have never programmed, it is not obvious to save results. Therefore, make sure that students understand that calculations can only be used later if they are saved into a variable. But this variable-saving line has to be executed for the actual saving to happen. Often, students would have a code chunk like this</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">dat <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">filter</span>(ames, Sale_Price <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">200000</span>)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> dat) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> Lot_Area, Sale_Price))</span></code></pre></div>
</div>
<p>But then, they would only execute the second line. More often than not, there was no previous <code>dat</code> variable in the environment and students would get an error. This was confusing because the <code>dat &lt;-</code> line is right there. Of course, that does not mean the line was executed. Unfortunately, you will likely have to mention this multiple times before it sticks.</p>
</section>
<section id="teach-named-functions" class="level2">
<h2 class="anchored" data-anchor-id="teach-named-functions">Teach named functions</h2>
<p>The symbols<code>$</code>, <code>[</code> and <code>]</code> all have their rightful place in R. However, students unanimously found using memorable function names like <code>pull()</code> or <code>select()</code> easier to learn. But remember: Do less. I tried to show students multiple ways to get a job done using e.g.&nbsp;<code>$</code> or <code>pull()</code>. This only caused confusion. So, use only one approach.</p>
<p>Though, in this specific case I would likely go with <code>$</code> instead of <code>pull()</code>. Of course, <code>pull()</code> is nice but chances are that students will encounter <code>$</code> at some point. Thus, see this as an investment into enabling students to read more code. For the same reason, <a href="https://twitter.com/nikita_telkar/status/1516726552213426181">Nikita Telkar suggested</a> to teach the full name notation, e.g.&nbsp;<code>dplyr::select()</code>.</p>
<p>Personally, I would not use full names all the time though. But one particular use case comes to mind. After experiencing a few errors due to not using capital letters in column names, the students were more than willing to use <code>clean_names()</code> from <a href="https://albert-rapp.de/posts/07_janitor_showcase/07_janitor_showcase.html">{janitor}</a>. So, <code>janitor::clean_names()</code> may be a good showcase for the full name notation.</p>
</section>
<section id="use-pipes" class="level2">
<h2 class="anchored" data-anchor-id="use-pipes">Use pipes</h2>
<p>As mentioned, saving variables felt foreign to students at first. The same was true for nesting functions. Consequently, two step processes like selecting and filtering were hard. Here, pipes helped.</p>
<p>Though I’ve had Math students complain that pipes feel wrong, for the Economics students it was just the right thing. In fact, the pipe often mimicked what students wanted to do anyway. Frequently, students knew that they want to e.g.&nbsp;filter data. So they typed <code>filter(year &gt; 1999)</code>. Of course, this misses the data. It seems like students were so caught up in what they wanted to <strong>do</strong> that they forgot to tell R what data to use. But chaining multiple function calls circumvented that (modulo at the beginning of the chain).</p>
<p>Additionally, let me mention that there were great contributions on Twitter by <a href="https://twitter.com/dtoher/status/1516501635706597381">Deidre Toher</a> and <a href="https://twitter.com/ludictech/status/1516523771573776395">Fran Barton</a>. Deidre Toher suggested reading pipes as ‘then’ and Fran Barton pronounced conditions like <code>x[x &gt; 5]</code> as ‘such that’. This kind of reading code aloud, could go a long way to make code feel more natural for beginners.</p>
</section>
<section id="other-reactions" class="level2">
<h2 class="anchored" data-anchor-id="other-reactions">Other reactions</h2>
<p>These were my six lessons. All of them were enhanced by a lot of great suggestions from Twitter. But not all suggestions fit into the previous text. So, let me mention a few more contributors.</p>
<section id="tidyverseskeptic" class="level3">
<h3 class="anchored" data-anchor-id="tidyverseskeptic">TidyverseSkeptic</h3>
<p>I don’t want to give the impression that I filtered out “negative” comments. So, let me point out that <a href="https://twitter.com/matloff/status/1516531433539399681">Prof.&nbsp;Norm Matloff</a> chimed in and advocated against using pipes. For his elaborate reasons see the <a href="https://github.com/matloff/TidyverseSkeptic">TidyverseSkeptic essay</a>. That being said, I do not agree with many statements in his tweet or his essay (though I agree that for-loops should not be a reason to feel ashamed).</p>
<p>Having gotten this off my chest, I really do not want to comment more on the artificial fight between base-R and the tidyverse. To me, a lot of this dispute feels like a <strong>highly subjective</strong> back-and-forth between both sides anyway. I do like parts of both worlds and I don’t want to throw my own subjective two cents into the mix.</p>
</section>
<section id="miscellaneous-tips" class="level3">
<h3 class="anchored" data-anchor-id="miscellaneous-tips">Miscellaneous tips</h3>
<p>So, let me close this post on a lighter note with the remaining contributions.</p>
<ul>
<li><p><a href="https://twitter.com/remington_moll/status/1516764933601460224">Remington Moll</a> suggested to use data sets that students care about. This could encompass letting students choose a data set from five prepared data sets. Of course, this could potentially take up a huge amount of preparation time. But maybe skimming a few data sets in advance could be enough for demos.</p></li>
<li><p><a href="https://twitter.com/FadelMegahed/status/1516784428109901826">Fadel Megahed</a> shared some of his own course material. In his slides, he uses timers and I like the idea. This way, in-class time management may become easier. I always struggle with sticking to the allotted time during a set of exercises.</p></li>
<li><p><a href="https://twitter.com/rmflight/status/1516763348343398406">Dr.&nbsp;Robert M Flight</a> shared the datacarpentry lessons. I have only skimmed them but I’ve heard people praise these lessons multiple times already.</p></li>
</ul>
</section>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>This concludes my blog post. Thanks to everyone on Twitter for contributing. It pleased me to see that many people in the R community are passionate about teaching. If you liked this essay, then consider following me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>


</section>
 ]]></description>
  <category>Opinion</category>
  <guid>https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers.html</guid>
  <pubDate>Fri, 15 Apr 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to collect dataviz from Twitter into your note-taking system</title>
  <link>https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html</link>
  <description><![CDATA[ 


<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>It is mid-April and the <a href="https://twitter.com/30DayChartChall">#30daychartchallenge</a> is well on its way. One glace at the hashtag’s Twitter feed suffices to realize that there are great contributions. That’s a perfect opportunity to collect data viz examples for future inspirations.</p>
<p>Ideally, I can scroll through Twitter and with a few clicks incorporate these contributions straight into my <a href="https://obsidian.md/">Obsidian</a> or any other Markdown-based note-taking system. Unfortunately, <code>rtweet</code>’s snapshot function does not seem to work anymore. So, let’s build something on our own that gets the job done. The full script can be found on <a href="https://gist.github.com/AlbertRapp/37a2e0993acea9b4e36400037b797391">GitHub gist</a>. Here’s what we will need:</p>
<ul>
<li>Twitter app bearer token (to access Twitter’s API) - I’ll show you how to get that</li>
<li>Elevated API access (just a few clicks once you have a bearer token)</li>
<li>Dummy mail account to send tweets to</li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Before we begin, let me summarize what kind of note-taking process I have in mind:</p>
<ol type="1">
<li><p>Stroll through Twitter and see great data viz on twitter.</p></li>
<li><p>Send tweet link and a few comments via mail to a dummy mail account</p></li>
<li><p>A scheduled process accesses the dummy mail account and scans for new mails from authorized senders.</p></li>
<li><p>If there is a new mail, R extracts tweet URL and uses Twitter’s API to download the tweet’s pictures and texts.</p></li>
<li><p>A template Markdown file is used to create a new note that contains the images and texts.</p></li>
<li><p>Markdown file is copied to your note-taking system within your file system.</p></li>
<li><p>Ideally, your Markdown template contains tags like #dataviz and #twitter so that your new note can be easily searched for.</p></li>
<li><p>Next time you look for inspiration, stroll through your collections or search for comments.</p></li>
</ol>
</section>
<section id="preparations" class="level2">
<h2 class="anchored" data-anchor-id="preparations">Preparations</h2>
<p>Ok, we know what we want to accomplish. Time to get the prelims done. First, we will need a Twitter developer account. Then, we have to mask sensitive information in our code. If you already have a twitter app resp. a bearer token and know the <code>keyring</code> package, feel free to skip this section.</p>
<section id="get-twitter-developer-account" class="level3">
<h3 class="anchored" data-anchor-id="get-twitter-developer-account">Get Twitter developer account</h3>
<p>Let’s create a developer account for Twitter. Unfortunately, there is no way to get such an account without providing Twitter with your phone number. Sadly, if this burden on your privacy is a problem for you, then you cannot proceed. Otherwise, create an account at <a href="https://developer.twitter.com/en">developer.twitter.com</a>.</p>
<p>In your developer portal, create a project. Within this project create an app. Along the way, you will get a bunch of keys, secrets, IDs and tokens. You will see them only once, so you will have to save them somewhere. I suggest saving them into a password manager like <a href="https://bitwarden.com/">bitwarden</a>.</p>
<p>When you create your app or shortly after, you will need to set the authentication settings. I use <code>OAuth 2.0</code>. This requires</p>
<ul>
<li>type of app: <code>Automated bot or app</code></li>
<li>Callback URI / Redirect URI: <code>http://127.0.0.1:1410</code> (DISCLAIMER: This is magic to me but the <code>rtweet</code> docs - or possibly some other doc (not entirely sure anymore)- taught me to set up an app that way)</li>
<li>Website URL: Your Twitter link (in my case <code>https://twitter.com/rappa753</code>)</li>
</ul>
<p>Next, you will likely need to upgrade your project to ‘elevated’ status. This can be done for free on your project’s dashboard. From what I recall, you will have to fill out a form and tell Twitter what you want to do with your app. Just be honest and chances are that your request will immediately be granted. Just be yourself! What could possibly go wrong? Go get the <del>girl</del> elevated status (ahhh, what a perfect opportunity for a <a href="https://www.youtube.com/watch?v=6FQ11gCO64o">Taylor song</a>).</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/project-elevated.PNG" class="img-fluid figure-img" width="669"></p>
<p></p><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="how-to-embed-your-bearer-token-and-other-sensitive-material-in-your-code" class="level3">
<h3 class="anchored" data-anchor-id="how-to-embed-your-bearer-token-and-other-sensitive-material-in-your-code">How to embed your bearer token and other sensitive material in your code</h3>
<p>Use the <code>keyring</code> package to first save secrets via <code>key_set</code> and then extract them in your session via <code>key_get()</code>. This way, you won’t share your sensitive information by accident when you share your code (like I do). In this post, I do this for my bearer token, my dummy mail, my dummy mail’s password and for the allowed senders (that will be the mail where the tweets come from).</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1">bearer_token <span class="ot" style="color: #00769E;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'twitter-bearer-token'</span>, <span class="at" style="color: #677623;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb1-2">user_mail <span class="ot" style="color: #00769E;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'dataviz-mail'</span>, <span class="at" style="color: #677623;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb1-3">password_mail <span class="ot" style="color: #00769E;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'dataviz-mail-password'</span>, <span class="at" style="color: #677623;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb1-4">allowed_senders <span class="ot" style="color: #00769E;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'allowed_senders'</span>, <span class="at" style="color: #677623;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span></code></pre></div>
</div>
<p>The <code>allowed_senders</code> limitation is a precaution so that we do not accidentally download some malicious spam mail from God knows who onto our computer. I am no security expert but this feels like a prudent thing to do. If one of you fellow readers knows more about this security business, feel kindly invited to reach out to me with better security strategies.</p>
</section>
</section>
<section id="what-to-do-once-we-have-a-url" class="level2">
<h2 class="anchored" data-anchor-id="what-to-do-once-we-have-a-url">What to do once we have a URL</h2>
<p>Let’s assume for the sake of this section that we already extracted a tweet URL from a mail. Here’s the URL that we will use. In fact, it’s <a href="https://twitter.com/c_gebhard">Christian Gebhard</a>’s tweet that inspired me to start this project. From the URL we can extract the tweet’s ID (the bunch of numbers after <code>/status/</code>). Also, we will need the URL of Twitter’s API.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(stringr) <span class="co" style="color: #5E5E5E;"># for regex matching</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr) <span class="co" style="color: #5E5E5E;"># for binding rows and pipe</span></span>
<span id="cb2-3">tweet_url <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'https://twitter.com/c_gebhard/status/1510533315262042112'</span></span>
<span id="cb2-4">tweet_id <span class="ot" style="color: #00769E;">&lt;-</span> tweet_url <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_match</span>(<span class="st" style="color: #20794D;">"status/([0-9]+)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> .[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb2-5">API_url <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'https://api.twitter.com/2/tweets'</span></span></code></pre></div>
</div>
<section id="use-get-to-access-twitter-api" class="level3">
<h3 class="anchored" data-anchor-id="use-get-to-access-twitter-api">Use GET() to access Twitter API</h3>
<p>Next, we use the <code>GET()</code> function from the <code>httr</code> package to interact with Twitter’s API.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(httr) <span class="co" style="color: #5E5E5E;"># for API communication</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">auth <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Bearer"</span>, bearer_token) <span class="co" style="color: #5E5E5E;"># API needs format "Bearer &lt;my_token&gt;"</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># Make request to API</span></span>
<span id="cb3-6">request <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">GET</span>(</span>
<span id="cb3-7">  API_url, </span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #677623;">Authorization =</span> auth), </span>
<span id="cb3-9">  <span class="at" style="color: #677623;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb3-10">    <span class="at" style="color: #677623;">ids =</span> tweet_id, </span>
<span id="cb3-11">    <span class="at" style="color: #677623;">tweet.fields =</span> <span class="st" style="color: #20794D;">'created_at'</span>, <span class="co" style="color: #5E5E5E;"># time stamp</span></span>
<span id="cb3-12">    <span class="at" style="color: #677623;">expansions =</span> <span class="st" style="color: #20794D;">'attachments.media_keys,author_id'</span>, </span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;"># necessary expansion fields for img_url</span></span>
<span id="cb3-14">    <span class="at" style="color: #677623;">media.fields =</span> <span class="st" style="color: #20794D;">'url'</span> <span class="co" style="color: #5E5E5E;"># img_url</span></span>
<span id="cb3-15">  )</span>
<span id="cb3-16">) </span>
<span id="cb3-17">request</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>Response [https://api.twitter.com/2/tweets?ids=1510533315262042112&amp;tweet.fields=created_at&amp;expansions=attachments.media_keys%2Cauthor_id&amp;media.fields=url]
  Date: 2022-07-13 19:12
  Status: 200
  Content-Type: application/json; charset=utf-8
  Size: 690 B</code></pre>
</div>
</div>
<p>So, how do we know how to use the <code>GET()</code> function? Well, I am no expert on APIs but let me try to explain how I came up with the arguments I used here.</p>
<p>Remember those toys you would play with as a toddler where you try to get a square through a square-shaped hole, a triangle through a triangle-shaped hole and so on? You don’t? Well, neither do I. Who remembers that stuff from very early childhood?</p>
<p>But I hear that starting a sentence with “Remember those…” is good for building a rapport with your audience. So, great! Now that we feel all cozy and connected, I can tell you how I managed to get the API request to work.</p>
<p>And the truth is actually not that far from the toddler <a href="https://www.youtube.com/watch?v=NNl7GQFTULU">“intelligence test”</a>. First, I took a look at a <a href="https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/media">help page</a> from Twitter’s developer page. Then, I hammered at the <code>GET()</code> function until its output contained a URL that looks similar to the example I found. Here’s the example code I was aiming at.</p>
<pre><code>curl --request GET 'https://api.twitter.com/2/tweets?ids=1263145271946551300&amp;
expansions=attachments.media_keys&amp;
media.fields=duration_ms,height,media_key,preview_image_url,public_metrics,type,url,width,alt_text' 
--header 'Authorization: Bearer $BEARER_TOKEN'</code></pre>
<p>This is not really R code but it looks like usually you have to feed a GET request with a really long URL. In fact, it looks like the URL needs to contain everything you want to extract from the API. Specifically, the structure of said URL looks like</p>
<ul>
<li>the API’s base URL (in this case https://api.twitter.com/2/tweets)</li>
<li>a question mark <code>?</code></li>
<li>pairs of <code>keywords</code> (like <code>ids</code>) and a specific value, e.g.&nbsp;<code>ids=1263145271946551300</code>, that are connected via <code>&amp;</code></li>
</ul>
<p>Therefore, it is only a matter of figuring out how to make the output of <code>GET()</code> deliver this result. Hints on that came from <code>GET()</code> examples in the docs.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">GET</span>(<span class="st" style="color: #20794D;">"http://google.com/"</span>, <span class="at" style="color: #677623;">path =</span> <span class="st" style="color: #20794D;">"search"</span>, <span class="at" style="color: #677623;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">q =</span> <span class="st" style="color: #20794D;">"ham"</span>))</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>Response [http://www.google.com/search?q=ham]
  Date: 2022-07-13 19:12
  Status: 200
  Content-Type: text/html; charset=ISO-8859-1
  Size: 106 kB
&lt;!doctype html&gt;&lt;html lang="de"&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;meta content="/im...
document.documentElement.addEventListener("submit",function(b){var a;if(a=b.t...
var a=window.performance;window.start=Date.now();a:{var b=window;if(a){var c=...
var f=this||self;var g,h=null!=(g=f.mei)?g:1,m,n=null!=(m=f.sdo)?m:!0,p=0,q,r...
e);var l=a.fileName;l&amp;&amp;(b+="&amp;script="+c(l),e&amp;&amp;l===window.location.href&amp;&amp;(e=do...
var c=[],e=0;window.ping=function(b){-1==b.indexOf("&amp;zx")&amp;&amp;(b+="&amp;zx="+Date.no...
var k=this||self,l=function(a){var b=typeof a;return"object"==b&amp;&amp;null!=a||"fu...
b}).join(" "))};function w(){var a=k.navigator;return a&amp;&amp;(a=a.userAgent)?a:""...
!1}e||(d=null)}}else"mouseover"==b?d=a.fromElement:"mouseout"==b&amp;&amp;(d=a.toElem...
var a=document.getElementById("st-toggle"),b=document.getElementById("st-card...
...</code></pre>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">GET</span>(<span class="st" style="color: #20794D;">"http://httpbin.org/get"</span>, <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #677623;">a =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">b =</span> <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>Response [http://httpbin.org/get]
  Date: 2022-07-13 19:12
  Status: 200
  Content-Type: application/json
  Size: 403 B
{
  "args": {}, 
  "headers": {
    "A": "1", 
    "Accept": "application/json, text/xml, application/xml, */*", 
    "Accept-Encoding": "deflate, gzip, br", 
    "B": "2", 
    "Host": "httpbin.org", 
    "User-Agent": "libcurl/7.68.0 r-curl/4.3.2 httr/1.4.3", 
    "X-Amzn-Trace-Id": "Root=1-62cf1938-1ae927d56300c6ad51096f2c"
...</code></pre>
</div>
</div>
<p>So, the first example shows how an argument <code>query</code> can be filled with a list that creates the URL we need. The second examples shows us that there is something called <code>add_headers()</code>. Do I know exactly what that is? I mean, from a technical perspective of what is going on behind the scenes? Definitely not. But Twitter’s example request had something called header. Therefore, <code>add_headers()</code> is probably something that does what the Twitter API expects.</p>
<p>And where do the key-value pairs come from? I found these strolling through Twitter’s <a href="https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction">data dictionary</a>. Thus, a <code>GET()</code> request was born and I could feel like a true <a href="https://knowyourmeme.com/memes/hackerman">Hackerman</a>.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1">auth <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Bearer"</span>, bearer_token) <span class="co" style="color: #5E5E5E;"># API needs format "Bearer &lt;my_token&gt;"</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># Make request to API and parse to list</span></span>
<span id="cb10-4">request <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">GET</span>(</span>
<span id="cb10-5">  API_url, </span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #677623;">Authorization =</span> auth), </span>
<span id="cb10-7">  <span class="at" style="color: #677623;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #677623;">ids =</span> tweet_id, </span>
<span id="cb10-9">    <span class="at" style="color: #677623;">tweet.fields =</span> <span class="st" style="color: #20794D;">'created_at'</span>, <span class="co" style="color: #5E5E5E;"># time stamp</span></span>
<span id="cb10-10">    <span class="at" style="color: #677623;">expansions =</span> <span class="st" style="color: #20794D;">'attachments.media_keys,author_id'</span>, </span>
<span id="cb10-11">    <span class="co" style="color: #5E5E5E;"># necessary expansion fields for img_url</span></span>
<span id="cb10-12">    <span class="at" style="color: #677623;">media.fields =</span> <span class="st" style="color: #20794D;">'url'</span> <span class="co" style="color: #5E5E5E;"># img_url</span></span>
<span id="cb10-13">  )</span>
<span id="cb10-14">) </span></code></pre></div>
</div>
<p>Alright, we successfully requested data. Now, it becomes time to parse it to something useful. The <code>content()</code> function will to that.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">parsed_request <span class="ot" style="color: #00769E;">&lt;-</span> request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">content</span>(<span class="st" style="color: #20794D;">'parsed'</span>)</span>
<span id="cb11-2">parsed_request</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>$data
$data[[1]]
$data[[1]]$id
[1] "1510533315262042112"

$data[[1]]$created_at
[1] "2022-04-03T08:23:01.000Z"

$data[[1]]$text
[1] "#30DayChartChallenge #Day3 - Topic: historical\n\nBack to the Shakespeare data! Hamlet is is longest play, the comedies tend to be shorter.\n\nTool: #rstats\nData: kaggle users LiamLarsen, aodhan\nColor-Scale: MetBrewer\nFonts: Niconne, Noto Sans (+Mono)\nCode: https://t.co/iXAbniQDCb https://t.co/JCNrYH9uP4"

$data[[1]]$author_id
[1] "1070306701"

$data[[1]]$attachments
$data[[1]]$attachments$media_keys
$data[[1]]$attachments$media_keys[[1]]
[1] "3_1510533145334104067"





$includes
$includes$media
$includes$media[[1]]
$includes$media[[1]]$media_key
[1] "3_1510533145334104067"

$includes$media[[1]]$type
[1] "photo"

$includes$media[[1]]$url
[1] "https://pbs.twimg.com/media/FPZ95H0XwAMHA8q.jpg"



$includes$users
$includes$users[[1]]
$includes$users[[1]]$id
[1] "1070306701"

$includes$users[[1]]$name
[1] "Christian Gebhard"

$includes$users[[1]]$username
[1] "c_gebhard"</code></pre>
</div>
</div>
</section>
<section id="extract-tweet-data-from-what-the-api-gives-us-and-download-images" class="level3">
<h3 class="anchored" data-anchor-id="extract-tweet-data-from-what-the-api-gives-us-and-download-images">Extract tweet data from what the API gives us and download images</h3>
<p>We have seen that <code>parsed_request</code> is basically a large list that contains everything we requested from the API. Unfortunately, it is a highly nested list, so we have to do some work to extract the parts we actually want. <code>pluck()</code> from the <code>purrr</code> package is our best friend on this one. Here’s all the information we extract from the <code>parsed_request</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">library</span>(purrr) <span class="co" style="color: #5E5E5E;"># for pluck and map functions</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;"># Extract necessary information from list-like structure</span></span>
<span id="cb13-3">tweet_text <span class="ot" style="color: #00769E;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'text'</span>) </span>
<span id="cb13-5">tweet_text</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] "#30DayChartChallenge #Day3 - Topic: historical\n\nBack to the Shakespeare data! Hamlet is is longest play, the comedies tend to be shorter.\n\nTool: #rstats\nData: kaggle users LiamLarsen, aodhan\nColor-Scale: MetBrewer\nFonts: Niconne, Noto Sans (+Mono)\nCode: https://t.co/iXAbniQDCb https://t.co/JCNrYH9uP4"</code></pre>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1">tweet_user <span class="ot" style="color: #00769E;">&lt;-</span>  parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'users'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'username'</span>)</span>
<span id="cb15-3">tweet_user</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] "c_gebhard"</code></pre>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># We will use the tweet date and time as part of unique file names</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># Replace white spaces and colons (:) for proper file names</span></span>
<span id="cb17-3">tweet_date <span class="ot" style="color: #00769E;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-5">  lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_datetime</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">' '</span>, <span class="st" style="color: #20794D;">'_'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">':'</span>, <span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb17-8">tweet_date</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] "2022-04-03_082301"</code></pre>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb19-1">img_urls <span class="ot" style="color: #00769E;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'media'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">bind_rows</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># bind_rows for multiple pictures, i.e. multiple URLS</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">filter</span>(type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'photo'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;">pull</span>(url)</span>
<span id="cb19-6">img_urls</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] "https://pbs.twimg.com/media/FPZ95H0XwAMHA8q.jpg"</code></pre>
</div>
</div>
<p>Next, download all the images via the <code>img_urls</code> and <code>download.file()</code>. We will use <code>walk2()</code> to download all files (in case there are multiple images/URLs) and save the files into PNGs that are named using the unique <code>tweet_date</code> IDs. Remember to set <code>mode = 'wb'</code> in <code>download.file()</code>. I am not really sure why but without it you will save poor quality images.</p>
<div class="cell">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Download image - set mode otherwise download is blurry</span></span>
<span id="cb21-2">img_names <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">'tweet'</span>, tweet_user, tweet_date, <span class="fu" style="color: #4758AB;">seq_along</span>(img_urls), <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;">walk2</span>(img_urls, img_names, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">download.file</span>(.x, <span class="fu" style="color: #4758AB;">paste0</span>(.y, <span class="st" style="color: #20794D;">'.png'</span>), <span class="at" style="color: #677623;">mode =</span> <span class="st" style="color: #20794D;">'wb'</span>))</span></code></pre></div>
</div>
<p>So let’s do a quick recap of what we have done so far. We</p>
<ul>
<li>Assembled an API request</li>
<li>Parsed the return of the request</li>
<li>Cherrypicked the information that we want from the resulting list</li>
<li>Used the image URLs to download and save the files to our working directory.</li>
</ul>
<p>Let’s cherish this mile stone with a dedicated function.</p>
<div class="cell">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb22-1">request_twitter_data <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(tweet_url, bearer_token) {</span>
<span id="cb22-2">  <span class="co" style="color: #5E5E5E;"># Extract tweet id by regex</span></span>
<span id="cb22-3">  tweet_id <span class="ot" style="color: #00769E;">&lt;-</span> tweet_url <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_match</span>(<span class="st" style="color: #20794D;">"status/([0-9]+)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> .[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb22-4">  auth <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Bearer"</span>, bearer_token) <span class="co" style="color: #5E5E5E;"># API needs format "Bearer &lt;my_token&gt;"</span></span>
<span id="cb22-5">  API_url <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'https://api.twitter.com/2/tweets'</span></span>
<span id="cb22-6">  </span>
<span id="cb22-7">  <span class="co" style="color: #5E5E5E;"># Make request to API and parse to list</span></span>
<span id="cb22-8">  parsed_request <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">GET</span>(</span>
<span id="cb22-9">    API_url, </span>
<span id="cb22-10">    <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #677623;">Authorization =</span> auth), </span>
<span id="cb22-11">    <span class="at" style="color: #677623;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb22-12">      <span class="at" style="color: #677623;">ids =</span> tweet_id, </span>
<span id="cb22-13">      <span class="at" style="color: #677623;">tweet.fields =</span> <span class="st" style="color: #20794D;">'created_at'</span>, <span class="co" style="color: #5E5E5E;"># time stamp</span></span>
<span id="cb22-14">      <span class="at" style="color: #677623;">expansions=</span><span class="st" style="color: #20794D;">'attachments.media_keys,author_id'</span>, </span>
<span id="cb22-15">      <span class="co" style="color: #5E5E5E;"># necessary expansion fields for img_url</span></span>
<span id="cb22-16">      <span class="at" style="color: #677623;">media.fields =</span> <span class="st" style="color: #20794D;">'url'</span> <span class="co" style="color: #5E5E5E;"># img_url</span></span>
<span id="cb22-17">    )</span>
<span id="cb22-18">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">content</span>(<span class="st" style="color: #20794D;">'parsed'</span>)</span>
<span id="cb22-19">  </span>
<span id="cb22-20">  <span class="co" style="color: #5E5E5E;"># Extract necassary information from list-like structure</span></span>
<span id="cb22-21">  tweet_text <span class="ot" style="color: #00769E;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-22">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'text'</span>) </span>
<span id="cb22-23">  </span>
<span id="cb22-24">  tweet_user <span class="ot" style="color: #00769E;">&lt;-</span>  parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-25">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'users'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'username'</span>)</span>
<span id="cb22-26">  </span>
<span id="cb22-27">  <span class="co" style="color: #5E5E5E;"># Make file name unique through time-date combination</span></span>
<span id="cb22-28">  <span class="co" style="color: #5E5E5E;"># Replace white spaces and colons (:) for proper file names</span></span>
<span id="cb22-29">  tweet_date <span class="ot" style="color: #00769E;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-30">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-31">    lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_datetime</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-32">    <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">' '</span>, <span class="st" style="color: #20794D;">'_'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-33">    <span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">':'</span>, <span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb22-34">  </span>
<span id="cb22-35">  img_urls <span class="ot" style="color: #00769E;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-36">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'media'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-37">    <span class="fu" style="color: #4758AB;">bind_rows</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-38">    <span class="fu" style="color: #4758AB;">filter</span>(type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'photo'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-39">    <span class="fu" style="color: #4758AB;">pull</span>(url)</span>
<span id="cb22-40">  </span>
<span id="cb22-41">  <span class="co" style="color: #5E5E5E;"># Download image - set mode otherwise download is blurry</span></span>
<span id="cb22-42">  img_names <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">'tweet'</span>, tweet_user, tweet_date, <span class="fu" style="color: #4758AB;">seq_along</span>(img_urls), <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb22-43">  <span class="fu" style="color: #4758AB;">walk2</span>(img_urls, img_names, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">download.file</span>(.x, <span class="fu" style="color: #4758AB;">paste0</span>(.y, <span class="st" style="color: #20794D;">'.png'</span>), <span class="at" style="color: #677623;">mode =</span> <span class="st" style="color: #20794D;">'wb'</span>))</span>
<span id="cb22-44">  </span>
<span id="cb22-45">  <span class="co" style="color: #5E5E5E;"># Return list with information</span></span>
<span id="cb22-46">  <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb22-47">    <span class="at" style="color: #677623;">url =</span> tweet_url,</span>
<span id="cb22-48">    <span class="at" style="color: #677623;">text =</span> tweet_text,</span>
<span id="cb22-49">    <span class="at" style="color: #677623;">user =</span> tweet_user,</span>
<span id="cb22-50">    <span class="at" style="color: #677623;">file_names =</span> <span class="fu" style="color: #4758AB;">paste0</span>(img_names, <span class="st" style="color: #20794D;">'.png'</span>),</span>
<span id="cb22-51">    <span class="at" style="color: #677623;">file_paths =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">getwd</span>(), <span class="st" style="color: #20794D;">'/'</span>, img_names, <span class="st" style="color: #20794D;">'.png'</span>)</span>
<span id="cb22-52">  )</span>
<span id="cb22-53">}</span></code></pre></div>
</div>
</section>
<section id="fill-out-markdown-template-using-extracted-information-and-images" class="level3">
<h3 class="anchored" data-anchor-id="fill-out-markdown-template-using-extracted-information-and-images">Fill out Markdown template using extracted information and images</h3>
<p>We have our images and the original tweet now. Thanks to our previous function, we can save all of the information in a list.</p>
<div class="cell">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb23-1">request <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">request_twitter_data</span>(tweet_url, bearer_token)</span></code></pre></div>
</div>
<p>So, let’s bring all that information into a Markdown file. Here is the <code>template.md</code> file that I have created for this joyous occasion.</p>
<div class="cell">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">library</span>(readr) <span class="co" style="color: #5E5E5E;"># for reading and writing files from/to disk</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">read_file</span>(<span class="st" style="color: #20794D;">'template.md'</span>))</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>#dataviz #twitter

![[insert_img_name_here]]

### Original Tweet

insert_text_here

Original: insert_URL_here

### Original Mail

insert_mail_here</code></pre>
</div>
</div>
<p>As you can see, I started the Markdown template with two tags <code>#dataviz</code> and <code>#twitter</code>. This helps me to search for a specific dataviz faster. Also, I have already written out the Markdown syntax for image imports <code>![[...]]</code> and added a placeholder <code>insert_img_name_here</code>. This one will be replaced by the file path to the image. Similarly, other placeholders like <code>insert_text_here</code> and <code>insert_mail_here</code> allow me to save the tweet and the mail content into my note taking system too.</p>
<p>To do so, I will need a function that replaces all the placeholders. First, I created a helper function that changes the image import placeholder properly, when there are multiple images.</p>
<div class="cell">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb26-1">md_import_strings <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(file_names) {</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'![['</span>, file_names, <span class="st" style="color: #20794D;">']]'</span>, <span class="at" style="color: #677623;">collapse =</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">'</span>) </span>
<span id="cb26-3">}</span></code></pre></div>
</div>
<p>Then, I created a function that takes the <code>request</code> list that we got from calling our own <code>request_twitter_data()</code> function and iteratively uses <code>str_replace_all()</code>. This iteration is done with <code>reduce2()</code> which will replace all placeholders in <code>template.md</code> .</p>
<div class="cell">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">library</span>(tibble) <span class="co" style="color: #5E5E5E;"># for easier readable tribble creation</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;"># Replace the placeholders in the template</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;"># We change original mail place holder later on</span></span>
<span id="cb27-4">replace_template_placeholder <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(template_name, request) {</span>
<span id="cb27-5">  <span class="co" style="color: #5E5E5E;"># Create a dictionary for what to replace in template</span></span>
<span id="cb27-6">  replace_dict <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb27-7">    <span class="sc" style="color: #5E5E5E;">~</span>template, <span class="sc" style="color: #5E5E5E;">~</span>replacement,</span>
<span id="cb27-8">    <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">!</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[insert_img_name_here</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">]</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">]'</span>, <span class="fu" style="color: #4758AB;">md_import_strings</span>(request<span class="sc" style="color: #5E5E5E;">$</span>file_names),</span>
<span id="cb27-9">    <span class="st" style="color: #20794D;">'insert_text_here'</span>, request<span class="sc" style="color: #5E5E5E;">$</span>text <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">'#'</span>, <span class="st" style="color: #20794D;">'(#)'</span>),</span>
<span id="cb27-10">    <span class="st" style="color: #20794D;">'insert_URL_here'</span>, request<span class="sc" style="color: #5E5E5E;">$</span>url</span>
<span id="cb27-11">  )</span>
<span id="cb27-12">  </span>
<span id="cb27-13">  <span class="co" style="color: #5E5E5E;"># Iteratively apply str_replace_all and keep only final result</span></span>
<span id="cb27-14">  <span class="fu" style="color: #4758AB;">reduce2</span>(</span>
<span id="cb27-15">    <span class="at" style="color: #677623;">.x =</span> replace_dict<span class="sc" style="color: #5E5E5E;">$</span>template, </span>
<span id="cb27-16">    <span class="at" style="color: #677623;">.y =</span> replace_dict<span class="sc" style="color: #5E5E5E;">$</span>replacement,</span>
<span id="cb27-17">    <span class="at" style="color: #677623;">.f =</span> str_replace_all,</span>
<span id="cb27-18">    <span class="at" style="color: #677623;">.init =</span>  <span class="fu" style="color: #4758AB;">read_lines</span>(template_name) </span>
<span id="cb27-19">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-20">    <span class="fu" style="color: #4758AB;">paste0</span>(<span class="at" style="color: #677623;">collapse =</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">'</span>) <span class="co" style="color: #5E5E5E;"># Collaps lines into a single string</span></span>
<span id="cb27-21">}</span>
<span id="cb27-22"></span>
<span id="cb27-23"><span class="fu" style="color: #4758AB;">replace_template_placeholder</span>(<span class="st" style="color: #20794D;">'template.md'</span>, request) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">cat</span>()</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>#dataviz #twitter

![[tweet_c_gebhard_2022-04-03_082301_1.png]]

### Original Tweet

(#)30DayChartChallenge (#)Day3 - Topic: historical

Back to the Shakespeare data! Hamlet is is longest play, the comedies tend to be shorter.

Tool: (#)rstats
Data: kaggle users LiamLarsen, aodhan
Color-Scale: MetBrewer
Fonts: Niconne, Noto Sans (+Mono)
Code: https://t.co/iXAbniQDCb https://t.co/JCNrYH9uP4

Original: https://twitter.com/c_gebhard/status/1510533315262042112

### Original Mail

insert_mail_here</code></pre>
</div>
</div>
<p>As you can see, my <code>replace_template_placeholder()</code> function also replaces the typical <code>#</code> from Twitter with <code>(#)</code>. This is just a precaution to avoid wrong interpretation of these lines as headings in Markdown. Also, the original mail has not been inserted yet because we have no mail yet. But soooon. Finally, we need to write the replaced strings to a file. I got some helpers for that right here.</p>
<div class="cell">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb29-1">write_replaced_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(replaced_text, request) {</span>
<span id="cb29-2">  file_name <span class="ot" style="color: #00769E;">&lt;-</span> request<span class="sc" style="color: #5E5E5E;">$</span>file_name[<span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">'_1.png'</span>, <span class="st" style="color: #20794D;">'.md'</span>)</span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;">write_lines</span>(replaced_text, file_name)</span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">getwd</span>(), <span class="st" style="color: #20794D;">'/'</span>, file_name) </span>
<span id="cb29-5">}</span>
<span id="cb29-6">replaced_template <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">replace_template_placeholder</span>(<span class="st" style="color: #20794D;">'template.md'</span>, request) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-7">  <span class="fu" style="color: #4758AB;">write_replaced_text</span>(request)</span></code></pre></div>
</div>
</section>
<section id="shuffle-files-around-on-your-file-system" class="level3">
<h3 class="anchored" data-anchor-id="shuffle-files-around-on-your-file-system">Shuffle files around on your file system</h3>
<p>Awesome! We created new image files and a new Markdown note in our working directory. Now, we have to move them to our Obsidian vault. This is the place where I collect all my Markdown notes for use in Obsidian. In my case, I will need to move the Markdown note to the vault directory and the images to a subdirectory within this vault. This is because I changed settings in Obsidian that makes sure that all attachments, e.g.&nbsp;images, are saved in a separate subdirectory.</p>
<p>Here’s the function I created to get that job done. The function uses the <code>request</code> list again because it contains the file paths of the images. Here, <code>vault_location</code> and <code>attachments_dir</code> are the file paths to my Obsidian vault.</p>
<div class="cell">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">library</span>(tidyr) <span class="co" style="color: #5E5E5E;"># for unnesting</span></span>
<span id="cb30-2">move_files <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(request, replaced_template, vault_location, attachments_dir) {</span>
<span id="cb30-3">  <span class="co" style="color: #5E5E5E;"># Create from-to dictionary with file paths in each column</span></span>
<span id="cb30-4">  move_dict <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb30-5">    <span class="sc" style="color: #5E5E5E;">~</span>from, <span class="sc" style="color: #5E5E5E;">~</span>to,</span>
<span id="cb30-6">    request<span class="sc" style="color: #5E5E5E;">$</span>file_path, <span class="fu" style="color: #4758AB;">paste0</span>(vault_location, <span class="st" style="color: #20794D;">'/'</span>, attachments_dir),</span>
<span id="cb30-7">    replaced_template, vault_location</span>
<span id="cb30-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-9">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #677623;">cols =</span> <span class="st" style="color: #20794D;">'from'</span>)</span>
<span id="cb30-10">  <span class="co" style="color: #5E5E5E;"># Copy files from current working directory to destination</span></span>
<span id="cb30-11">  move_dict <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pwalk</span>(file.copy, <span class="at" style="color: #677623;">overwrite =</span> T)</span>
<span id="cb30-12">  <span class="co" style="color: #5E5E5E;"># Delete files in current working directory</span></span>
<span id="cb30-13">  <span class="fu" style="color: #4758AB;">walk</span>(move_dict<span class="sc" style="color: #5E5E5E;">$</span>from, file.remove)</span>
<span id="cb30-14">}</span></code></pre></div>
</div>
</section>
</section>
<section id="how-to-extract-url-and-other-stuff-from-mail" class="level2">
<h2 class="anchored" data-anchor-id="how-to-extract-url-and-other-stuff-from-mail">How to extract URL and other stuff from mail</h2>
<p>Let’s take a quick breather and recap. We have written functions that</p>
<ul>
<li>take a tweet URL</li>
<li>hussle the Twitter API to give us all its data</li>
<li>download the images and tweet text</li>
<li>save everything to a new Markdown note based on a template</li>
<li>can move the note plus images to the location of our note-taking hub</li>
</ul>
<p>Not to brag but that is kind of cool. But let’s not rest here. We still have to get some work done. After all, we want our workflow to be email-based. So, let’s access our mails using R. Then, we can extract a Twitter URL and apply our previous functions. Also, this lets us finally replace the <code>insert_mail_here</code> placeholder in our Markdown note.</p>
<section id="postman-gives-you-access" class="level3">
<h3 class="anchored" data-anchor-id="postman-gives-you-access">Postman gives you access</h3>
<p>I have created a dummy mail account at gmail. Using the <code>mRpostman</code> package, we can establish a connection to our mail inbox. After the connection is established, we can filter for all new emails that are sent from our list of <code>allowed_senders</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">library</span>(mRpostman) <span class="co" style="color: #5E5E5E;"># for email communication</span></span>
<span id="cb31-2">imap_mail <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'imaps://imap.gmail.com'</span> <span class="co" style="color: #5E5E5E;"># mail client</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;"># Establish connection to imap server</span></span>
<span id="cb31-4">con <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">configure_imap</span>(</span>
<span id="cb31-5">  <span class="at" style="color: #677623;">url =</span> imap_mail,</span>
<span id="cb31-6">  <span class="at" style="color: #677623;">user =</span> user_mail,</span>
<span id="cb31-7">  <span class="at" style="color: #677623;">password =</span> password_mail</span>
<span id="cb31-8">)</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;"># Switch to Inbox</span></span>
<span id="cb31-11">con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">select_folder</span>(<span class="st" style="color: #20794D;">'Inbox'</span>) </span>
<span id="cb31-12"></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;"># Extract mails that are from the list of allowed senders</span></span>
<span id="cb31-14">mails <span class="ot" style="color: #00769E;">&lt;-</span> allowed_senders <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-15">  <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span>con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">search_string</span>(<span class="at" style="color: #677623;">expr =</span> ., <span class="at" style="color: #677623;">where =</span> <span class="st" style="color: #20794D;">'FROM'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-16">  <span class="fu" style="color: #4758AB;">unlist</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-17">  <span class="fu" style="color: #4758AB;">na.omit</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># Remove NAs if no mail from a sender</span></span>
<span id="cb31-18">  <span class="fu" style="color: #4758AB;">as.numeric</span>() <span class="co" style="color: #5E5E5E;"># avoids attributes</span></span></code></pre></div>
</div>
</section>
<section id="grab-urls-from-mail" class="level3">
<h3 class="anchored" data-anchor-id="grab-urls-from-mail">Grab URLs from mail</h3>
<p>If <code>mails</code> is not empty, i.e.&nbsp;if there are new mails, then we need to extract the tweet URLs from them. Unfortunately, depending on where you sent your email from, the mail text can be encoded.</p>
<p>For example, I send most of the tweets via the share button on Twitter using my Android smartphone. And for some reason, my Android mail client encodes the mails in something called <code>base64</code>. But sending a tweet URL from Thunderbird on my computer works without any encoding. Here are two example mails I have sent to my dummy mail account.</p>
<div class="cell">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="cf" style="color: #00769E;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is_empty</span>(mails)) mail_bodys <span class="ot" style="color: #00769E;">&lt;-</span> mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">fetch_text</span>()</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;">cat</span>(mail_bodys[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;">cat</span>(mail_bodys[[<span class="dv" style="color: #AD0000;">2</span>]])</span></code></pre></div>
</div>
<p>As you can see, the mail sent from my computer is legible but the other one is gibberish. Thankfully, Allan Cameron helped me out on <a href="https://stackoverflow.com/questions/71772972/translate-encoding-of-android-mail-in-r">Stackoverflow</a> to decode the mail. To decode the mail, the trick was to extract the parts between <code>base64</code> and <code>----</code>.</p>
<p>There are two such texts in the encoded mail. Surprisingly, the first one decoded to a text without line breaks. This is why we take the second encoded part and decode it. However, this will give us an HTML text with all kinds of tags like <code>&lt;div&gt;</code> and what not. Therefore, we use <code>html_read()</code> and <code>html_text2()</code> from the <code>rvest</code> package to handle that. All of this is summarized in this helper function.</p>
<div class="cell">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb33-1">decode_encoded_mails <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(encoded_mails) {</span>
<span id="cb33-2">  <span class="co" style="color: #5E5E5E;"># Ressource: https://stackoverflow.com/questions/71772972/translate-encoding-of-android-mail-in-r</span></span>
<span id="cb33-3">  <span class="co" style="color: #5E5E5E;"># Find location in each encoded string where actual text starts</span></span>
<span id="cb33-4">  start_encoded <span class="ot" style="color: #00769E;">&lt;-</span> encoded_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-5">    <span class="fu" style="color: #4758AB;">str_locate_all</span>(<span class="st" style="color: #20794D;">'base64</span><span class="sc" style="color: #5E5E5E;">\r\n\r\n</span><span class="st" style="color: #20794D;">'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-6">    <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">pluck</span>(., <span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-7">    <span class="fu" style="color: #4758AB;">unlist</span>()</span>
<span id="cb33-8">  </span>
<span id="cb33-9">  <span class="co" style="color: #5E5E5E;"># Find location in each encoded string where actual text starts</span></span>
<span id="cb33-10">  end_encoded <span class="ot" style="color: #00769E;">&lt;-</span> encoded_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-11">    <span class="fu" style="color: #4758AB;">str_locate_all</span>(<span class="st" style="color: #20794D;">'----'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-12">    <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">pluck</span>(., <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-13">    <span class="fu" style="color: #4758AB;">unlist</span>()</span>
<span id="cb33-14">  </span>
<span id="cb33-15">  <span class="co" style="color: #5E5E5E;"># Use str_sub() to extract encoded text</span></span>
<span id="cb33-16">  encoded_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb33-17">    <span class="at" style="color: #677623;">string =</span> <span class="fu" style="color: #4758AB;">unlist</span>(encoded_mails), </span>
<span id="cb33-18">    <span class="at" style="color: #677623;">start =</span> start_encoded, </span>
<span id="cb33-19">    <span class="at" style="color: #677623;">end =</span> end_encoded</span>
<span id="cb33-20">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-21">    <span class="fu" style="color: #4758AB;">pmap</span>(str_sub) </span>
<span id="cb33-22">  </span>
<span id="cb33-23">  <span class="co" style="color: #5E5E5E;"># Decode: base64 -&gt; raw -&gt; char -&gt; html -&gt; text</span></span>
<span id="cb33-24">  encoded_text <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-25">    <span class="fu" style="color: #4758AB;">map</span>(base64enc<span class="sc" style="color: #5E5E5E;">::</span>base64decode) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-26">    <span class="fu" style="color: #4758AB;">map</span>(rawToChar) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-27">    <span class="fu" style="color: #4758AB;">map</span>(rvest<span class="sc" style="color: #5E5E5E;">::</span>read_html) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-28">    <span class="fu" style="color: #4758AB;">map</span>(rvest<span class="sc" style="color: #5E5E5E;">::</span>html_text2)</span>
<span id="cb33-29">}</span></code></pre></div>
</div>
<p>I feel like this is the most hacky part of this blog post. Unfortunately, your milage may vary here. If your phone or whatever you use encodes the mails differently, then you may have to adjust the function. But I hope that I have explained enough details and concepts for you to manage that if it comes to this.</p>
<p>Recall that I send both plain mails from Thunderbird and encoded mails from Android. Therefore, here is another helper that decoded mails if neccessary from both types in one swoop.</p>
<div class="cell">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb34-1">decode_all_mails <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(mail_bodys) {</span>
<span id="cb34-2">  <span class="co" style="color: #5E5E5E;"># Decode in case mail is base64 decoded</span></span>
<span id="cb34-3">  is_encoded <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_detect</span>(mail_bodys, <span class="st" style="color: #20794D;">'Content-Transfer-Encoding'</span>)</span>
<span id="cb34-4">  encoded_mails <span class="ot" style="color: #00769E;">&lt;-</span> mail_bodys[is_encoded]</span>
<span id="cb34-5">  plain_mails <span class="ot" style="color: #00769E;">&lt;-</span> mail_bodys[<span class="sc" style="color: #5E5E5E;">!</span>is_encoded]</span>
<span id="cb34-6">  decoded_mails <span class="ot" style="color: #00769E;">&lt;-</span> encoded_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">decode_encoded_mails</span>()</span>
<span id="cb34-7">  <span class="fu" style="color: #4758AB;">c</span>(decoded_mails, plain_mails)</span>
<span id="cb34-8">}</span></code></pre></div>
</div>
<p>The remaining part of the code should be familiar:</p>
<ul>
<li>Use <code>decode_all_mails()</code> for decoding</li>
<li>Grab URLs with <code>str_extract()</code></li>
<li>Use <code>request_twitter_data()</code> with our URLs</li>
<li>Replace placeholders with <code>replace_template_placeholder()</code></li>
<li>This time, replace mail placeholders too with another <code>str_replace()</code> iteration</li>
<li>Move files with <code>move_files()</code></li>
</ul>
<p>The only new thing is that we use our postman connection to move the processed mails into a new directory (which I called “Processed”) on the email server. This way, the inbox is empty again or filled only with mails from unauthorized senders.</p>
<div class="cell">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="cf" style="color: #00769E;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is_empty</span>(mails)) {</span>
<span id="cb35-2">  <span class="co" style="color: #5E5E5E;"># Grab mail texts and URLs</span></span>
<span id="cb35-3">  mail_bodys <span class="ot" style="color: #00769E;">&lt;-</span> mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">fetch_text</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> decode_all_mails</span>
<span id="cb35-4">  urls <span class="ot" style="color: #00769E;">&lt;-</span> mail_bodys <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_extract</span>(<span class="st" style="color: #20794D;">'https.*'</span>)</span>
<span id="cb35-5">  </span>
<span id="cb35-6">  <span class="co" style="color: #5E5E5E;"># Remove mails from vector in case s.th. goes wrong </span></span>
<span id="cb35-7">  <span class="co" style="color: #5E5E5E;"># and urls cannot be detected</span></span>
<span id="cb35-8">  mail_bodys <span class="ot" style="color: #00769E;">&lt;-</span> mail_bodys[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(urls)]</span>
<span id="cb35-9">  mails <span class="ot" style="color: #00769E;">&lt;-</span> mails[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(urls)]</span>
<span id="cb35-10">  urls <span class="ot" style="color: #00769E;">&lt;-</span> urls[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(urls)]</span>
<span id="cb35-11">  </span>
<span id="cb35-12">  <span class="co" style="color: #5E5E5E;"># For each url request twitter data</span></span>
<span id="cb35-13">  requests <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">map</span>(urls, request_twitter_data, <span class="at" style="color: #677623;">bearer_token =</span> bearer_token)</span>
<span id="cb35-14">  </span>
<span id="cb35-15">  <span class="co" style="color: #5E5E5E;"># Use requested twitter data to insert texts into Markdown template </span></span>
<span id="cb35-16">  <span class="co" style="color: #5E5E5E;"># and write to current working directory</span></span>
<span id="cb35-17">  replaced_templates_wo_mails <span class="ot" style="color: #00769E;">&lt;-</span> </span>
<span id="cb35-18">    <span class="fu" style="color: #4758AB;">map</span>(requests, replace_template_placeholder, <span class="at" style="color: #677623;">template =</span> <span class="st" style="color: #20794D;">'template.md'</span>) </span>
<span id="cb35-19">  </span>
<span id="cb35-20">  <span class="co" style="color: #5E5E5E;"># Now that we have mails, replace that placeholder too</span></span>
<span id="cb35-21">  replaced_templates <span class="ot" style="color: #00769E;">&lt;-</span> replaced_templates_wo_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-22">    <span class="fu" style="color: #4758AB;">map2</span>(mail_bodys, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_replace</span>(.x, <span class="st" style="color: #20794D;">'insert_mail_here'</span> ,.y)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-23">    <span class="fu" style="color: #4758AB;">map2</span>(requests, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">write_replaced_text</span>(.x, .y))</span>
<span id="cb35-24">  </span>
<span id="cb35-25">  <span class="co" style="color: #5E5E5E;"># Move markdown files and extracted pngs to correct place on HDD</span></span>
<span id="cb35-26">  <span class="fu" style="color: #4758AB;">walk2</span>(</span>
<span id="cb35-27">    requests, </span>
<span id="cb35-28">    replaced_templates, </span>
<span id="cb35-29">    move_files, </span>
<span id="cb35-30">    <span class="at" style="color: #677623;">vault_location =</span> vault_location, </span>
<span id="cb35-31">    <span class="at" style="color: #677623;">attachments_dir =</span> attachments_dir</span>
<span id="cb35-32">  )</span>
<span id="cb35-33">  </span>
<span id="cb35-34">  <span class="co" style="color: #5E5E5E;"># Move emails on imap server to Processed directory</span></span>
<span id="cb35-35">  con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">move_msg</span>(mails, <span class="at" style="color: #677623;">to_folder =</span> <span class="st" style="color: #20794D;">'Processed'</span>)</span>
<span id="cb35-36">}</span></code></pre></div>
</div>
</section>
</section>
<section id="last-step-execute-r-script-automatically" class="level2">
<h2 class="anchored" data-anchor-id="last-step-execute-r-script-automatically">Last Step: Execute R script automatically</h2>
<p>Alright, alright, alright. We made it. We have successfully</p>
<ul>
<li>extracted URLs from mails,</li>
<li>created new notes and</li>
<li>moved them to their designated place</li>
</ul>
<p>The only thing that is left to do is execute this script automatically. Again, if you don’t want to assemble the R script yourself using the code chunks in this blog post, check out this <a href="https://gist.github.com/AlbertRapp/37a2e0993acea9b4e36400037b797391">GitHub gist</a>.</p>
<p>On Windows, you can write a VBS script that will execute the R script. Window’s task scheduler is <a href="https://www.windowscentral.com/how-create-automated-task-using-task-scheduler-windows-10">easily set up</a> to run that VBS script regularly, say every hour. For completeness’ sake let me give you an example VBS script. But beware that I have no frikkin clue how VBS scripts work beyond this simple call.</p>
<pre><code>Set wshshell = WScript.CreateObject ("wscript.shell")
wshshell.run """C:\Program Files\R\R-4.0.5\bin\Rscript.exe"" ""D:\Local R Projects\Playground\TwitterTracking\my_twitter_script.R""", 6, True
set wshshell = nothing</code></pre>
<p>The idea of this script is to call <code>Rscript.exe</code> and give it the location of the R script that we want to execute. Of course, you will need to adjust the paths to your file system. Notice that there are super many double quotes in this script. This is somewhat dumb but it’s the only way I could find to make file paths with white spaces work (see <a href="https://stackoverflow.com/questions/14360599/vbs-with-space-in-file-path">StackOverflow</a>).</p>
<p>On Ubuntu (and probably other Unix-based systems), I am sure that every Unix user knows that there is <a href="https://stackoverflow.com/questions/38778732/schedule-a-rscript-crontab-everyminute">CronTab</a> to schedule regular tasks. On Mac, I am sure there is something. But instead of wandering even further from my expertise, I will refer to your internet search skills.</p>
</section>
<section id="mind-the-possibilities" class="level2">
<h2 class="anchored" data-anchor-id="mind-the-possibilities">Mind the possibilities</h2>
<p>We made it! We connected to Twitter’s API and our dummy email to get data viz (what’s the plural here? viz, vizz, vizzes, vizzeses?) into our note-taking system. Honestly, I think that was quite an endeavor. But now we can use the same ideas for all kind of other applications! From the top of my head I can think of more scenarios where similar solutions should be manageable. Here are two ideas.</p>
<ul>
<li><p>Take notes on the fly using emails and automatically incorporate the emails into your note-taking system.</p></li>
<li><p>Take a photo from a book/text you’re reading and send it to another dummy mail. Run a script that puts the photo and the mail directly into your vault.</p></li>
</ul>
<p>So, enjoy the possibilities! If you liked this blog post, then consider following me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. Until next time!</p>


</section>
 ]]></description>
  <category>Automation</category>
  <category>API</category>
  <guid>https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html</guid>
  <pubDate>Thu, 14 Apr 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Recreating the Storytelling with Data look with ggplot</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html</link>
  <description><![CDATA[ 


<p>So, I found a <a href="https://www.youtube.com/watch?v=st7_vPjq0SU">great video</a> from Storytelling with Data (SWD). In this video, a data storyteller demonstrates how a dataviz that does not demonstrate a clear story can be improved. Let’s take a look at the dataviz but, first, here’s the data.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2">dat <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #677623;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">19</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #677623;">fulfilled =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">803</span>, <span class="dv" style="color: #AD0000;">865</span>, <span class="dv" style="color: #AD0000;">795</span>, <span class="dv" style="color: #AD0000;">683</span>, <span class="dv" style="color: #AD0000;">566</span>, <span class="dv" style="color: #AD0000;">586</span>, <span class="dv" style="color: #AD0000;">510</span>, <span class="dv" style="color: #AD0000;">436</span>, <span class="dv" style="color: #AD0000;">418</span>, <span class="dv" style="color: #AD0000;">364</span>, <span class="dv" style="color: #AD0000;">379</span>, <span class="dv" style="color: #AD0000;">372</span>, <span class="dv" style="color: #AD0000;">374</span>, <span class="dv" style="color: #AD0000;">278</span>, <span class="dv" style="color: #AD0000;">286</span>, <span class="dv" style="color: #AD0000;">327</span>, <span class="dv" style="color: #AD0000;">225</span>, <span class="dv" style="color: #AD0000;">222</span>, <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #677623;">accuracy =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">86</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">84</span>, <span class="dv" style="color: #AD0000;">82</span>, <span class="dv" style="color: #AD0000;">86</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">93</span>, <span class="dv" style="color: #AD0000;">88</span>, <span class="dv" style="color: #AD0000;">87</span>, <span class="dv" style="color: #AD0000;">85</span>, <span class="dv" style="color: #AD0000;">85</span>, <span class="dv" style="color: #AD0000;">83</span>, <span class="dv" style="color: #AD0000;">94</span>, <span class="dv" style="color: #AD0000;">86</span>, <span class="dv" style="color: #AD0000;">78</span>, <span class="dv" style="color: #AD0000;">89</span>, <span class="dv" style="color: #AD0000;">88</span>, <span class="dv" style="color: #AD0000;">91</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #677623;">error =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>),</span>
<span id="cb1-7">  <span class="at" style="color: #677623;">null =</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">-</span> accuracy <span class="sc" style="color: #5E5E5E;">-</span> error</span>
<span id="cb1-8">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(accuracy<span class="sc" style="color: #5E5E5E;">:</span>null, <span class="sc" style="color: #5E5E5E;">~</span>. <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb1-10">dat</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 19 × 5
      id fulfilled accuracy error  null
   &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     1       803     0.86  0.1   0.04
 2     2       865     0.8   0.14  0.06
 3     3       795     0.84  0.1   0.06
 4     4       683     0.82  0.14  0.04
 5     5       566     0.86  0.1   0.04
 6     6       586     0.8   0.16  0.04
 7     7       510     0.8   0.15  0.05
 8     8       436     0.93  0.06  0.01
 9     9       418     0.88  0.11  0.01
10    10       364     0.87  0.07  0.06
11    11       379     0.85  0.12  0.03
12    12       372     0.85  0.13  0.02
13    13       374     0.83  0.08  0.09
14    14       278     0.94  0.04  0.02
15    15       286     0.86  0.12  0.02
16    16       327     0.78  0.12  0.1 
17    17       225     0.89  0.07  0.04
18    18       222     0.88  0.1   0.02
19    19       200     0.91  0.07  0.02</code></pre>
</div>
</div>
<p>This data set contains a lot of accuracy and error rates from different (anonymous) warehouses. Additionally, there are “null rates”. These are likely related to data quality issues. Furthermore, this data set is apparently taken from a client the data storytellers helped. In any case, here is a <code>ggplot2</code> recreation of the client’s initial plot. Note that the plot does not match exactly but it’s close enough to get the gist.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_minimal</span>())</span>
<span id="cb3-2">dat_long <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #677623;">cols =</span> accuracy<span class="sc" style="color: #5E5E5E;">:</span>null,</span>
<span id="cb3-5">    <span class="at" style="color: #677623;">names_to =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb3-6">    <span class="at" style="color: #677623;">values_to =</span> <span class="st" style="color: #20794D;">'percent'</span></span>
<span id="cb3-7">  )</span>
<span id="cb3-8"></span>
<span id="cb3-9">dat_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(id, percent, <span class="at" style="color: #677623;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #677623;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>, <span class="st" style="color: #20794D;">'error'</span>)))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb3-13">    <span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Warehouse Accuracy Rates'</span>,</span>
<span id="cb3-14">    <span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'Warehouse ID'</span>,</span>
<span id="cb3-15">    <span class="at" style="color: #677623;">y =</span> <span class="st" style="color: #20794D;">'% of total orders'</span>,</span>
<span id="cb3-16">    <span class="at" style="color: #677623;">fill =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()</span>
<span id="cb3-17">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-18">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">labels =</span> <span class="sc" style="color: #5E5E5E;">~</span>scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(., <span class="at" style="color: #677623;">accuracy =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #677623;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.1</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>As it is right know, the plot shows data. But what is the message of this dataviz? To make the message more explicit, the plot is transformed during the course of the video. Take a look at what story the exact same data can tell.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/final.png" class="img-fluid" width="944"></p>
</div>
</div>
<p>From reading the SWD book, I know that some of the techniques that were used in this picture can be used in many settings. Therefore, I decided to document the steps I took to recreate the dataviz with ggplot.</p>
<p>I tried to make this documentation as accessible as possible. Consequently, if you are already quite familiar with how to customize a ggplot’s details, then some of the explanations or references may be superfluous. Feel free to skip them. That being said, let’s transform the plot.</p>
<section id="flip-the-axes-for-long-names" class="level2">
<h2 class="anchored" data-anchor-id="flip-the-axes-for-long-names">Flip the axes for long names</h2>
<p>Although it is not really an issue here, warehouses or other places might be more identifiable by a (long) name rather than an ID. To make sure that these names are legible, show them on the y-axes. When I first learned ggplot, there was the layer <code>coord_flip()</code> to do that job for us. Nowadays, though, you can often avoid <code>coord_flip()</code> because a lot of geoms already understand what you mean, when you map categorical data to the y-aesthetic. But make sure that ggplot will know that you mean categorical data (especially if the labels are numerical like here).</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">categorial_dat <span class="ot" style="color: #00769E;">&lt;-</span> dat_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #677623;">id =</span> <span class="fu" style="color: #4758AB;">as.character</span>(id),</span>
<span id="cb4-4">  )</span>
<span id="cb4-5"></span>
<span id="cb4-6">categorial_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> percent, <span class="at" style="color: #677623;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">group =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #677623;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>))),</span>
<span id="cb4-10">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="co" style="color: #5E5E5E;"># set color to distinguish bars better</span></span>
<span id="cb4-11">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that I used the <code>group</code>- instead of <code>fill</code>-aesthetic because I only need grouping. Also, it is always a good idea to avoid <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/">excessive use of colors</a>. This will allow us to emphasize parts of our story with colors later on.</p>
</section>
<section id="add-reference-points" class="level2">
<h2 class="anchored" data-anchor-id="add-reference-points">Add reference points</h2>
<p>Another good idea it to put your data into perspective. To do so, include a reference point. This can be a summary statistic like the average error rate. For more great demonstration of reference points you can also check out <a href="https://www.cedricscherer.com/2019/05/17/the-evolution-of-a-ggplot-ep.-1/">the evolution of a ggplot by Cédric Scherer</a>.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">averages <span class="ot" style="color: #00769E;">&lt;-</span> dat_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">group_by</span>(type) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #677623;">percent =</span> <span class="fu" style="color: #4758AB;">mean</span>(percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">id =</span> <span class="st" style="color: #20794D;">'ALL'</span>) </span>
<span id="cb5-5"></span>
<span id="cb5-6">dat_with_summary <span class="ot" style="color: #00769E;">&lt;-</span> categorial_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">bind_rows</span>(averages)</span>
<span id="cb5-8"></span>
<span id="cb5-9">dat_with_summary <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> percent, <span class="at" style="color: #677623;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb5-12">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">group =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #677623;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>))),</span>
<span id="cb5-13">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb5-14">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="order-your-data" class="level2">
<h2 class="anchored" data-anchor-id="order-your-data">Order your data</h2>
<p>To allow your reader to gain a quick overview, put your data into some form of sensible ordering. This eases the burden of having to make sense of what the visual shows. Also, notice that we already did part of that. See, with the order of the levels in the <code>group</code> aesthetic, we influenced the ordering of the stacked bars. Here, we made sure that important quantities start at the left resp. right edges.</p>
<p>Why is that helpful, you ask? Well, the bars that start on the left all start at the same reference point. Therefore comparisons are quite easy for these bars. The same holds true for the right edge. Consequently, it is best that we reserve these vip seats for the important data. Check out what happens if I were to put the accuracy in the middle.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">dat_with_summary <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> percent, <span class="at" style="color: #677623;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">group =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #677623;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>, <span class="st" style="color: #20794D;">'null'</span>))),</span>
<span id="cb6-5">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb6-6">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now, we can’t really make out which warehouses have a higher accuracy. Given that the accuracy is likely something we care about, this is bad. But we can change the order even more. For instance, we can also order the bars by error rate. Here, <code>fct_reorder()</code> is our friend.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">ordered_dat <span class="ot" style="color: #00769E;">&lt;-</span> dat_with_summary <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #677623;">type =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #677623;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>)),</span>
<span id="cb7-4">    <span class="at" style="color: #677623;">id =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(id, percent, <span class="at" style="color: #677623;">.desc =</span> T)</span>
<span id="cb7-5">  ) </span>
<span id="cb7-6"></span>
<span id="cb7-7">ordered_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> percent, <span class="at" style="color: #677623;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb7-10">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">group =</span> type),</span>
<span id="cb7-11">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb7-12">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="highlight-your-story-points" class="level2">
<h2 class="anchored" data-anchor-id="highlight-your-story-points">Highlight your story points</h2>
<p>Next, it’s time to highlight your story points. This can be done with the <code>gghighlight</code> as I have demonstrated <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/#emphasize-just-one-or-a-few-categories">in another blog post</a>. Alternatively, we can set the colors manually. The latter approach gave me the best results in this case, so we’ll go with that. But I am still a big fan of <code>gghighlight</code>, so don’t discard its power just yet.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Set colors as variable for easy change later</span></span>
<span id="cb8-2">unhighlighted_color <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'grey80'</span></span>
<span id="cb8-3">highlighted_color <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'#E69F00'</span></span>
<span id="cb8-4">avg_error <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb8-5">avg_rest <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Compute new column with colors of each bar</span></span>
<span id="cb8-8">colored_dat <span class="ot" style="color: #00769E;">&lt;-</span> ordered_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb8-10">    <span class="at" style="color: #677623;">custom_colors =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb8-11">      id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'ALL'</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'error'</span> <span class="sc" style="color: #5E5E5E;">~</span> avg_error,</span>
<span id="cb8-12">      id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'ALL'</span> <span class="sc" style="color: #5E5E5E;">~</span> avg_rest,</span>
<span id="cb8-13">      type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'error'</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> percent <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">~</span> highlighted_color,</span>
<span id="cb8-14">      T <span class="sc" style="color: #5E5E5E;">~</span>  unhighlighted_color</span>
<span id="cb8-15">    )</span>
<span id="cb8-16">  )</span>
<span id="cb8-17"></span>
<span id="cb8-18">p <span class="ot" style="color: #00769E;">&lt;-</span> colored_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-19">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> percent, <span class="at" style="color: #677623;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-20">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb8-21">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">group =</span> type),</span>
<span id="cb8-22">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb8-23">    <span class="at" style="color: #677623;">fill =</span> colored_dat<span class="sc" style="color: #5E5E5E;">$</span>custom_colors <span class="co" style="color: #5E5E5E;"># Set colors manually</span></span>
<span id="cb8-24">  )</span>
<span id="cb8-25">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice how your eyes are immediately drawn to the intended region. That’s the power of colors! Also, note that setting the colors manually like this worked because <code>fill</code> in <code>geom_col()</code> is vectorized. This is not always the case. In these instances, you may find that <a href="https://albert-rapp.de/post/2022-03-25-functional-programming-when-geoms-are-not-vectorized/">functional programming solves your problem</a>.</p>
</section>
<section id="remove-axes-expansion-and-allow-drawing-outside-of-grid" class="level2">
<h2 class="anchored" data-anchor-id="remove-axes-expansion-and-allow-drawing-outside-of-grid">Remove axes expansion and allow drawing outside of grid</h2>
<p>Did you notice that there is still some clutter in the plot? Removing clutter from a plot is a central element of the SWD look. Personally, I like this approach. So, let’s get down to the essentials and remove what does not need to be there. In this case, there are still (faint) horizontal lines behind each bar. Furthermore, this causes the warehouse IDs to be slightly removed from the bars. We change that through formatting the coordinate system with <code>coord_cartesian()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb9-4">    <span class="at" style="color: #677623;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">20.5</span>), </span>
<span id="cb9-5">    <span class="at" style="color: #677623;">expand =</span> F, <span class="co" style="color: #5E5E5E;"># removes white spaces at edge of plot</span></span>
<span id="cb9-6">    <span class="at" style="color: #677623;">clip =</span> <span class="st" style="color: #20794D;">'off'</span> <span class="co" style="color: #5E5E5E;"># allows drawing outside of panel</span></span>
<span id="cb9-7">  )</span>
<span id="cb9-8">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here, we turned off the expansion to avoid wasting white space. Now, the IDs are at their designated place and we do not see lines from their names to the bars anymore. If you want even more power on the space expansion you can leave <code>expand = T</code> and modify the expansion for each axis with <code>scale_*_continuous()</code> and the <code>expansion()</code> function. Check out <a href="https://twitter.com/ChBurkhart/status/1492087527511052290/photo/1">Christian Burkhart’s neat cheatsheet</a> that teaches you everything you need to understand expansions.</p>
<p>On an unrelated note, you may wonder why I set <code>clip = 'off'</code>. This little secret will be revealed soon. For now, just know that it allows you to draw geoms outside the regular panel.</p>
</section>
<section id="move-and-format-axes" class="level2">
<h2 class="anchored" data-anchor-id="move-and-format-axes">Move and format axes</h2>
<p>You may have noticed that the x-axis in the finished plot is at the top of the panel rather than at the bottom. While that is unusual, it helps the reader to get straight to the point as the data is in view earlier. This assumes that the eyes of a typical dataviz reader will first look at the top left corner and then zigzag downwards.</p>
<p>In <code>ggplot2</code>, moving the axes and setting the break points happens in a scale layer. It is here where we use the <code>scales::percent()</code> function to transform the axes labels. Additionally, changing labels happens in <code>labs()</code> and the remaining axes and text changes happen in <code>theme()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1">unhighlighed_col_darker <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">'grey60'</span></span>
<span id="cb10-2">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(</span>
<span id="cb10-4">    <span class="at" style="color: #677623;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>),</span>
<span id="cb10-5">    <span class="at" style="color: #677623;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span>percent,</span>
<span id="cb10-6">    <span class="at" style="color: #677623;">position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb10-7">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb10-9">    <span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Accuracy rates for highest volume warehouses'</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #677623;">y =</span> <span class="st" style="color: #20794D;">'WAREHOUSE ID'</span>,</span>
<span id="cb10-11">    <span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'% OF TOTAL ORDERS FULFILLED'</span>,</span>
<span id="cb10-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb10-14">    <span class="at" style="color: #677623;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #677623;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-15">    <span class="at" style="color: #677623;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #677623;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-16">    <span class="at" style="color: #677623;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-17">    <span class="at" style="color: #677623;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-18">    <span class="at" style="color: #677623;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">colour =</span> <span class="st" style="color: #20794D;">'black'</span>)</span>
<span id="cb10-19">  )</span>
<span id="cb10-20">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that we have customized the theme elements via <code>element_*()</code> functions. Basically, each geom type like “line”, “rect”, “text”, etc. has their own <code>element_*()</code> function. The <code>theme()</code> function expects attributes to be changed using these. If you are unfamiliar with this concept, maybe the corresponding part in my <a href="https://yards.albert-rapp.de/statquant#themes">YARDS lecture notes</a> will help you.</p>
</section>
<section id="align-labels" class="level2">
<h2 class="anchored" data-anchor-id="align-labels">Align labels</h2>
<p>Aligning plot elements, e.g.&nbsp;labels, to form clean lines is another major aspect of the SWD look. Before I read about it, I did not even notice it but once you see it you cannot go back. Basically, plots feel “more harmonious” if there are clear (not necessarily drawn) lines like with the left and right edge of the stacked bars. But this concept does not stop with the bars and can be used for the labels too. Let’s demonstrate that by moving the labels with more of <code>theme()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #677623;">axis.title.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb11-4">    <span class="at" style="color: #677623;">axis.title.y =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb11-5">    <span class="at" style="color: #677623;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span></span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;"># aligns the title to the whole plot and not the (inner) panel</span></span>
<span id="cb11-7">  )</span>
<span id="cb11-8">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Once again, the design enforces that important information like what’s on an axis is in the top left corner. This was done by changing <code>hjust</code>. In this case <code>hjust = 0</code> corresponds to left-justified whereas <code>hjust = 1</code> corresponds to right-justified. Of course, <code>vjust</code> works similarly. For more details w.r.t. <code>hjust</code> and <code>vjust</code>, check out <a href="https://stackoverflow.com/questions/7263849/what-do-hjust-and-vjust-do-when-making-a-plot-using-ggplot">this stackoverflow answer</a> that gives you everything that you need in one visual. For your convenience, here is a slightly changed form of that visual.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But once you start aligning the axes titles, you notice that the 0% and 100% labels fall outside the grid. We could try to set <code>hjust</code> of <code>axis.text.x</code> in <code>theme()</code> but sadly this is not vectorized. Subsequently, all <code>hjust</code> values must be the same. That’s not bueno. Therefore, I drew the axes labels manually with <code>annotate()</code> but make sure that you remove the current labels in <code>scale_x_continuous()</code>. Also, now you know why we had to set <code>clip = 'off'</code> earlier. The axes labels are outside of the regular panel.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;"># Overwriting previous scale will generate a warning but that's ok</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(</span>
<span id="cb12-4">    <span class="at" style="color: #677623;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>), <span class="co" style="color: #5E5E5E;"># We still want the axes ticks</span></span>
<span id="cb12-5">    <span class="at" style="color: #677623;">labels =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">''</span>, <span class="dv" style="color: #AD0000;">6</span>), <span class="co" style="color: #5E5E5E;"># Empty strings as labels</span></span>
<span id="cb12-6">    <span class="at" style="color: #677623;">position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb12-7">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb12-9">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb12-10">    <span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>),</span>
<span id="cb12-11">    <span class="at" style="color: #677623;">y =</span> <span class="fl" style="color: #AD0000;">20.75</span>,</span>
<span id="cb12-12">    <span class="at" style="color: #677623;">label =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>), <span class="at" style="color: #677623;">accuracy =</span> <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb12-13">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb12-14">    <span class="at" style="color: #677623;">hjust =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fu" style="color: #4758AB;">rep</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">4</span>), <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb12-15">    <span class="co" style="color: #5E5E5E;"># individual hjust here</span></span>
<span id="cb12-16">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb12-17">    <span class="at" style="color: #677623;">col =</span> unhighlighed_col_darker</span>
<span id="cb12-18">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-19">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb12-20">    <span class="at" style="color: #677623;">axis.title.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;"># change vjust to avoid overplotting</span></span>
<span id="cb12-22">  )</span>
<span id="cb12-23">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-text-labels" class="level2">
<h2 class="anchored" data-anchor-id="add-text-labels">Add text labels</h2>
<p>The same trick can be used to add the category description (accuracy, null, error) to the right top corner and label the highlighted bars. For the latter part, we simply extract the corresponding rows from our data and use that in conjunction with <code>geom_text()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1">text_labels <span class="ot" style="color: #00769E;">&lt;-</span> colored_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'error'</span>, percent <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">percent =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(percent, <span class="at" style="color: #677623;">accuracy =</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb13-4"></span>
<span id="cb13-5">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb13-7">    <span class="at" style="color: #677623;">data =</span> text_labels, </span>
<span id="cb13-8">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">label =</span> percent), </span>
<span id="cb13-9">    <span class="at" style="color: #677623;">hjust =</span> <span class="fl" style="color: #AD0000;">1.1</span>,</span>
<span id="cb13-10">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb13-11">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb13-12">  )</span>
<span id="cb13-13">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that I used a <code>hjust</code> value greater than 1 here to add some white space on the right side of the labels. Otherwise, the percent sign will be too close to the bar’s edge.</p>
<p>Next, we add the category descriptions. This is a bit more tricky, though, because we want to highlight a word too, So, we will add a <code>richtext</code> as described <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/#label-directly">in my previous blog post</a>.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb14-2">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb14-4">    <span class="st" style="color: #20794D;">'richtext'</span>,</span>
<span id="cb14-5">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb14-6">    <span class="at" style="color: #677623;">y =</span> <span class="fl" style="color: #AD0000;">21.25</span>,</span>
<span id="cb14-7">    <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">"ACCURATE | NULL | &lt;span style = 'color:#E69F00'&gt;ERROR&lt;/span&gt;"</span>,</span>
<span id="cb14-8">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb14-9">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb14-10">    <span class="at" style="color: #677623;">col =</span> unhighlighed_col_darker, </span>
<span id="cb14-11">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb14-12">    <span class="at" style="color: #677623;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>,</span>
<span id="cb14-13">    <span class="at" style="color: #677623;">fill =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb14-14">  )</span>
<span id="cb14-15">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-story-text" class="level2">
<h2 class="anchored" data-anchor-id="add-story-text">Add story text</h2>
<p>Now that the bar plot is finished we can work on the story text. For that, we create another plot that contains only the text. Later on, we will combine both of our plots with the <code>patchwork</code> package. There are no really knew techniques here, so let’s get straight to the code.</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Save text data in a tibble</span></span>
<span id="cb15-2">tib_summary_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-3">  <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb15-4">  <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">1.65</span>, <span class="fl" style="color: #AD0000;">0.5</span>), </span>
<span id="cb15-5">  <span class="at" style="color: #677623;">label =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"&lt;span style = 'color:grey60'&gt;OVERALL:&lt;/span&gt; **The error rate is 10% across all&lt;br&gt;66 warehouses**. &lt;span style = 'color:grey60'&gt;The good news is that&lt;br&gt;the accuracy rate is 85% so we</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">re hitting&lt;br&gt;the mark in nearly all our centers due to&lt;br&gt;the quality initiatives implemented last year.&lt;/span&gt;"</span>,</span>
<span id="cb15-6">  <span class="st" style="color: #20794D;">"&lt;span style = 'color:#E69F00'&gt;OPPORTUNITY TO IMPROVE:&lt;/span&gt; &lt;span style = 'color:grey60'&gt;10 centers&lt;br&gt;have higher than average error rates of&lt;br&gt;10%-16%.&lt;/span&gt; &lt;span style = 'color:#E69F00'&gt;We recommend investigating&lt;br&gt;specific details and **scheduling meetings&lt;br&gt;with operations managers to&lt;br&gt;determine what's driving this.**&lt;/span&gt;"</span></span>
<span id="cb15-7">  )</span>
<span id="cb15-8">)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;"># Create text plot with geom_richtext() and theme_void()</span></span>
<span id="cb15-11">text_plot <span class="ot" style="color: #00769E;">&lt;-</span> tib_summary_text <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-12">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(</span>
<span id="cb15-14">    <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #677623;">label =</span> label),</span>
<span id="cb15-15">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb15-16">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb15-17">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb15-18">    <span class="at" style="color: #677623;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb15-19">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-20">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #677623;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #677623;">clip =</span> <span class="st" style="color: #20794D;">'off'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-21">  <span class="co" style="color: #5E5E5E;"># clip = 'off' is important for putting it together later.</span></span>
<span id="cb15-22">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb15-23">text_plot</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="add-main-message-as-new-title-and-subtitle" class="level2">
<h2 class="anchored" data-anchor-id="add-main-message-as-new-title-and-subtitle">Add main message as new title and subtitle</h2>
<p>As I said before, we will put the two plots together with <code>patchwork</code>. If you have never dealt with <code>patchwork</code>, feel free to check out my short <a href="https://albert-rapp.de/post/2021-10-28-extend-plot-variety/">intro to patchwork</a>. Putting the plots together gives us another opportunity: We can now set additional titles and subtitles of the <strong>whole</strong> plot. Use these to add the main message of your plot.</p>
<p>But make sure that there is enough white space around them by setting the title margins in <code>theme()</code>. Otherwise, your plot will feel “too full”. Adding spacing is achieved through a <code>margin()</code> function in <code>element_text()</code>. Though, in this case we use <code>element_markdown()</code> which works exactly the same but enables <a href="https://www.markdownguide.org/basic-syntax/">Markdown syntax</a> like using asterisks for bold texts.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Save texts as variables for better code legibility</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># Here I used Markdown syntax</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># To enable its rendering, use element_markdown() in theme</span></span>
<span id="cb16-4">title_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">"**Action needed:** 10 warehouses have &lt;span style = 'color:#E69F00'&gt;high error rates&lt;/span&gt;"</span></span>
<span id="cb16-5">subtitle_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">"&lt;span style = 'color:#E69F00'&gt;DISCUSS:&lt;/span&gt; what are &lt;span style = 'color:#E69F00'&gt;**next steps to improve errors**&lt;/span&gt; at highest volume warehouses?&lt;br&gt;&lt;span style = 'font-size:10pt;color:grey60'&gt;The subset of centers shown (19 out of 66) have the highest volume of orders fulfilled&lt;/span&gt;"</span></span>
<span id="cb16-6">caption_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="st" style="color: #20794D;">"SOURCE: ProTip Dashboard as of Q4/2021. See file xxx for additional context on remaining 47 warehouses&lt;br&gt;&lt;span style = 'font-size:6pt;color:grey60'&gt;Original: Storytelling with Data - improve this graph! exercise | {ggplot2} remake by Albert Rapp (@rappa753)."</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;"># Compose plot</span></span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb16-10">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-11">  text_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-12">  <span class="co" style="color: #5E5E5E;"># Make text plot narrower</span></span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.4</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-14">  <span class="co" style="color: #5E5E5E;"># Add main message via title and subtitle</span></span>
<span id="cb16-15">  <span class="fu" style="color: #4758AB;">plot_annotation</span>(</span>
<span id="cb16-16">    <span class="at" style="color: #677623;">title =</span> title_text,</span>
<span id="cb16-17">    <span class="at" style="color: #677623;">subtitle =</span> subtitle_text,</span>
<span id="cb16-18">    <span class="at" style="color: #677623;">caption =</span> caption_text,</span>
<span id="cb16-19">    <span class="at" style="color: #677623;">theme =</span> <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb16-20">      <span class="at" style="color: #677623;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(</span>
<span id="cb16-21">        <span class="at" style="color: #677623;">margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #677623;">b =</span> <span class="fl" style="color: #AD0000;">0.4</span>, <span class="at" style="color: #677623;">unit =</span> <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb16-22">        <span class="co" style="color: #5E5E5E;"># 0.4cm margin at bottom of title</span></span>
<span id="cb16-23">        <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">16</span></span>
<span id="cb16-24">      ),</span>
<span id="cb16-25">      <span class="at" style="color: #677623;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(</span>
<span id="cb16-26">        <span class="at" style="color: #677623;">margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #677623;">b =</span> <span class="fl" style="color: #AD0000;">0.4</span>, <span class="at" style="color: #677623;">unit =</span> <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb16-27">        <span class="co" style="color: #5E5E5E;"># 0.4cm margin at bottom of title</span></span>
<span id="cb16-28">        <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">11.5</span></span>
<span id="cb16-29">      ),</span>
<span id="cb16-30">      <span class="at" style="color: #677623;">plot.caption.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb16-31">      <span class="at" style="color: #677623;">plot.caption =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(</span>
<span id="cb16-32">        <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb16-33">        <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">7</span>, </span>
<span id="cb16-34">        <span class="at" style="color: #677623;">colour =</span> unhighlighed_col_darker, </span>
<span id="cb16-35">        <span class="at" style="color: #677623;">lineheight =</span> <span class="fl" style="color: #AD0000;">1.25</span></span>
<span id="cb16-36">      ),</span>
<span id="cb16-37">      <span class="at" style="color: #677623;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="at" style="color: #677623;">colour =</span> <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb16-38">      <span class="co" style="color: #5E5E5E;"># This is only a trick to make sure that background really is white</span></span>
<span id="cb16-39">      <span class="co" style="color: #5E5E5E;"># Otherwise, some browsers or photo apps will apply a dark mode</span></span>
<span id="cb16-40">    )</span>
<span id="cb16-41">  ) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/final.png" class="img-fluid" width="944"></p>
</div>
</div>
</section>
<section id="get-the-sizes-right" class="level2">
<h2 class="anchored" data-anchor-id="get-the-sizes-right">Get the sizes right</h2>
<p>In the last plot, I cheated. I gave you the correct code I used to generate the picture. But I did not execute it. Instead, I only displayed the code and then showed you the (imported) picture from the start of this blog post. Why did I do this? Because getting the sizes right sucks!</p>
<p>If you have dealt with ggplot enough, then you will know that text sizes are often set in absolute rather than in relative terms. Therefore, if you make the bar plot smaller in width (like we did), then the bars may be appropriately scaled to the new width but, more often than not, the texts are not. In this case, this led to way too large fonts as beautifully demonstrated in <a href="https://www.christophenicault.com/post/understand_size_dimension_ggplot2/">Christophe Nicault’s helpful blog post</a>.</p>
<p>So, how do you avoid this? First off, choose size and <a href="https://albert-rapp.de/post/2022-03-04-fonts-and-icons/">fonts</a> last (choose the font first, though). This will save you a lot of repetitive work when you change the alignment in your plot. But this tip will only get you so far, because you have to fix some sizes in between to get a feeling for the visualization you are trying to create.</p>
<p>Therefore, try to get you canvas into an appropriate size first. I try to do this by using the <code>camcorder</code> package at the start of my visualization process. This will ensure that my plots are saved as a png-file with predetermined dimensions and the resulting file is displayed in the Viewer pane in RStudio (as opposed to the Plots pane).</p>
<p>For example, at the start of working on this visualization I have called</p>
<div class="cell">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">camcorder<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gg_record</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #677623;">dir =</span> <span class="st" style="color: #20794D;">'img'</span>, <span class="at" style="color: #677623;">dpi =</span> <span class="dv" style="color: #AD0000;">300</span>, <span class="at" style="color: #677623;">width =</span> <span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #677623;">height =</span> <span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #677623;">units =</span> <span class="st" style="color: #20794D;">'cm'</span></span>
<span id="cb17-3">)</span></code></pre></div>
</div>
<p>This made getting the sizes right for my final output somewhat easier because the canvas size remains the same throughout the process. Though be sure to call <code>gg_record()</code> <strong>after</strong> <code>library(ggtext)</code> or make sure that you call <code>gg_record()</code> again if you add <code>ggtext</code> only later. Otherwise, your plots will revert back to being displayed in the Plots pane (with relative sizing). Finally, if you want to use <code>camcorder</code> in conjunction with <code>showtext</code>, then be sure that <code>showtext</code> will know what dpi value you chose when calling <code>gg_record()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb18-1">showtext<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">showtext_opts</span>(<span class="at" style="color: #677623;">dpi =</span> <span class="dv" style="color: #AD0000;">300</span>)</span></code></pre></div>
</div>
<p>Alright, that concludes this somewhat long blog post. I hope that you enjoyed it and learned something valuable. If you did, feel free to leave a comment. Also, you can stay in touch with my work by subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a> or following me on <a href="https://twitter.com/rappa753">Twitter</a>.</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html</guid>
  <pubDate>Tue, 29 Mar 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use functional programming for ggplot</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot.html</link>
  <description><![CDATA[ 


<div class="cell">

</div>
<p>A couple of weeks back, I recreated an info graphic with <code>ggplot2</code>. The result and the whole story is embedded in this thread on Twitter:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
The fun thing about getting better at <a href="https://twitter.com/hashtag/ggplot2?src=hash&amp;ref_src=twsrc%5Etfw">#ggplot2</a> is that you begin to mimick other <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a>.<br><br>Here is a practice <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> info graphic I created after seeing a similar infographic from <a href="https://twitter.com/EatSmarter_de?ref_src=twsrc%5Etfw"><span class="citation" data-cites="EatSmarter_de">@EatSmarter_de</span></a> <br><br>Original graphic, making of, comments and some ressources below ⬇️🧵 <a href="https://t.co/FslScy9sc7">pic.twitter.com/FslScy9sc7</a>
</p>
— Albert Rapp (<span class="citation" data-cites="rappa753">@rappa753</span>) <a href="https://twitter.com/rappa753/status/1500213701370171392?ref_src=twsrc%5Etfw">March 5, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Aside from the embarrasing typo in “What you should <strong>know</strong>…”, I picked up a useful technique for what do when I want aesthetics to vary within a geom. Sounds complicated? Let’s take a look at a couple of examples.</p>
<section id="how-do-i-manually-set-aesthetics-with-aes-and-scale__identity" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-manually-set-aesthetics-with-aes-and-scale__identity">How do I manually set aesthetics with aes() and scale_*_identity()?</h2>
<p>This one is the easy case when all geoms behave properly.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_minimal</span>())</span>
<span id="cb1-3">tib <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb1-4">  <span class="sc" style="color: #5E5E5E;">~</span>x, <span class="sc" style="color: #5E5E5E;">~</span>xend, <span class="sc" style="color: #5E5E5E;">~</span>y, <span class="sc" style="color: #5E5E5E;">~</span>yend, <span class="sc" style="color: #5E5E5E;">~</span>size_col,</span>
<span id="cb1-5">  <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-6">  <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">xend =</span> xend, <span class="at" style="color: #677623;">y =</span> y, <span class="at" style="color: #677623;">yend =</span> yend, <span class="at" style="color: #677623;">size =</span> size_col)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">scale_size_identity</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that</p>
<ul>
<li>the sizes were determined in the <code>size_col</code> column of <code>tib</code>.</li>
<li>sizes were mapped to the aesthethic via <code>aes()</code>.</li>
<li>the <code>scale_size_identity()</code> layer makes sure that the sizes are not assigned by ggplot but taken as given (identity scale layers are available for other aesthetics as well).</li>
</ul>
</section>
<section id="how-do-i-manually-set-aesthetics-without-aes" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-manually-set-aesthetics-without-aes">How do I manually set aesthetics without aes()?</h2>
<p>The last example used <code>aes()</code> to access <code>size_col</code> from <code>tib</code>. However, we then had to make sure that ggplot does not assign sizes based on unique values in <code>size_col</code>. Instead, sizes were supposed to be taken as is. This was the job of <code>scale_size_identity()</code>. Let’s make it work without it.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">xend =</span> xend, <span class="at" style="color: #677623;">y =</span> y, <span class="at" style="color: #677623;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, <span class="at" style="color: #677623;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col) </span></code></pre></div>
</div>
<p>This will generate the exact same plot as before (which is why I suppressed the output). In this case, we mapped the sizes manually by assigning a vector of sizes to the <code>size</code> aesthetic within <code>geom_segment()</code> but <strong>outside</strong> <code>aes()</code>.</p>
<p>Of course, now we cannot simply write <code>size = size_col</code> because <code>geom_segment()</code> won’t know that variable. Before, <code>aes()</code> let ggplot know that we mean <code>size_col</code> from the data set <code>tib</code>. Now, we have to pass the vector by accessing it from <code>tib</code> ourself through <code>tib$size_col</code>.</p>
</section>
<section id="how-do-i-manually-set-aesthethics-when-the-previous-approaches-do-not-work" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-manually-set-aesthethics-when-the-previous-approaches-do-not-work">How do I manually set aesthethics when the previous approaches do not work?</h2>
<p>Finally, let’s switch from <code>geom_segment()</code> to <code>geom_curve()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">xend =</span> xend, <span class="at" style="color: #677623;">y =</span> y, <span class="at" style="color: #677623;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, <span class="at" style="color: #677623;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col, <span class="at" style="color: #677623;">curvature =</span> <span class="fl" style="color: #AD0000;">0.6</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This changes our straight lines from before to curved lines. What’s more, I can control how strong the curvature is supposed to be via <code>curvature</code>. But as it is right now, both of our differently-sized curves have the same level of curvature.</p>
<p>Maybe, this ought to be different. Maybe, not all curves are made the same. Maybe, our visualization should reflect the diversity of all the curves out there in this gigantic world we inhabit. All curves are beautiful!</p>
<p>Let’s make this happen as we did before.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">xend =</span> xend, <span class="at" style="color: #677623;">y =</span> y, <span class="at" style="color: #677623;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb4-5">    <span class="at" style="color: #677623;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col, </span>
<span id="cb4-6">    <span class="at" style="color: #677623;">curvature =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.6</span>) <span class="co" style="color: #5E5E5E;"># two curves, two different curvatures</span></span>
<span id="cb4-7">  ) </span></code></pre></div>
<div class="cell-output-error">
<pre><code>Error in if (curvature == 0) {: the condition has length &gt; 1</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Oh no! It seems as if <code>geom_curve()</code> expects the argument of <code>curvature</code> to be a single number. Maybe <code>aes()</code> then?</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">xend =</span> xend, <span class="at" style="color: #677623;">y =</span> y, <span class="at" style="color: #677623;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">curvature =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.6</span>)),</span>
<span id="cb6-5">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb6-6">    <span class="at" style="color: #677623;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col </span>
<span id="cb6-7">  ) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Well, at least this time we can see curves. Unfortunately, the warning let’s us know that <code>curvature</code> is an unknown aesthetic which will be ignored. As you can see, this results in the same curvature for both curves again.</p>
<p>So, it looks like we can only hope to set each curvature separately. ::: {.cell}</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> x, <span class="at" style="color: #677623;">xend =</span> xend, <span class="at" style="color: #677623;">y =</span> y, <span class="at" style="color: #677623;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">slice</span>(tib, <span class="dv" style="color: #AD0000;">1</span>), <span class="co" style="color: #5E5E5E;"># first row of tib</span></span>
<span id="cb7-4">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb7-5">    <span class="at" style="color: #677623;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col[<span class="dv" style="color: #AD0000;">1</span>], <span class="co" style="color: #5E5E5E;"># one size only</span></span>
<span id="cb7-6">    <span class="at" style="color: #677623;">curvature =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb7-7">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb7-9">    <span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">slice</span>(tib, <span class="dv" style="color: #AD0000;">2</span>), <span class="co" style="color: #5E5E5E;"># second row of tib</span></span>
<span id="cb7-10">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb7-11">    <span class="at" style="color: #677623;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col[<span class="dv" style="color: #AD0000;">2</span>], <span class="co" style="color: #5E5E5E;"># other size</span></span>
<span id="cb7-12">    <span class="at" style="color: #677623;">curvature =</span> <span class="fl" style="color: #AD0000;">0.6</span></span>
<span id="cb7-13">  ) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
<p>:::</p>
<p>Alright, this time we got what we wanted. That’s something at least. Honestly, our “solution” is not scalable though. What if we want to draw hundreds of curves?</p>
<p>In fact, this is what slowed me down when I created the info graphic that started this blog post. The text boxes were not vectorized so I would have to place each text box manually. That’s a lot of text boxes and I was having none of that.</p>
<p>So, here is where functional programming stepped in. Let’s recreate what I did based on our curve example. First, we extend <code>tib</code> with another curvature column.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">tib <span class="ot" style="color: #00769E;">&lt;-</span> tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">curvature =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.6</span>))</span>
<span id="cb8-2">tib</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 2 × 6
      x  xend     y  yend size_col curvature
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;
1     0     1     0     1        1      -0.3
2     1     2     1     1        5       0.6</code></pre>
</div>
</div>
<p>Then, we use <code>pmap()</code> to create a <strong>list of curve layers</strong>. If you have not used any functional programming before, checkout my <a href="https://yards.albert-rapp.de/lm-with-lists.html">YARDS lecture notes</a> on that topic. Basically, what we will do is to apply the <code>geom_curve()</code> function to each row of the <code>tib</code> data. Via <code>~</code> (in front of the function) and <code>..1</code>, <code>..2</code>, etc. we can then say where to stick in the values from each of <code>tib</code>’s columns.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1">curve_layers <span class="ot" style="color: #00769E;">&lt;-</span> tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">pmap</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #677623;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> ..<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">xend =</span> ..<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">y =</span> ..<span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #677623;">yend =</span> ..<span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb10-4">    <span class="at" style="color: #677623;">size =</span> ..<span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb10-5">    <span class="at" style="color: #677623;">curvature =</span> ..<span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb10-6">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span></span>
<span id="cb10-7">  ))</span>
<span id="cb10-8">curve_layers</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[[1]]
mapping: x = 0, y = 0, xend = 1, yend = 1 
geom_curve: arrow = NULL, arrow.fill = NULL, curvature = -0.3, angle = 90, ncp = 5, lineend = butt, na.rm = FALSE
stat_identity: na.rm = FALSE
position_identity 

[[2]]
mapping: x = 1, y = 1, xend = 2, yend = 1 
geom_curve: arrow = NULL, arrow.fill = NULL, curvature = 0.6, angle = 90, ncp = 5, lineend = butt, na.rm = FALSE
stat_identity: na.rm = FALSE
position_identity </code></pre>
</div>
</div>
<p>Here, we have set the first column of <code>tib</code> (<code>x</code>) to the <code>x</code>-aesthetic within aes. Then, we proceeded similarly for all other columns. This resulted in a list of curve layers.</p>
<p>These are useless without a <code>ggplot()</code> head. So, let’s complete the plot.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  curve_layers </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Damn, these are some nice functionally created curves. Now, let’s put our new technique to a test. Can it handle arbitrarily many curves?</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1">n_curves <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb13-2">curve_layers <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-4">    <span class="at" style="color: #677623;">xend =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-5">    <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-6">    <span class="at" style="color: #677623;">yend =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-7">    <span class="at" style="color: #677623;">size =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>), </span>
<span id="cb13-8">    <span class="at" style="color: #677623;">curvature =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves, <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-9">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">pmap</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb13-11">    <span class="at" style="color: #677623;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> ..<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">xend =</span> ..<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">y =</span> ..<span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #677623;">yend =</span> ..<span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb13-12">    <span class="at" style="color: #677623;">size =</span> ..<span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb13-13">    <span class="at" style="color: #677623;">curvature =</span> ..<span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb13-14">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span></span>
<span id="cb13-15">  ))</span>
<span id="cb13-16"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> curve_layers</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Congratulations! We have successfully created drawings of a toddler. And the even better news is that we can draw as many curves as we want.</p>
<p>Surprisingly, before I started this blog post, I was not aware that you can simply add lists to <code>ggplot()</code> and it works. As you will see in the Twitter thread on top of this post, I initially thought that one had to combine the list with more functional programming like so.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1">combine_gg_elements <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(...) {</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">Reduce</span>(<span class="st" style="color: #20794D;">`</span><span class="at" style="color: #677623;">+</span><span class="st" style="color: #20794D;">`</span>, <span class="fu" style="color: #4758AB;">list</span>(...))</span>
<span id="cb14-3">}</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;">combine_gg_elements</span>(<span class="fu" style="color: #4758AB;">ggplot</span>(), curve_layers)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This was something I picked up from Hadley Wickham’s <a href="https://ggplot2-book.org/programming.html#functional-programming">ggplot2 book</a> but it seems that we don’t need that anymore (the combine function, the book is still a great ressource). But I leave this here for completeness’ sake. Once again, writing a blog post has taught me stuff I thought I already knew. If you want to watch me learn more stuff or want to learn more ggplot things yourself, feel free to subscribe to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a> or follow me on <a href="https://twitter.com/rappa753">Twitter</a>.</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <category>Functional Programming</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot.html</guid>
  <pubDate>Fri, 25 Mar 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use Fonts and Icons in ggplot</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons.html</link>
  <description><![CDATA[ 


<p>For some reason, using other than the default font in plots has been a major problem for me in R. Supposedly, one can use the <code>extrafont</code> package to manage all of that but I found it too cumbersome. Instead, I found out that the <code>showtext</code> package can make my life easier.</p>
<p>Even though working with text in plot is not yet completely free of troubles, <code>showtext</code> has made many things easier. Now, I can finally choose fonts freely and even use icons. This blogposts gives you a how-to so that you can do that too.</p>
<section id="import-and-use-fonts-with-showtext" class="level2">
<h2 class="anchored" data-anchor-id="import-and-use-fonts-with-showtext">Import and Use Fonts with showtext</h2>
<p>A great source for fonts is <a href="https://fonts.google.com/">Google’s font page</a>. What is great abut this page is that it can display texts in many different fonts.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/google-fonts.png" class="img-fluid figure-img" width="608"></p>
<p></p><p></p>
</figure>
</div>
</div>
</div>
<p>Once we found a nice font, we can use its name to make it available within R. This is done with <code>showtext</code>’s helpful <code>font_add_google()</code> function. Let’s import a couple of random fonts.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Packages that we will use in this post</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(gghighlight)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Import fonts</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># First argument = google name, </span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;"># Secont name = font name in R</span></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Lora'</span>, <span class="st" style="color: #20794D;">'lora'</span>)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Lobster'</span>, <span class="st" style="color: #20794D;">'lobster'</span>)</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Anton'</span>, <span class="st" style="color: #20794D;">'anton'</span>)</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Fira Sans'</span>, <span class="st" style="color: #20794D;">'firasans'</span>)</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Syne Mono'</span>, <span class="st" style="color: #20794D;">'syne'</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Important step to enable showtext font rendering!</span></span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span></code></pre></div>
</div>
<p>Notice that we have also used <code>showtext_auto()</code>. This is necessary for <code>showtext</code> to take over the show. Otherwise, the new fonts would not be usable. Now, let’s take a look at our new fonts.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1">tib <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #677623;">family =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'firasans'</span>, <span class="st" style="color: #20794D;">'lora'</span>, <span class="st" style="color: #20794D;">'lobster'</span>, <span class="st" style="color: #20794D;">'anton'</span>, <span class="st" style="color: #20794D;">'syne'</span>),</span>
<span id="cb2-3">  <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb2-4">  <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">length.out =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">'Showtext shows text. Wow. What an insight.'</span></span>
<span id="cb2-6">)</span>
<span id="cb2-7"></span>
<span id="cb2-8">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #677623;">label =</span> label)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="at" style="color: #677623;">family =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>family, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">13</span>, <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #677623;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>You may wonder why we have used <code>coord_cartesian()</code> here. We did this in order to ensure that the x-axis is not centered at 0 and our example texts won’t be outside of the plot. Personally, I find this somewhat tedious but this can’t be helped, I guess. With text elements we always run at the risk of writing outside of the plot area.</p>
<p>Next, let’s make our use of fonts somewhat more practical. In my <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/">last blog post</a>, I stressed the use of highlighting a few important things instead of using many colors. Combine this with direct labels instead of a legend and you get this plot I created using the Fira Sans font.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now, see what it would look like had I used the Lobster font instead.</p>
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Feels different doesn’t it? And this is still different than the Anton font.</p>
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="import-and-use-icon-fonts-with-showtext" class="level2">
<h2 class="anchored" data-anchor-id="import-and-use-icon-fonts-with-showtext">Import and Use Icon Fonts with showtext</h2>
<p>We can not only use regular text fonts but also icons with <code>showtext</code>. For example, we may want to use one of the free <a href="https://fontawesome.com/icons">Fontawesome icons</a>. To do so, download the <a href="https://fontawesome.com/download">newest version</a> and extract the .otf-files into your working directory. These contain the font information that you need. Importing these (and any other font for that matter) works with <code>font_add()</code> and the path to the .otf-files. ::: {.cell fig.showtext=‘true’}</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># First argument = name in R</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># Second argument = path to .otf-file</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">font_add</span>(<span class="st" style="color: #20794D;">'fa-reg'</span>, <span class="st" style="color: #20794D;">'fonts/Font Awesome 6 Free-Regular-400.otf'</span>)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">font_add</span>(<span class="st" style="color: #20794D;">'fa-brands'</span>, <span class="st" style="color: #20794D;">'fonts/Font Awesome 6 Brands-Regular-400.otf'</span>)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">font_add</span>(<span class="st" style="color: #20794D;">'fa-solid'</span>, <span class="st" style="color: #20794D;">'fonts/Font Awesome 6 Free-Solid-900.otf'</span>)</span></code></pre></div>
<p>:::</p>
<p>Now that we imported the fonts, we can use <code>ggtext</code>’s <code>geom_richtext()</code> and some HTML wizardry to add icons to our previously imported fonts from Google. But first, what we need is an icon’s unicode identifier? Uni-what?</p>
<p>The easiest way to find that is to stroll through the <a href="https://fontawesome.com/icons">Fontawesome icons online</a>. Then, find one that matches the font you want to use, e.g.&nbsp;free and solid. Finally, find it’s unicode character in the corresponding popup menu.</p>
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/unicode-finder.png" class="img-fluid figure-img" width="475"></p>
<p></p><p></p>
</figure>
</div>
</div>
</div>
<p>Once you got this, you can add <code>&amp;#x</code> in front of the unicode and wrap <code>&lt;span&gt;</code> tags around it. Within these tags, you will have to specify <code>font-family</code> so that the icon is rendered.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">tib <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #677623;">family =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'firasans'</span>, <span class="st" style="color: #20794D;">'lora'</span>, <span class="st" style="color: #20794D;">'lobster'</span>, <span class="st" style="color: #20794D;">'anton'</span>, <span class="st" style="color: #20794D;">'syne'</span>),</span>
<span id="cb4-3">  <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb4-4">  <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">length.out =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">"Let's talk cash &lt;span style='font-family:fa-solid'&gt;&amp;#xf651;&lt;/span&gt;"</span></span>
<span id="cb4-6">)</span>
<span id="cb4-7"></span>
<span id="cb4-8">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #677623;">label =</span> label)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(<span class="at" style="color: #677623;">family =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>family, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, <span class="at" style="color: #677623;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #677623;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">1.1</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This way, you can also use icons in scatter plots. Though, make sure to set <code>fill=NA</code> if you do not want to have white boxes around the icons.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">25</span>), <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">25</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">"&lt;span style='font-family:fa-solid;'&gt;&amp;#xf651;&lt;/span&gt;"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(<span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">12</span>, <span class="at" style="color: #677623;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #677623;">fill =</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>,) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>You will notice that using the two previous code chunks will generate a lot of warnings about “native encoding”. So far, I have always been able to ignore these without any trouble. I really don’t know why they appear. And if you know, please let me know in the comments below.</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons.html</guid>
  <pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>4 Ways to use colors in ggplot more efficiently</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html</link>
  <description><![CDATA[ 


<p>When creating a plot I frequently catch myself using way too many colors. Thus, I have to remind myself often to keep things simple. Usually, this makes a data visualization way more effective.</p>
<p>Luckily, I found a neat <a href="https://blog.datawrapper.de/10-ways-to-use-fewer-colors-in-your-data-visualizations/">datawrapper blogpost</a> by <a href="https://twitter.com/lisacmuth">Lisa Charlotte Muth</a> that shows us how to reduce the use of colors.</p>
<p>But as I was reading the blog post, I found myself wondering how some of the mentioned principles could be implemented in ggplot. Naturally, I began experimenting and created a few example plots using fewer colors. This post will show you how you can do that too.</p>
<section id="preliminaries" class="level2">
<h2 class="anchored" data-anchor-id="preliminaries">Preliminaries</h2>
<p>For completeness’ sake, let me mention the basic settings I will use for all visualizations. Honestly, if you have no idea what happens in the following code chunk, just skip it. More or less, this chunk makes sure that all plots are using <code>theme_minimal()</code> plus a small number of tweaks. These tweaks are</p>
<ul>
<li>The use of the <a href="https://fonts.google.com/specimen/Fira+Sans">Fira Sans font</a> with help from the <code>showtext</code> package.</li>
<li>The plot titles are aligned to the left, have some spacing around them and are colored using a color from the <a href="https://jfly.uni-koeln.de/color/">Okabe Ito</a> color palette. Ever since I read <a href="https://clauswilke.com/dataviz/">Fundamentals of Data Visualization by Claus Wilke</a>, I am fond of this color palette as I find the colors nice and apparently it is also color-blind safe.</li>
</ul>
<div class="cell" data-warnings="false">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">"Fira Sans"</span>, <span class="st" style="color: #20794D;">"firasans"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-5"></span>
<span id="cb1-6">theme_customs <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #677623;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">16</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #677623;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-9">  <span class="at" style="color: #677623;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb1-10">    <span class="at" style="color: #677623;">face =</span> <span class="st" style="color: #20794D;">'bold'</span>, </span>
<span id="cb1-11">    <span class="at" style="color: #677623;">colour =</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">8</span>)[<span class="dv" style="color: #AD0000;">6</span>],</span>
<span id="cb1-12">    <span class="at" style="color: #677623;">margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #677623;">t =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">r =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #677623;">b =</span> <span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #677623;">l =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #677623;">unit =</span> <span class="st" style="color: #20794D;">"mm"</span>)</span>
<span id="cb1-13">  ),</span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span> theme_customs)</span></code></pre></div>
</div>
</section>
<section id="show-shades-not-hues" class="level2">
<h2 class="anchored" data-anchor-id="show-shades-not-hues">Show shades, not hues</h2>
<p>Alright, enough with the preliminaries. Let’s count how many different car classes are represented in the <code>mpg</code> dataset from the <code>ggplot2</code> package. I am sure you have seen the data already when you read this ggplot post. So, no further comment on this data set.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1">mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> year, <span class="at" style="color: #677623;">fill =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Ugh, this is a colorful mess and sort of reminds me of the <a href="https://giphy.com/gifs/gravity-falls-i-couldnt-put-it-up-last-night---because-either-id-flip-out-and-wosNsGaxczbIA">gnome rainbow puking gif</a>. Let’s reduce the color load by sticking to only three colors. To differentiate between classes we will make some colors more transparent.</p>
<p>Thus, we need to create a new variable in our data set that lumps the classes into three groups (for the colors).</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Group classes into three groups (to reduce colors to 3)</span></span>
<span id="cb3-2">dat <span class="ot" style="color: #00769E;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #677623;">year =</span> <span class="fu" style="color: #4758AB;">factor</span>(year),</span>
<span id="cb3-5">    <span class="at" style="color: #677623;">class_group =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb3-6">      class <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'2seater'</span>, <span class="st" style="color: #20794D;">'compact'</span>, <span class="st" style="color: #20794D;">'midsize'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp1"</span>,</span>
<span id="cb3-7">      class <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'minivan'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp2"</span>,</span>
<span id="cb3-8">      T <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp3"</span></span>
<span id="cb3-9">    )</span>
<span id="cb3-10">  )</span></code></pre></div>
</div>
<p>Now that this is done, we can map <code>fill</code> to our new <code>class_group</code> variable and the regular <code>class</code> variable to <code>alpha</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">shades_plt <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> year, <span class="at" style="color: #677623;">fill =</span> class_group, <span class="at" style="color: #677623;">alpha =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb4-5">    <span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'Year'</span>,</span>
<span id="cb4-6">    <span class="at" style="color: #677623;">y =</span> <span class="st" style="color: #20794D;">'Counts'</span>,</span>
<span id="cb4-7">    <span class="at" style="color: #677623;">alpha =</span> <span class="st" style="color: #20794D;">'Class'</span>,</span>
<span id="cb4-8">    <span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Show shades, not hues'</span></span>
<span id="cb4-9">  )</span>
<span id="cb4-10">shades_plt </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>For better control of the visuals let us manually create and assign colors and the transparency levels.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Color-blind safe colors</span></span>
<span id="cb5-2">colors <span class="ot" style="color: #00769E;">&lt;-</span>  thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;"># Possible levels of transparency (one for each class)</span></span>
<span id="cb5-4">alpha_max <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-5">alpha_min <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.7</span></span>
<span id="cb5-6">alpha_vals <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">seq</span>(alpha_max, alpha_min, <span class="at" style="color: #677623;">length.out =</span> <span class="dv" style="color: #AD0000;">4</span>), </span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">seq</span>(alpha_min, alpha_max, <span class="at" style="color: #677623;">length.out =</span> <span class="dv" style="color: #AD0000;">4</span>)[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb5-9">)</span>
<span id="cb5-10">alpha_vals</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] 1.0 0.9 0.8 0.7 0.8 0.9 1.0</code></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Tweak previous plot</span></span>
<span id="cb7-2">shades_plt <span class="ot" style="color: #00769E;">&lt;-</span> shades_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #677623;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">scale_alpha_manual</span>(<span class="at" style="color: #677623;">values =</span> alpha_vals)</span>
<span id="cb7-5">shades_plt</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Next, let us consolidate the two legends into one. This can be done via <code>guides()</code>. Here, the <code>fill</code> guide will be set to <code>guide_none()</code> to get rid of the <code>class_group</code> legend.</p>
<p>Also, the <code>alpha</code> guide needs to be manually overwritten via <code>override.aes</code> in <code>guide_legend()</code> using the color codes that we saved in the vector <code>colors</code>. This way, the <code>alpha</code> legend will also depict the colors instead of only the transparency level.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">shades_plt <span class="ot" style="color: #00769E;">&lt;-</span> shades_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">guides</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #677623;">fill =</span> <span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb8-4">    <span class="at" style="color: #677623;">alpha =</span> <span class="fu" style="color: #4758AB;">guide_legend</span>(</span>
<span id="cb8-5">      <span class="at" style="color: #677623;">override.aes =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">fill =</span> colors[<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>)]</span>
<span id="cb8-6">      )</span>
<span id="cb8-7">    )</span>
<span id="cb8-8">  ) </span>
<span id="cb8-9">shades_plt</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="group-categories-together-by-color-but-keep-showing-them" class="level2">
<h2 class="anchored" data-anchor-id="group-categories-together-by-color-but-keep-showing-them">Group categories together by color, but keep showing them</h2>
<p>So, this already looks better. However, adjacent colored blocks now “merge” into each other. This can make it hard to differentiate between classes.</p>
<p>To overcome this issue, add lines between blocks. Luckily, this is spectacularly easy and done by setting the <code>color</code> aesthetic in <code>geom_bar()</code> to white. Here’s the complete code.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> year, <span class="at" style="color: #677623;">fill =</span> class_group, <span class="at" style="color: #677623;">alpha =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Add lines for distinction</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #677623;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">scale_alpha_manual</span>(<span class="at" style="color: #677623;">values =</span> alpha_vals) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">guides</span>(</span>
<span id="cb9-7">    <span class="at" style="color: #677623;">fill =</span> <span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb9-8">    <span class="at" style="color: #677623;">alpha =</span> <span class="fu" style="color: #4758AB;">guide_legend</span>(<span class="at" style="color: #677623;">override.aes =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">fill =</span> colors[<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>)]))</span>
<span id="cb9-9">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb9-11">    <span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'Year'</span>,</span>
<span id="cb9-12">    <span class="at" style="color: #677623;">y =</span> <span class="st" style="color: #20794D;">'Counts'</span>,</span>
<span id="cb9-13">    <span class="at" style="color: #677623;">alpha =</span> <span class="st" style="color: #20794D;">'Class'</span>,</span>
<span id="cb9-14">    <span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Group categories together by color, </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">but keep showing them'</span></span>
<span id="cb9-15">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="emphasize-just-one-or-a-few-categories" class="level2">
<h2 class="anchored" data-anchor-id="emphasize-just-one-or-a-few-categories">Emphasize just one or a few categories</h2>
<p>Next, let us switch tracks and look at some other kind of data. At <a href="https://ourworldindata.org/time-with-others-lifetime">Our World in Data</a> you can find a lot of interesting data sets. One of these contains survey information on who Americans spend their time with (in average minutes per day by age). If you download this data set, you can create a plot like this.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Some data wrangling</span></span>
<span id="cb10-2">time_data <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"time-spent-with-relationships-by-age-us.csv"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">rename_with</span>(</span>
<span id="cb10-4">    <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Entitity'</span>, <span class="st" style="color: #20794D;">'Code'</span>, <span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'alone'</span>, <span class="st" style="color: #20794D;">'friends'</span>, <span class="st" style="color: #20794D;">'children'</span>, <span class="st" style="color: #20794D;">'parents'</span>, </span>
<span id="cb10-5">       <span class="st" style="color: #20794D;">'partner'</span>, <span class="st" style="color: #20794D;">'coworkers'</span>)</span>
<span id="cb10-6">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #677623;">cols =</span> alone<span class="sc" style="color: #5E5E5E;">:</span>coworkers, </span>
<span id="cb10-9">    <span class="at" style="color: #677623;">names_to =</span> <span class="st" style="color: #20794D;">'person'</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #677623;">values_to =</span> <span class="st" style="color: #20794D;">'minutes'</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-12">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">80</span>) </span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;"># Color-blind safe colors</span></span>
<span id="cb10-16">colors <span class="ot" style="color: #00769E;">&lt;-</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">8</span>)[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">6</span>]</span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;"># Line plot</span></span>
<span id="cb10-19">p <span class="ot" style="color: #00769E;">&lt;-</span> time_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-20">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> age, <span class="at" style="color: #677623;">y =</span> minutes, <span class="at" style="color: #677623;">col =</span> person)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-21">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-22">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #677623;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-23">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">81</span>), <span class="at" style="color: #677623;">expand =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-24">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">minor_breaks =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-25">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'Age (in years)'</span>, <span class="at" style="color: #677623;">y =</span> <span class="st" style="color: #20794D;">'Minutes'</span>, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'Time spent'</span>)</span>
<span id="cb10-26">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Once again, we created a plot with loads of color. If this were an interactive plot where we can focus on one line at a time, this would not necessarily be a problem. However, as it is, this is a rather messy spaghetti plot and extracting meaning from it is hard.</p>
<p>But if we know what story we want to tell, then we can save this plot by emphasizing only the important parts. This is where the <code>gghighlight</code> package shines. It works by adding a <code>gghighlight()</code> layer to an existing plot with conditions for filtering. All data points that do not fulfill these conditions are greyed out.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(gghighlight)</span>
<span id="cb11-2">alone_plt <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">gghighlight</span>(person <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'alone'</span>, <span class="at" style="color: #677623;">use_direct_label =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Emphasize just one or a few categories'</span>)</span>
<span id="cb11-5">alone_plt</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Finally, we are only one text annotation away from telling a story.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1">alone_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb12-3">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb12-4">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb12-5">    <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">455</span>,</span>
<span id="cb12-6">    <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">'We spend a lot of time alone...'</span>,</span>
<span id="cb12-7">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb12-8">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb12-9">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb12-10">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb12-11">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Of course, a data set may contain multiple stories that may also need multiple highlights. No problem. With <code>gghighlight()</code> we can combine as many conditions as we like.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1">age_40_plt <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">gghighlight</span>(</span>
<span id="cb13-3">    person <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'alone'</span>, <span class="st" style="color: #20794D;">'children'</span>), </span>
<span id="cb13-4">    age <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">38</span>, </span>
<span id="cb13-5">    <span class="at" style="color: #677623;">use_direct_label =</span> F</span>
<span id="cb13-6">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #677623;">xend =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="cn" style="color: #8f5902;">Inf</span>, <span class="at" style="color: #677623;">yend =</span> <span class="dv" style="color: #AD0000;">300</span>, <span class="at" style="color: #677623;">linetype =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'grey20'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Emphasize just one or a few categories'</span>) </span>
<span id="cb13-9"></span>
<span id="cb13-10">age_40_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb13-12">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb13-13">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb13-14">    <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">403</span>,</span>
<span id="cb13-15">    <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">'Around the age of 40, we spend </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">less time with children and </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">more time alone.'</span>,</span>
<span id="cb13-16">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb13-17">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb13-18">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb13-19">    <span class="at" style="color: #677623;">lineheight =</span> <span class="fl" style="color: #AD0000;">0.85</span>,</span>
<span id="cb13-20">    <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">5.5</span></span>
<span id="cb13-21">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="label-directly" class="level2">
<h2 class="anchored" data-anchor-id="label-directly">Label directly</h2>
<p>In all previous plots, we displayed a legend at the side of the plot. However, this requires quite a large amount of space which we can save by direct labeling (either with <code>annotate()</code> for a single label or <code>geom_text()</code> for multiple labels).</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1">alone_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb14-4">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb14-5">    <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">455</span>,</span>
<span id="cb14-6">    <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">'We spend a lot of time alone...'</span>,</span>
<span id="cb14-7">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-8">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-9">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb14-10">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb14-11">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-12">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb14-13">    <span class="st" style="color: #20794D;">'text'</span>, </span>
<span id="cb14-14">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">70</span>, </span>
<span id="cb14-15">    <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">420</span>, </span>
<span id="cb14-16">    <span class="at" style="color: #677623;">label =</span> <span class="st" style="color: #20794D;">'alone'</span>,</span>
<span id="cb14-17">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-18">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-19">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">7</span>,</span>
<span id="cb14-20">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb14-21">    <span class="at" style="color: #677623;">color =</span> colors[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb14-22">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-23">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-24">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This way, we save a lot of space and can give the remaining part of the plot more room. Also, this saves the reader some cognitive effort because one does not have to switch back and forth between legend and actual plot.</p>
<p>In this particular case, there is another option for direct labelling. Notice how close the word ‘alone’ from the original text annotation is to the highlighted line anyway. Therefore, we may as well save us one additional annotation and colorize a single word in the orginal annotation.</p>
<p>To do so, the <code>ggtext</code> package and a bit of HTML magic will help us. Basically, what we need is to change the annotation from <code>text</code> geom to <code>richtext</code> geom and create a string that contains the HTML-code for colored text. Here that is <code>&lt;span style = 'color:#E69F00;'&gt;...&lt;/span&gt;</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb15-2">color_alone <span class="ot" style="color: #00769E;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb15-3">  <span class="st" style="color: #20794D;">"We spend a lot of time &lt;span style = 'color:{colors[1]};'&gt;alone&lt;/span&gt;..."</span></span>
<span id="cb15-4">)</span>
<span id="cb15-5">color_alone</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>We spend a lot of time &lt;span style = 'color:#E69F00;'&gt;alone&lt;/span&gt;...</code></pre>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">alone_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb17-4">    <span class="st" style="color: #20794D;">'richtext'</span>,</span>
<span id="cb17-5">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb17-6">    <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">400</span>,</span>
<span id="cb17-7">    <span class="at" style="color: #677623;">label =</span> color_alone,</span>
<span id="cb17-8">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb17-9">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb17-10">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb17-11">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">7</span>,</span>
<span id="cb17-12">    <span class="at" style="color: #677623;">label.color =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb17-13">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-14">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Naturally, we can do this for our second highlighted plot as well. In this case, the colored key words are not adjacent to the actual lines.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb18-1">age_40_text <span class="ot" style="color: #00769E;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb18-2">  <span class="st" style="color: #20794D;">"Around the age of 40, we spent less &lt;br&gt; time with </span></span>
<span id="cb18-3"><span class="st" style="color: #20794D;">  &lt;span style = 'color:{colors[2]};'&gt;children&lt;/span&gt; </span></span>
<span id="cb18-4"><span class="st" style="color: #20794D;">  and more &lt;br&gt; time &lt;span style = 'color:{colors[1]};'&gt;alone&lt;/span&gt;."</span></span>
<span id="cb18-5">)</span>
<span id="cb18-6"></span>
<span id="cb18-7">age_40_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-9">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb18-10">    <span class="st" style="color: #20794D;">'richtext'</span>,</span>
<span id="cb18-11">    <span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb18-12">    <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">400</span>,</span>
<span id="cb18-13">    <span class="at" style="color: #677623;">label =</span> age_40_text,</span>
<span id="cb18-14">    <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb18-15">    <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb18-16">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb18-17">    <span class="at" style="color: #677623;">lineheight =</span> <span class="fl" style="color: #AD0000;">1.25</span>,</span>
<span id="cb18-18">    <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">5.5</span>,</span>
<span id="cb18-19">    <span class="at" style="color: #677623;">label.color =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb18-20">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-21">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Consequently, the reader may have to go back and forth between text and lines again but still we used our space more efficiently. So, I will let this count as direct labeling.</p>
<p>Finally, let us come full circle and return to our initial bar plot. This one could also use some direct labels. Normally, I would simply add a <code>geom_text()</code> layer together with <code>position_stack()</code> to the initial plot as described <a href="https://albert-rapp.de/post/2021-09-11-position-adjustment/">here</a>.</p>
<p>But for some magical reason, this did not align the labels properly and it was driving me crazy. Therefore, I counted the car classes and computed the label positions manually.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb19-1">manual_counts <span class="ot" style="color: #00769E;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">count</span>(year, class) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb19-4">    <span class="at" style="color: #677623;">year =</span> <span class="fu" style="color: #4758AB;">factor</span>(year),</span>
<span id="cb19-5">    <span class="at" style="color: #677623;">class_group =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb19-6">      class <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'2seater'</span>, <span class="st" style="color: #20794D;">'compact'</span>, <span class="st" style="color: #20794D;">'midsize'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp1"</span>,</span>
<span id="cb19-7">      class <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'minivan'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp2"</span>,</span>
<span id="cb19-8">      T <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp3"</span></span>
<span id="cb19-9">    )</span>
<span id="cb19-10">  ) </span>
<span id="cb19-11"></span>
<span id="cb19-12">labels <span class="ot" style="color: #00769E;">&lt;-</span> manual_counts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-13">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">class =</span> <span class="fu" style="color: #4758AB;">factor</span>(class)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  </span>
<span id="cb19-14">  <span class="fu" style="color: #4758AB;">group_by</span>(year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-15">  <span class="fu" style="color: #4758AB;">arrange</span>(year, <span class="fu" style="color: #4758AB;">desc</span>(class)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-16">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb19-17">    <span class="at" style="color: #677623;">csum =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(n), </span>
<span id="cb19-18">    <span class="at" style="color: #677623;">n =</span> (<span class="fu" style="color: #4758AB;">lag</span>(csum, <span class="at" style="color: #677623;">default =</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">+</span> csum) <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb19-19">  )</span></code></pre></div>
</div>
<p>But once this small detour is overcome, we can label the plot in the same manner as before. Unfortunately, the <code>2seater</code> class is so small that the label wouldn’t fit into the box. Therefore, I decided to plot the label on top.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb20-1">manual_counts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> year, <span class="at" style="color: #677623;">y =</span> n, <span class="at" style="color: #677623;">fill =</span> class_group)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">alpha =</span> class), <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #677623;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;">scale_alpha_manual</span>(<span class="at" style="color: #677623;">values =</span> alpha_vals) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-6">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb20-7">    <span class="at" style="color: #677623;">x =</span> <span class="st" style="color: #20794D;">'Year'</span>,</span>
<span id="cb20-8">    <span class="at" style="color: #677623;">y =</span> <span class="st" style="color: #20794D;">'Counts'</span>,</span>
<span id="cb20-9">    <span class="at" style="color: #677623;">alpha =</span> <span class="st" style="color: #20794D;">'Class'</span>,</span>
<span id="cb20-10">    <span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span></span>
<span id="cb20-11">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-12">  <span class="co" style="color: #5E5E5E;"># Add all but one label</span></span>
<span id="cb20-13">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb20-14">    <span class="at" style="color: #677623;">data =</span> labels <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(class <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">'2seater'</span>),</span>
<span id="cb20-15">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">label =</span> class), </span>
<span id="cb20-16">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb20-17">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb20-18">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb20-19">    <span class="at" style="color: #677623;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span></span>
<span id="cb20-20">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-21">  <span class="co" style="color: #5E5E5E;"># Add 2seater label</span></span>
<span id="cb20-22">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb20-23">    <span class="at" style="color: #677623;">data =</span> labels <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(class <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'2seater'</span>),</span>
<span id="cb20-24">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">y =</span> n <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #677623;">label =</span> class), </span>
<span id="cb20-25">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'black'</span>,</span>
<span id="cb20-26">    <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb20-27">    <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb20-28">    <span class="at" style="color: #677623;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span></span>
<span id="cb20-29">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-30">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="closing-remarks" class="level2">
<h2 class="anchored" data-anchor-id="closing-remarks">Closing remarks</h2>
<p>The <a href="https://blog.datawrapper.de/10-ways-to-use-fewer-colors-in-your-data-visualizations">blog post that inspired this post</a> contains a few more tips like using other indicators than color and you should definitely check it out. Also, Lisa Muth apparently writes a book on colors in data visualizations and documents her thoughts <a href="https://datawrapper.notion.site/Color-Book-Updates-54905c2bd0bb4c6bae15d99e31a9d5c4">here</a>. If you look for more content on colors, this might be a fountain of information.</p>
<p>As for using patterns instead of colors, I recently wrote a <a href="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html">blog post</a> that leverages the <code>ggpattern</code> package to do just that. Check it out <a href="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html">here</a>. And as always, if you don’t want to miss new blog post, either follow me on <a href="https://twitter.com/rappa753">Twitter</a> or via my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>.</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html</guid>
  <pubDate>Sat, 19 Feb 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Interactive ggplots, user feedback, and a little bit of Javascript magic with Shiny</title>
  <link>https://albert-rapp.de/posts/08_drawing_ggplot_interactively/08_drawing_ggplot_interactively.html</link>
  <description><![CDATA[ 


<p>I’ve been reading <a href="https://mastering-shiny.org/">Mastering Shiny by Hadley Wickham</a> lately and one of the things that intrigued me is that you can make ggplots interactive. Though I believe that there are limitation to the level of interactiveness compared to using, say, <a href="https://albert-rapp.de/post/2021-10-16-exploratory-intro-plotly/">plotly</a>, I really wanted to practice interactive ggplots with Shiny. Naturally, I build a <a href="https://rappa.shinyapps.io/interactive-ggplot/">Shiny app</a> to figure things out. Here’s a demonstration of what the app can do. The rest of this chapter teaches you how some parts of the app were implemented.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/08_drawing_ggplot_interactively/Animation.gif" class="img-fluid"></p>
</div>
</div>
<section id="working-with-clicks" class="level2">
<h2 class="anchored" data-anchor-id="working-with-clicks">Working with clicks</h2>
<p>If you have build at least one Shiny app, then you are probably aware that you can include plots on the UI with <code>plotOutput()</code>. (If, in fact, you have never touched Shiny, then feel free to check out how I thought my students the <a href="https://yards.albert-rapp.de/shiny-applications.html">basics of Shiny</a>.) But what you may not know, is that apart from its <code>outputId</code>, <code>width</code> and <code>height</code> arguments, this output function also uses arguments like <code>click</code> and <code>dblclick</code>. These are the secrets to unlocking interactiveness.</p>
<p>Imagine that you have a user interface that includes a plot output via</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">'awesome_plot'</span>, <span class="at" style="color: #677623;">click =</span> <span class="st" style="color: #20794D;">'awesome_click'</span>)</span></code></pre></div>
</div>
<p>Now, what this small additional argument gives you is a way to access the coordinates of something the user clicks on. What you will have to do is to <a href="https://albert-rapp.de/post/2021-11-21-a-few-learnings-from-a-simple-shiny-app/#create-and-observe-buttons">observe <code>input$awesome_click</code></a>. Here’s a minimal example of how that works.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-4"></span>
<span id="cb2-5">ui <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">'awesome_plot'</span>, <span class="at" style="color: #677623;">click =</span> <span class="st" style="color: #20794D;">'awesome_click'</span>),</span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9">server <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(input, output, session) {</span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Create dummy data as reactive value</span></span>
<span id="cb2-11">  my_dat <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #677623;">y =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #677623;">msg =</span> <span class="st" style="color: #20794D;">'Click me'</span>))</span>
<span id="cb2-12">  <span class="co" style="color: #5E5E5E;"># Render plot with fixed coordinate system</span></span>
<span id="cb2-13">  output<span class="sc" style="color: #5E5E5E;">$</span>awesome_plot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> <span class="fu" style="color: #4758AB;">my_dat</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #677623;">label =</span> msg), <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #677623;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #677623;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="at" style="color: #677623;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  <span class="co" style="color: #5E5E5E;"># Update dummy data on click </span></span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;">$</span>awesome_click, {</span>
<span id="cb2-20">    <span class="fu" style="color: #4758AB;">my_dat</span>(</span>
<span id="cb2-21">      <span class="fu" style="color: #4758AB;">my_dat</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-22">        <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-23">          <span class="at" style="color: #677623;">x =</span> input<span class="sc" style="color: #5E5E5E;">$</span>awesome_click<span class="sc" style="color: #5E5E5E;">$</span>x,</span>
<span id="cb2-24">          <span class="at" style="color: #677623;">y =</span> input<span class="sc" style="color: #5E5E5E;">$</span>awesome_click<span class="sc" style="color: #5E5E5E;">$</span>y,</span>
<span id="cb2-25">          <span class="at" style="color: #677623;">msg =</span> <span class="cf" style="color: #00769E;">if</span> (<span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="st" style="color: #20794D;">'I like that. Do it again.'</span> <span class="cf" style="color: #00769E;">else</span> <span class="st" style="color: #20794D;">'Stop that!'</span></span>
<span id="cb2-26">        )</span>
<span id="cb2-27">    )</span>
<span id="cb2-28">  })</span>
<span id="cb2-29">}</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="fu" style="color: #4758AB;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>This will give us the following app.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/08_drawing_ggplot_interactively/click_animation.gif" class="img-fluid"></p>
</div>
</div>
<p>Like a cat, this app is a master of mixed signals and wants to be touched but only a random amount of times. Unlike a cat, the app will show you a plot displaying its latest message at the most recently clicked spot.</p>
<p>All of this is powered by observing changes in <code>input$awesome_click</code> and then using this list’s new x- and y-values to update the reactive value <code>my_dat</code> that underlies the plot. Notice that I have fixed the axes of the plot because otherwise the message will always be displayed in the middle of the plot. After all, the plot will be entirely rebuilt using new underlying data. Fundamentally, this is how I build the ‘color my voronoi’ from above.</p>
<p>But, of course, I have tried out more stuff like user feedback and even some javascript magic. Stick around if you want to learn these ancient skills as well. Destiny is calling.</p>
</section>
<section id="let-your-user-know-that-he-messed-up-and-stop-him-before-its-too-late" class="level2">
<h2 class="anchored" data-anchor-id="let-your-user-know-that-he-messed-up-and-stop-him-before-its-too-late">Let your user know that he messed up and stop him before it’s too late</h2>
<p>To my surprise, UI elements like <code>numericInput()</code> do not actually check that an input is valid even though there are arguments like <code>min</code> and <code>max</code>. Of course, a user may end up giving wrong inputs that your app can’t handle. We can’t have that now, can we?</p>
<p>We will need to stop that insubordinate and churlish behavior immediately. In case you recognized that combination of ‘insubordinate’ and ‘churlish’, then I will have you now, yes, this is a reference to <a href="https://www.youtube.com/watch?v=Dd7FixvoKBw">Mr.&nbsp;Garvey</a> and the rest of this section is a homage to a skit that makes me giggle every time.</p>
<p>So, let’s build an app that works as follows:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/08_drawing_ggplot_interactively/name_animation.gif" class="img-fluid"></p>
</div>
</div>
<p>The notifications in this app are all powered through the <code>shinyFeedback</code> package. In order to activate its powers, drop a <code>shinyFeedback::useShinyFeedback()</code> in the UI like so.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb3-3"></span>
<span id="cb3-4">ui <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-5">  shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">useShinyFeedback</span>(),</span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">h3</span>(<span class="st" style="color: #20794D;">'A Day with Mr. Garvey'</span>),</span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">textInput</span>(</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb3-9">    <span class="st" style="color: #20794D;">'What</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">s your name?'</span>,</span>
<span id="cb3-10">  )</span>
<span id="cb3-11">)</span></code></pre></div>
</div>
<p>Then, you are all set up to activate warnings and notifications by your <code>server</code> function. Here is a simplified version of the app’s remaining code.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">names <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Jay Quellin'</span>,<span class="st" style="color: #20794D;">'Jacqueline'</span>, <span class="st" style="color: #20794D;">'Balakay'</span>, <span class="st" style="color: #20794D;">'Blake'</span>, <span class="st" style="color: #20794D;">'Dee-nice'</span>, <span class="st" style="color: #20794D;">'Denise'</span>,</span>
<span id="cb4-2">           <span class="st" style="color: #20794D;">'Ay-Ay-Ron'</span>, <span class="st" style="color: #20794D;">'Aaron'</span>)</span>
<span id="cb4-3">return_msg <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(name) {</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb4-5">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Balakay'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'My name is Blake.'</span>,</span>
<span id="cb4-6">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Blake'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'Do you wanna go to war, Balakay? You better check yourself!'</span>,</span>
<span id="cb4-7">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Jay Quellin'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'Do you mean Jacqueline?'</span>,</span>
<span id="cb4-8">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Jacqueline'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'So that</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">s how it</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">s going to be. I got my eye on you Jay Quellin!'</span>,</span>
<span id="cb4-9">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Dee-nice'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'Do you mean Denise?'</span>,</span>
<span id="cb4-10">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Denise'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'You say your name right!'</span>,</span>
<span id="cb4-11">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Ay-Ay-Ron'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'It is pronounced Aaron.'</span>,</span>
<span id="cb4-12">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Aaron'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'You done messed up Ay-Ay-Ron!'</span></span>
<span id="cb4-13">  )</span>
<span id="cb4-14">}</span>
<span id="cb4-15"></span>
<span id="cb4-16">server <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(input, output, session) {</span>
<span id="cb4-17">  name_input <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>name) </span>
<span id="cb4-18">  <span class="fu" style="color: #4758AB;">observeEvent</span>(<span class="fu" style="color: #4758AB;">name_input</span>(), {</span>
<span id="cb4-19">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackDanger</span>(</span>
<span id="cb4-20">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb4-21">      <span class="at" style="color: #677623;">show =</span> (<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb4-22">      <span class="at" style="color: #677623;">text =</span> <span class="fu" style="color: #4758AB;">return_msg</span>(<span class="fu" style="color: #4758AB;">name_input</span>())</span>
<span id="cb4-23">    )</span>
<span id="cb4-24">    </span>
<span id="cb4-25">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackSuccess</span>(</span>
<span id="cb4-26">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb4-27">      <span class="at" style="color: #677623;">show =</span> <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb4-28">      <span class="at" style="color: #677623;">text =</span> <span class="st" style="color: #20794D;">'Thank you!'</span></span>
<span id="cb4-29">    )</span>
<span id="cb4-30">  })</span>
<span id="cb4-31">}</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="fu" style="color: #4758AB;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>As you can see, the feedback functions work with</p>
<ul>
<li>the <code>name</code> of an input,</li>
<li>a rule when to <code>show</code> up and</li>
<li>a <code>text</code> to display.</li>
</ul>
<p>This code is pretty straightforward but, unfortunately, this app does not work like the one you have seen above. There are a couple of problems:</p>
<ul>
<li>For starters, if you start the app, then the text input is empty, so <code>!(name_input() %in% names)</code> is true and the app will immediately display “Thank you!”</li>
<li>After you write a name on the list of defined names, then no warning will be displayed. That is because the later <code>feedbackSuccess()</code> will always command that there is nothing to display.</li>
</ul>
<p>Therefore, we need something that stops the <code>feedbackSuccess()</code> from executing when we don’t need it. This can be achieved through the little but powerful <code>req()</code> function. It checks that all given conditions are met or stops the execution where it is. In this case, you will need to drop <code>req(name_input(), !(name_input() %in% names))</code> in front of <code>feedbackSuccess()</code>.</p>
<p>Small technical detail: Notice that <code>name_input()</code> will be <code>''</code> in the beginning. Technically, this is not a boolean but that doesn’t matter to Shiny. What matters is that <code>''</code> is not “truthy”. See <code>?isTruthy</code> for more details.</p>
<p>Now, even with this small change. Our app won’t run smoothly because sometimes the notifaction will not change from “success” to “danger”. This is is because sometimes the notifaction needs to be reseted to work with new notifications. Therefore, a <code>hideFeedback()</code> is in order.</p>
<p>Also, if you are not fast at typing, then a notification might already show up, when you are still typing. It is rude to interrupt our kind user like this. Therefore, let’s make sure our app waits a little before giving out notifications. We can let out app wait for a defined amount of milliseconds by sending our reactive <code>name_input()</code> to <code>debounce()</code>. In total, our <code>server</code> function now looks like this.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">server <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(input, output, session) {</span>
<span id="cb5-2">  name_input <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">debounce</span>(<span class="dv" style="color: #AD0000;">250</span>)</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">observeEvent</span>(<span class="fu" style="color: #4758AB;">name_input</span>(), {</span>
<span id="cb5-4">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hideFeedback</span>(<span class="st" style="color: #20794D;">'name'</span>)</span>
<span id="cb5-5">    </span>
<span id="cb5-6">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackDanger</span>(</span>
<span id="cb5-7">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb5-8">      <span class="at" style="color: #677623;">show =</span> (<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb5-9">      <span class="at" style="color: #677623;">text =</span> <span class="fu" style="color: #4758AB;">return_msg</span>(<span class="fu" style="color: #4758AB;">name_input</span>())</span>
<span id="cb5-10">    )</span>
<span id="cb5-11">    </span>
<span id="cb5-12">    <span class="fu" style="color: #4758AB;">req</span>(<span class="fu" style="color: #4758AB;">name_input</span>(), <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names))</span>
<span id="cb5-13">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackSuccess</span>(</span>
<span id="cb5-14">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb5-15">      <span class="at" style="color: #677623;">show =</span> <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb5-16">      <span class="at" style="color: #677623;">text =</span> <span class="st" style="color: #20794D;">'Thank you!'</span></span>
<span id="cb5-17">    )</span>
<span id="cb5-18">  })</span>
<span id="cb5-19">}</span></code></pre></div>
</div>
<p>Finally, let me mention that, within the function <code>req()</code>, it is also possible to set <code>cancelOutput = TRUE</code>. This stops the code execution as usual but avoids destroying previously displayed outputs.</p>
</section>
<section id="sprinkle-some-javascript-magic-on-top-of-your-app" class="level2">
<h2 class="anchored" data-anchor-id="sprinkle-some-javascript-magic-on-top-of-your-app">Sprinkle some javascript magic on top of your app</h2>
<p>For my final trick before I disappear into the ether, let me show you a little bit of javascript. As I, myself, do not know much about JS, I am particularly proud that I included some of that web magic into my voronoi coloring app. <em>‘What did you do?’</em>, you ask? Well, did you notice that the colour dropdown menu in the voronoi app contains the actual colors next to the color names? That is some JS magic right there! Impressive, I know.</p>
<p>To make that work, I had to use the <code>options</code> argument of <code>selectizeInput()</code> together with the <code>render()</code> function and some actual JS code. The whole thing is adapted from <a href="https://stackoverflow.com/questions/54522970/shiny-selectizeinput-with-value-and-label-fields/54530077#54530077">this SO post</a> and looks like this:</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">col2hex <span class="ot" style="color: #00769E;">&lt;-</span> gplots<span class="sc" style="color: #5E5E5E;">::</span>col2hex</span>
<span id="cb6-2">colorValues <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">colors</span>()</span>
<span id="cb6-3">colorNames <span class="ot" style="color: #00769E;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"{colorValues} &lt;span style='background-color:{col2hex(colorValues)}'&gt;{rep('&amp;nbsp;', 15) %&gt;% stringr::str_c(collapse = '')}&lt;/span&gt;"</span>)</span>
<span id="cb6-4">colors <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">setNames</span>(colorValues, colorNames)</span>
<span id="cb6-5">js_render_string <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">I</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;">  {</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;">    item: function(item, escape) { return '&lt;div&gt;' + item.label + '&lt;/div&gt;'; },</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;">    option: function(item, escape) { return '&lt;div&gt;' + item.label + '&lt;/div&gt;'; }</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;">  }"</span>)</span>
<span id="cb6-10"><span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb6-11">  <span class="st" style="color: #20794D;">"color"</span>,</span>
<span id="cb6-12">  <span class="st" style="color: #20794D;">"Colour"</span>,</span>
<span id="cb6-13">  <span class="at" style="color: #677623;">selected =</span> <span class="st" style="color: #20794D;">'grey80'</span>,</span>
<span id="cb6-14">  <span class="at" style="color: #677623;">choices =</span> colors,</span>
<span id="cb6-15">  <span class="at" style="color: #677623;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">render =</span> js_render_string)</span>
<span id="cb6-16">)</span></code></pre></div>
</div>
<p>Let’s untangle this step by step. The first part of this code gives us a vector <code>colors</code> containing the color names like “white” and “aliceblue” as <strong>values</strong>. The same vector also uses <strong>names</strong> for the vector elements that will be displayed to the user. In principal, this <code>colors</code> vector looks like this:</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">x <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'white'</span>, <span class="st" style="color: #20794D;">'aliceblue'</span>) <span class="co" style="color: #5E5E5E;"># no names</span></span>
<span id="cb7-2">x</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] "white"     "aliceblue"</code></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">x <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">setNames</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'name1'</span>, <span class="st" style="color: #20794D;">'name2'</span>)) <span class="co" style="color: #5E5E5E;"># with names</span></span>
<span id="cb9-2">x</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>      name1       name2 
    "white" "aliceblue" </code></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">x[<span class="st" style="color: #20794D;">'name1'</span>] <span class="co" style="color: #5E5E5E;"># named vectors can be used like dictionaries</span></span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>  name1 
"white" </code></pre>
</div>
</div>
<p>In our color example, instead of using arbitrary names, I converted the color names to their hexvalues like <code>#FFFFFF</code> and wrapped those in some HTML code that could potentially look like <code>"&lt;span style='background-color#FFFFFF'&gt;white&lt;/span&gt;"</code>. This corresponds to the word <code>white</code> with background color <code>#FFFFFF</code> (also white - unspectacular).</p>
<p>But in the actual app I wanted to have colored bars next to the color names. Thus, I have used the HTML code for white space <code>&amp;nbsp;</code> and made this into <code>"white &lt;span style='background-color#FFFFFF'&gt;&amp;nbsp;&lt;/span&gt;"</code>. Now, to make that color bar longer, I repeated whited space with <code>rep()</code> and glued those into a single string using <code>stringr::str_c()</code>. This is what the vector looks like if I only use two white space repeats.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr, <span class="at" style="color: #677623;">warn.conflicts =</span> F)</span>
<span id="cb13-2">col2hex <span class="ot" style="color: #00769E;">&lt;-</span> gplots<span class="sc" style="color: #5E5E5E;">::</span>col2hex</span>
<span id="cb13-3">colorValues <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">colors</span>()</span>
<span id="cb13-4">colorNames <span class="ot" style="color: #00769E;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"{colorValues} &lt;span style='background-color:{col2hex(colorValues)}'&gt;{rep('&amp;nbsp;', 2) %&gt;% stringr::str_c(collapse = '')}&lt;/span&gt;"</span>)</span>
<span id="cb13-5">colors <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">setNames</span>(colorValues, colorNames)</span>
<span id="cb13-6">colors[<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>white &lt;span style='background-color:#FFFFFF'&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
                                                         "white" </code></pre>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1">colors[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>aliceblue &lt;span style='background-color:#F0F8FF'&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
                                                         "aliceblue" </code></pre>
</div>
</div>
<p>In the dropdown menu of the app the user will see the names of the color vector, i.e.&nbsp;the HTML code and within the server function of our app the selection will then correspond to the actual value of the vector, i.e.&nbsp;the color name without the html stuff.</p>
<p>In our dummy example from above, the user would see <code>name1</code> and <code>name2</code> in the dropdown menu but within the server function a user’s selection would correspond to <code>input$color</code> which would evaluate to <code>white</code> or <code>aliceblue</code>.</p>
<p>Clearly, we don’t want the user to see the raw HTML code. This is where JS comes into play. The code that is stored in <code>js_render_string</code> evaluates the HTML code in order to display the actual colors instead of the raw code. Finally, to execute the JS code we need to pass it to the options of <code>selectizeInput</code> via <code>options = list(render = js_render_string)</code>.</p>
<p>There you go, this is how I created the color bars in my app using a JS snippet I found on Stackoverflow. You can find the complete codes of the apps we’ve build <a href="dummy_apps/click_app.R">here (click app)</a>, <a href="dummy_apps/name_app.R">here (notification names app)</a> and <a href="interactive-ggplot/app.R">here (voronoi coloring app)</a>. If you liked this post and want to see more Shiny posts, let me know in the comments or simply hit the applause button below. Of course, you can also always follow my work via <a href="https://twitter.com/rappa753">Twitter</a>.</p>


</section>
 ]]></description>
  <category>Shiny</category>
  <guid>https://albert-rapp.de/posts/08_drawing_ggplot_interactively/08_drawing_ggplot_interactively.html</guid>
  <pubDate>Mon, 17 Jan 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Showcasing the janitor package</title>
  <link>https://albert-rapp.de/posts/07_janitor_showcase/07_janitor_showcase.html</link>
  <description><![CDATA[ 


<p>The <code>janitor</code> package contains only a little number of functions but nevertheless it is surprisingly convenient. I never really fully appreciated its functionality until I took a look into the documentation. Of course, other packages can achieve the same thing too but <code>janitor</code> makes a lot of tasks easy. Thus, here is a little showcase. If you prefer a video version, you can find this blog post on <a href="https://youtu.be/AKPvlNWZBEQ">YouTube</a>.</p>
<section id="clean-column-names" class="level2">
<h2 class="anchored" data-anchor-id="clean-column-names">Clean column names</h2>
<p>As everyone working with data knows, data sets rarely come in a clean format. Often, the necessary cleaning process already starts with the column names. Here, take this data set from TidyTuesday, week 41.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1">nurses <span class="ot" style="color: #00769E;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-05/nurses.csv'</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">names</span>(nurses)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code> [1] "State"                                          
 [2] "Year"                                           
 [3] "Total Employed RN"                              
 [4] "Employed Standard Error (%)"                    
 [5] "Hourly Wage Avg"                                
 [6] "Hourly Wage Median"                             
 [7] "Annual Salary Avg"                              
 [8] "Annual Salary Median"                           
 [9] "Wage/Salary standard error (%)"                 
[10] "Hourly 10th Percentile"                         
[11] "Hourly 25th Percentile"                         
[12] "Hourly 75th Percentile"                         
[13] "Hourly 90th Percentile"                         
[14] "Annual 10th Percentile"                         
[15] "Annual 25th Percentile"                         
[16] "Annual 75th Percentile"                         
[17] "Annual 90th Percentile"                         
[18] "Location Quotient"                              
[19] "Total Employed (National)_Aggregate"            
[20] "Total Employed (Healthcare, National)_Aggregate"
[21] "Total Employed (Healthcare, State)_Aggregate"   
[22] "Yearly Total Employed (State)_Aggregate"        </code></pre>
</div>
</div>
<p>These column names are intuitively easy to understand but not necessarily easy to process by code as there are white spaces and other special characters. Therefore, I accompany most data input by <code>clean_names()</code> from the <code>janitor</code> package.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(janitor)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr) <span class="co" style="color: #5E5E5E;"># load for pipe %&gt;%  and later wrangling</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">names</span>(nurses <span class="sc" style="color: #5E5E5E;">%&gt;%</span> clean_names)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code> [1] "state"                                       
 [2] "year"                                        
 [3] "total_employed_rn"                           
 [4] "employed_standard_error_percent"             
 [5] "hourly_wage_avg"                             
 [6] "hourly_wage_median"                          
 [7] "annual_salary_avg"                           
 [8] "annual_salary_median"                        
 [9] "wage_salary_standard_error_percent"          
[10] "hourly_10th_percentile"                      
[11] "hourly_25th_percentile"                      
[12] "hourly_75th_percentile"                      
[13] "hourly_90th_percentile"                      
[14] "annual_10th_percentile"                      
[15] "annual_25th_percentile"                      
[16] "annual_75th_percentile"                      
[17] "annual_90th_percentile"                      
[18] "location_quotient"                           
[19] "total_employed_national_aggregate"           
[20] "total_employed_healthcare_national_aggregate"
[21] "total_employed_healthcare_state_aggregate"   
[22] "yearly_total_employed_state_aggregate"       </code></pre>
</div>
</div>
<p>Did you see what happened? White spaces were converted to <code>_</code> and parantheses were removed. Even the <code>%</code> signs were converted to <code>percent</code>. Now, these labels are easy to understand AND process by code. This does not mean that you are finished cleaning but at least now the columns are more accessible.</p>
</section>
<section id="remove-empty-and-or-constant-columns-and-rows" class="level2">
<h2 class="anchored" data-anchor-id="remove-empty-and-or-constant-columns-and-rows">Remove empty and or constant columns and rows</h2>
<p>Data sets come with empty or superfluous rows or columns are not a rare sighting. This is especially true if you work with Excel files because there will be a lot of empty cells. Take a look at the dirty Excel data set from janitor’s <a href="https://github.com/sfirke/janitor/blob/main/dirty_data.xlsx">GitHub page</a>. It looks like this when you open it with Excel.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/07_janitor_showcase/dirty_data.PNG" class="img-fluid" width="751"></p>
</div>
</div>
<p>Taking a look just at this picture we may notice a couple of things.</p>
<ul>
<li><p>First, <a href="https://en.wikipedia.org/wiki/Jason_Bourne">Jason Bourne</a> is teaching at a school. I guess being a trained assassin qualifies him to teach physical education. Also - and this is just a hunch - undercover work likely earned him his “Theater” certification.</p></li>
<li><p>Second, the header above the actual table will be annoying, so we must skip the first line when we read the data set.</p></li>
<li><p>Third, the column names are not ideal but we know how to deal with that by now.</p></li>
<li><p>Fourth, there are empty rows and columns we can get rid of.</p></li>
<li><p>Fifth, there is a column that contains only ‘YES’. Therefore it contains no information at all and can be removed.</p></li>
</ul>
<p>So, let us read and clean the data. The <code>janitor</code> package will help us with <code>remove_empty()</code> and <code>remove_constant()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">xl_file <span class="ot" style="color: #00769E;">&lt;-</span> readxl<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_excel</span>(<span class="st" style="color: #20794D;">'dirty_data.xlsx'</span>, <span class="at" style="color: #677623;">skip =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">remove_empty</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">remove_constant</span>()</span>
<span id="cb5-5">xl_file</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 12 × 9
   first_name   last_name employee_status subject    hire_date percent_allocated
   &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;          &lt;dbl&gt;             &lt;dbl&gt;
 1 Jason        Bourne    Teacher         PE             39690              0.75
 2 Jason        Bourne    Teacher         Drafting       43479              0.25
 3 Alicia       Keys      Teacher         Music          37118              1   
 4 Ada          Lovelace  Teacher         &lt;NA&gt;           38572              1   
 5 Desus        Nice      Administration  Dean           42791              1   
 6 Chien-Shiung Wu        Teacher         Physics        11037              0.5 
 7 Chien-Shiung Wu        Teacher         Chemistry      11037              0.5 
 8 James        Joyce     Teacher         English        36423              0.5 
 9 Hedy         Lamarr    Teacher         Science        27919              0.5 
10 Carlos       Boozer    Coach           Basketball     42221             NA   
11 Young        Boozer    Coach           &lt;NA&gt;           34700             NA   
12 Micheal      Larsen    Teacher         English        40071              0.8 
# … with 3 more variables: full_time &lt;chr&gt;, certification_9 &lt;chr&gt;,
#   certification_10 &lt;chr&gt;</code></pre>
</div>
</div>
<p>Here, <code>remove_empty()</code> defaulted to remove, both, rows and colums. If we wish, we can change that by setting e.g.&nbsp;<code>which = 'rows'</code>.</p>
<p>Now, we may also want to see the <code>hire_data</code> in a sensible format. For example, in this dirty data set, Jason Bourne was hired on <code>39690</code>. Luckily, our <code>janitor</code> can make sense of it all.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">xl_file <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">hire_date =</span> <span class="fu" style="color: #4758AB;">excel_numeric_to_date</span>(hire_date))</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 12 × 9
   first_name   last_name employee_status subject    hire_date  percent_allocat…
   &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;      &lt;date&gt;                &lt;dbl&gt;
 1 Jason        Bourne    Teacher         PE         2008-08-30             0.75
 2 Jason        Bourne    Teacher         Drafting   2019-01-14             0.25
 3 Alicia       Keys      Teacher         Music      2001-08-15             1   
 4 Ada          Lovelace  Teacher         &lt;NA&gt;       2005-08-08             1   
 5 Desus        Nice      Administration  Dean       2017-02-25             1   
 6 Chien-Shiung Wu        Teacher         Physics    1930-03-20             0.5 
 7 Chien-Shiung Wu        Teacher         Chemistry  1930-03-20             0.5 
 8 James        Joyce     Teacher         English    1999-09-20             0.5 
 9 Hedy         Lamarr    Teacher         Science    1976-06-08             0.5 
10 Carlos       Boozer    Coach           Basketball 2015-08-05            NA   
11 Young        Boozer    Coach           &lt;NA&gt;       1995-01-01            NA   
12 Micheal      Larsen    Teacher         English    2009-09-15             0.8 
# … with 3 more variables: full_time &lt;chr&gt;, certification_9 &lt;chr&gt;,
#   certification_10 &lt;chr&gt;</code></pre>
</div>
</div>
</section>
<section id="rounding" class="level2">
<h2 class="anchored" data-anchor-id="rounding">Rounding</h2>
<p>To my <del>surprise</del> shock, R uses some unexpected rounding rule. In my world, whenever a number ends in <code>.5</code>, standard rounding would round up. Apparently, R uses something called <em>banker’s rounding</em> that in these cases rounds towards the next <em>even</em> number. Take a look.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">4.5</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] 0 2 2 4 4</code></pre>
</div>
</div>
<p>I would expect that the rounded vector contains the integers from one to five. Thankfully, <code>janitor</code> offers a convenient rounding function.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">round_half_up</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">4.5</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
</div>
<p>Ok, so that gives us a new function for rounding towards integers. But what is really convenient is that <code>janitor</code> can <code>round_to_fraction</code>s.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">round_to_fraction</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">0.13</span>), <span class="at" style="color: #677623;">denominator =</span> <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code> [1] 0.50 0.75 0.75 1.00 1.00 1.25 1.25 1.50 1.50 1.75 1.75 2.00</code></pre>
</div>
</div>
<p>Here, I rounded the numbers to the next quarters (<code>denominator = 4</code>) but of course any fraction is possible. You can now live the dream of rounding towards arbitrary fractions.</p>
</section>
<section id="find-matches-in-multiple-characteristics" class="level2">
<h2 class="anchored" data-anchor-id="find-matches-in-multiple-characteristics">Find matches in multiple characteristics</h2>
<p>In my opinion, the <code>get_dupes()</code> function is really powerful. It allows us to find “similar” observations in a data set based on certain characteristics. For example, the <code>starwars</code> data set from <code>dplyr</code> contains a lot of information on characters from the Star Wars movies. Possibly, we want to find out which characters are similar w.r.t. to certain traits.</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1">starwars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">get_dupes</span>(eye_color, hair_color, skin_color, sex, homeworld) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">select</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">8</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 7 × 8
  eye_color hair_color skin_color sex    homeworld dupe_count name        height
  &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;          &lt;int&gt; &lt;chr&gt;        &lt;int&gt;
1 blue      black      yellow     female Mirial             2 Luminara U…    170
2 blue      black      yellow     female Mirial             2 Barriss Of…    166
3 blue      blond      fair       male   Tatooine           2 Luke Skywa…    172
4 blue      blond      fair       male   Tatooine           2 Anakin Sky…    188
5 brown     brown      light      female Naboo              3 Cordé          157
6 brown     brown      light      female Naboo              3 Dormé          165
7 brown     brown      light      female Naboo              3 Padmé Amid…    165</code></pre>
</div>
</div>
<p>So, Luke and Anakin Skywalker are similar to one another. Who would have thought that. Sadly, I don’t enough about Star Wars to know whether the other matches are similarly “surprising”. In any case, the point here is that we can easily find matches according to arbitrarily many characteristics. Conveniently, these characteristics are the first columns of the new output and we get a <code>dupe_count</code>.</p>
<p>Alright, this concludes our little showcase. In the <code>janitor</code> package, there is another set of <code>tabyl()</code> functions. These are meant to improve base R’s <code>table()</code> functions. Since I rarely use that function I did not include it but if you use <code>table()</code> frequently, then you should definitely <a href="http://sfirke.github.io/janitor/articles/tabyls.html">check out tabyl()</a>.</p>


</section>
 ]]></description>
  <guid>https://albert-rapp.de/posts/07_janitor_showcase/07_janitor_showcase.html</guid>
  <pubDate>Wed, 12 Jan 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot-tips: Learning by Thieving</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/06_learning_by_thieving/06_learning_by_thieving.html</link>
  <description><![CDATA[ 

<p><a href="https://github.com/rfordatascience/tidytuesday">TidyTuesday</a>, the weekly social data project that brings together R users, is a great way to connect to the R community and learn to wrangle and visualize data. But more importantly, it is a superb chance to learn new data visualization skills by <del>doing</del> thieving. Let me elaborate.</p>
<p>Each week, you get a chance to work with a new data set and create a (hopefully) nice visualization<sup>1</sup>. Afterwards, you can share visualizations with the world on twitter using <a href="https://twitter.com/search?q=%23tidytuesday&amp;src=typed_query">#tidyTuesday</a>. Of course, being the curious person that you are, you check out contributions from other fellow R users. And more often than not, you will see really cool visualizations and wish that you could do something like that too. And you can!</p>
<p>Usually, people share their code together with their viz.&nbsp;Consequently, you are only one ctrl-C away from stepping up your dataviz game. Do I mean that you should take the entire code and brand that as your own work? Of course not! But you can maybe ctrl-C aspects of the code and reuse it for something you have been wanting to do for a long time. Let’s make this specific. Last week, I found this gem by <a href="https://twitter.com/geokaramanis">Georgios Karamanis</a>.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Transphobic hate crimes in Sweden for this week's Bring Your Own Data <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a>.<br><br>The inspiration was a plot made by <a href="https://twitter.com/thomasoide?ref_src=twsrc%5Etfw"><span class="citation" data-cites="thomasoide">@thomasoide</span></a> for this Axios article: <a href="https://t.co/zMrnr9tszG">https://t.co/zMrnr9tszG</a><br><br>Source: <a href="https://twitter.com/myndigheten_bra?ref_src=twsrc%5Etfw"><span class="citation" data-cites="myndigheten_bra">@myndigheten_bra</span></a><br><br>code: <a href="https://t.co/HSCew2zrUg">https://t.co/HSCew2zrUg</a><br><br> <a href="https://twitter.com/hashtag/Rstats?src=hash&amp;ref_src=twsrc%5Etfw">#Rstats</a> <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a> <a href="https://t.co/IVQ1wTBZmt">pic.twitter.com/IVQ1wTBZmt</a>
</p>
— Georgios Karamanis (<span class="citation" data-cites="geokaramanis">@geokaramanis</span>) <a href="https://twitter.com/geokaramanis/status/1478744093765296130?ref_src=twsrc%5Etfw">January 5, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>What intrigued me were the bars with criss-cross lines. Now, clearly I want to be able to do that too. Luckily, the tweet also contains a link to the corresponding GitHub <a href="https://github.com/gkaramanis/tidytuesday/tree/master/2022/2022-week_01">repository</a>. Et voilà, a quick glance at the code reveals the use of a so-called <code>ggpattern</code> package and a quick ctrl-C of the package name combined with a internet search leads me to the package’s <a href="https://coolbutuseless.github.io/package/ggpattern/">documentation</a>.</p>
<p>There, I find out that it is quite easy to get bars with different patterns<sup>2</sup> using <code>geom_col_pattern()</code>. For example, these code snippets are taken straight from the documentation (more ctrl-Cs). For more, check out the documentation.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggpattern)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb1-4"></span>
<span id="cb1-5">df <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #677623;">level =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>, <span class="st" style="color: #20794D;">'d'</span>), <span class="at" style="color: #677623;">outcome =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">2.3</span>, <span class="fl" style="color: #AD0000;">1.9</span>, <span class="fl" style="color: #AD0000;">3.2</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb1-6"></span>
<span id="cb1-7">stripes <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(df) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">geom_col_pattern</span>(</span>
<span id="cb1-9">    <span class="fu" style="color: #4758AB;">aes</span>(level, outcome, <span class="at" style="color: #677623;">pattern_fill =</span> level), </span>
<span id="cb1-10">    <span class="at" style="color: #677623;">pattern =</span> <span class="st" style="color: #20794D;">'stripe'</span>,</span>
<span id="cb1-11">    <span class="at" style="color: #677623;">fill    =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb1-12">    <span class="at" style="color: #677623;">colour  =</span> <span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb1-13">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;">theme_bw</span>(<span class="dv" style="color: #AD0000;">18</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) </span>
<span id="cb1-16"></span>
<span id="cb1-17">kittens <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(df) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;">geom_col_pattern</span>(</span>
<span id="cb1-19">    <span class="fu" style="color: #4758AB;">aes</span>(level, outcome, <span class="at" style="color: #677623;">fill =</span> level), </span>
<span id="cb1-20">    <span class="at" style="color: #677623;">pattern =</span> <span class="st" style="color: #20794D;">'placeholder'</span>,</span>
<span id="cb1-21">    <span class="at" style="color: #677623;">pattern_type =</span> <span class="st" style="color: #20794D;">'kitten'</span>,</span>
<span id="cb1-22">    <span class="at" style="color: #677623;">pattern_size =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb1-23">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;">theme_bw</span>(<span class="dv" style="color: #AD0000;">18</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) </span>
<span id="cb1-26"></span>
<span id="cb1-27">stripes <span class="sc" style="color: #5E5E5E;">+</span> kittens</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/06_learning_by_thieving/06_learning_by_thieving_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>There you go. So, now I “can do” bars with different patterns. <em>“Hold on, it is not like you are totally an expert now. How does any of that help?”</em>, you might think. And, clearly you are right. Having emulated something I saw online, does not make me exactly into an visual artist but now I am equipped with one more tool to try out come next TidyTuesday.</p>
<p>Repeat that often enough and soon you have acquired a lot of tools to use in diverse settings. Eventually, the lines between <em>“I copied what I found online”</em> and <em>“This is a trick I like to do frequently”</em> blur. In the end, repeated practice and learning from others is what makes you into an expert. And sometimes that “learning from others” part is as simple as strolling through GitHub repositories on the lookout for your next great coup.</p>



<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Honestly, it does not really matter if your visualization is looking “nice”. I have ended up sharing a bunch of, say, average at best visualizations. (<a href="https://twitter.com/rappa753/status/1425709562636742658">Exhibit A</a>, <a href="https://twitter.com/rappa753/status/1447855544644120576">Exhibit B</a>). The point is too keep showing up and trying. In fact, even the visualizations I am not totally proud of contain elements which I have spent a lot of time working on. This practice has often ended up helping me in unexpected situations.↩︎</p></li>
<li id="fn2"><p>I know, I know. The tweet was using <code>geom_rect_pattern()</code>. Not exactly the same but the principles are.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Visualization</category>
  <category>Opinion</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/06_learning_by_thieving/06_learning_by_thieving.html</guid>
  <pubDate>Mon, 10 Jan 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A couple of visualizations from ggforce</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples.html</link>
  <description><![CDATA[ 


<p>It is almost the beginning of a new year and I have decided to finish off this year with a quick blog post. Also, friends were shaming me that I have been slacking off on this blog lately. Therefore, let’s get started right away. We’ll keep things simple and look at a few cool plots from the <code>ggforce</code> package. Of course, we have already glimpsed at this package in the <a href="https://albert-rapp.deposts/ggplot2-tips/04_arranging_plots/04_arranging_plots.html">previous installment</a> of this <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a>.</p>
<section id="mark-point-plots" class="level2">
<h2 class="anchored" data-anchor-id="mark-point-plots">Mark Point Plots</h2>
<p>Let us first take a look at the <code>penguins</code> data set from the <code>palmerpenguins</code> package. Same as last time, this will be the dummy data set we use for plots but of course any other data set would be fine too.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_light</span>())</span>
<span id="cb1-4">dat <span class="ot" style="color: #00769E;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(sex))</span>
<span id="cb1-6">p <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, flipper_length_mm, <span class="at" style="color: #677623;">col =</span> species)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">geom_point</span>()</span>
<span id="cb1-9">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Visually, we can see that the points are strongly grouped by species which makes sense as these kind of measurements often define a species. With help from <code>ggforce</code> we can visually emphasize this grouping by drawing rectangles or ellipses around the groups.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(ggforce)</span>
<span id="cb2-2">rect_plot <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_mark_rect</span>(<span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-4">ellipse_plot <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">geom_mark_ellipse</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> species), <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.25</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">library</span>(patchwork) <span class="co" style="color: #5E5E5E;"># see last ggplot2-tips post</span></span>
<span id="cb2-8">rect_plot <span class="sc" style="color: #5E5E5E;">/</span> ellipse_plot</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>There is also a <code>geom_mark_hull()</code> function that requires the <code>concaveman</code> package to be installed. Using this function, we can draw a hull around the points.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">geom_mark_hull</span>(<span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">concavity =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Beware though that this hull is “redrawn at draw time”, so your hull may look different when you zoom into the plot. Also, let me point out that <code>geom_mark_hull()</code> has an argument <code>concavity</code> that allows you to make the hull “more wiggly”.</p>
</section>
<section id="alluvial-plots" class="level2">
<h2 class="anchored" data-anchor-id="alluvial-plots">Alluvial Plots</h2>
<p>With <code>ggforce</code> you can easily draw so-called alluvial plots. Originally, these are used to visualize a “stream over time” as for instance shown on <a href="https://en.wikipedia.org/wiki/Alluvial_diagram#/media/File:NeuroAlluvial2001-2007-691x273.png">Wikipedia</a>. But the same visualization can be used to visualize “composition of groups” like so.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>From this plot, it is clear that unsurprisingly most of high weight penguins are male. What is maybe more surprising is that all Chinstrap penguins live on Dream. Obviously, the first layer in this alluvial plot is sort of redundant as the color already codes the sex but for accessibility it is often encouraged to use some form of double encoding (e.g.&nbsp;different shape AND color for groups). Thus, I find it practical and somewhat convenient to add this first layer.</p>
<p>Creating this plot requires a couple of steps but <code>ggforce</code> has useful functions that make our life easier. More precisely we will need to</p>
<ul>
<li>count occurences in each subgroup and convert this in a suitable format for later plotting. <code>gather_set_data()</code> will help us doing that.</li>
<li>draw lines between subgroups with <code>geom_parallel_sets()</code></li>
<li>draw boxes to identify subgroups with <code>geom_parallel_sets_axes()</code></li>
<li>label the boxes with <code>geom_parallel_sets_labels</code></li>
</ul>
<p>The first step is processed as follows</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">reshaped_dat <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #677623;">mass_group =</span> <span class="fu" style="color: #4758AB;">factor</span>(</span>
<span id="cb4-4">      <span class="fu" style="color: #4758AB;">cut_number</span>(body_mass_g, <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb4-5">      <span class="at" style="color: #677623;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"high"</span>, <span class="st" style="color: #20794D;">"medium"</span>, <span class="st" style="color: #20794D;">"low"</span>)</span>
<span id="cb4-6">    )</span>
<span id="cb4-7">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">count</span>(species, island, sex, mass_group) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">gather_set_data</span>(<span class="at" style="color: #677623;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</div>
<p>This simply counts the occurences in each subgroup and then adds three columns <code>x</code>, <code>y</code> and <code>id</code> based on the subgroup labels. These three new columns are necessary for generating the plot which is done as follows</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">reshaped_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #677623;">x =</span> x, </span>
<span id="cb5-4">    <span class="at" style="color: #677623;">split =</span> y, </span>
<span id="cb5-5">    <span class="at" style="color: #677623;">id =</span> id, </span>
<span id="cb5-6">    <span class="at" style="color: #677623;">value =</span> n</span>
<span id="cb5-7">  )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">geom_parallel_sets</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> sex), <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_axes</span>(<span class="at" style="color: #677623;">axis.width =</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_labels</span>(<span class="at" style="color: #677623;">colour =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here, value is the counts of the subgroups. Also, notice that the splits on the x-axis is not in the same order as in my original plot. The order can be easily changed by converting <code>x</code> to a factor whose levels have the desired ordering. The complete code is</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">reshaped_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sex"</span>, <span class="st" style="color: #20794D;">"species"</span>, <span class="st" style="color: #20794D;">"island"</span>, <span class="st" style="color: #20794D;">"mass_group"</span>)), </span>
<span id="cb6-4">    <span class="at" style="color: #677623;">split =</span> y, </span>
<span id="cb6-5">    <span class="at" style="color: #677623;">id =</span> id, </span>
<span id="cb6-6">    <span class="at" style="color: #677623;">value =</span> n</span>
<span id="cb6-7">  )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">geom_parallel_sets</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> sex), <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_axes</span>(<span class="at" style="color: #677623;">axis.width =</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_labels</span>(<span class="at" style="color: #677623;">colour =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-11">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">breaks =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-13">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">12</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-14">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #677623;">palette =</span> <span class="st" style="color: #20794D;">'Set1'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="voronoi-diagrams" class="level2">
<h2 class="anchored" data-anchor-id="voronoi-diagrams">Voronoi Diagrams</h2>
<p>Next, let us explore Voronoi diagrams. These are constructed from a set of “center points” which are used to form polygons such that these fill the whole plane and each polygons consists of the points that are closest to a polygon’s center point. If you found this somewhat confusing, then you are in luck because Wikipedia has a super neat <a href="https://de.wikipedia.org/wiki/Voronoi-Diagramm#/media/Datei:Voronoi_growth_euclidean.gif">animation</a> that illustrates this concept.</p>
<p>Using bill and flipper lengths to define the center points’ x- and y-coordinates, we can create a Voronoi diagram via <code>geom_voronoi_tile()</code> and <code>geom_voronoi_segment()</code> as follows.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, flipper_length_mm, <span class="at" style="color: #677623;">group =</span> <span class="dv" style="color: #AD0000;">1</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">geom_voronoi_segment</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #677623;">palette =</span> <span class="st" style="color: #20794D;">"Set1"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here, the lines between polygons are shown due to <code>geom_voronoi_segment()</code> and if we wish to get rid of the lines we can simply remove this layer. Also, let us ignore possible applications of Voronoi diagrams<sup>1</sup> for a bit. What I really wanted to demonstrate is a small bit of Rtistry I found on <a href="https://twitter.com/kc_analytics/status/1416149064555667460?s=20">Twitter</a> and found really cool.</p>
<p>With a couple of random numbers and a bit of coloring one can create some visually appealing graphics (at least I like to think so). First, let’s take a look at only a few random numbers</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23479</span>)</span>
<span id="cb8-2">N <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(N), <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(N)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(<span class="at" style="color: #677623;">option =</span> <span class="st" style="color: #20794D;">'A'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Not so super impressive but using many random numbers a “smoother” picture will be created.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23479</span>)</span>
<span id="cb9-2">N <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(N), <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(N)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(<span class="at" style="color: #677623;">option =</span> <span class="st" style="color: #20794D;">'A'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Of course, arranging the center points differently and using other colors leads to very different pictures.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23479</span>)</span>
<span id="cb10-2">N <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #677623;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(N, <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #677623;">y =</span> <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="fu" style="color: #4758AB;">abs</span>(x) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">runif</span>(N))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(<span class="at" style="color: #677623;">option =</span> <span class="st" style="color: #20794D;">'E'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="sina-plots" class="level2">
<h2 class="anchored" data-anchor-id="sina-plots">Sina Plots</h2>
<p>Coming back to less artistic plots, consider the following violin plots from the <code>ggplot2</code> package.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> species, <span class="at" style="color: #677623;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">geom_violin</span>(<span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Compared with common boxplots, these kind of plots show the distribution of the data more explicitly with density estimates (rotated by 90 degrees and mirrored for symmetry). This gets rid of the intrinsic problem of boxplots, i.e.&nbsp;only showing quantiles. Sometimes though, we want to see the quantiles as well. In these instances, an additional boxplot is plotted within the violin plots like so.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> species, <span class="at" style="color: #677623;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">geom_violin</span>(<span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="at" style="color: #677623;">width =</span> <span class="fl" style="color: #AD0000;">0.25</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>However, even with both of these plots combined we still don’t know how many points are in this data set. To make that information available in the visualizations, so-called sina plots fill the area of violin plots with jittered data points instead of depicting the estimated density directly.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> species, <span class="at" style="color: #677623;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">geom_sina</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If a data set is large, then the points will display the same contour as the violin plot. In any case, the violin plot can be plotted beneath the points as well for better visibility.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> species, <span class="at" style="color: #677623;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_violin</span>(<span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">geom_sina</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This way, we can see both the distribution AND the number of data points in a single plot. Of course, there are more ways to display the distribution of data and <code>ggdist</code> is just the right package to do that job. I will show you that particular package in the next installment of the <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a>.</p>
<p>And that concludes our small demonstration of a few <code>ggforce</code> functions. For more functions check out <a href="https://ggforce.data-imaginist.com/"><code>ggforce</code>’s website</a>. For sure, there is more cool stuff like Bezier curves and facet zooms to explore.</p>
<p>Finally, here is an overview of all the cool visuals we have created. Let me know what you think in the comments or simply hit the applause button below if you liked the content.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/collected_plots.png" class="img-fluid" width="1772"></p>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See <a href="https://en.wikipedia.org/wiki/Voronoi_diagram#Applications">Wikipedia</a> if you’re interested in a list of applications.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples.html</guid>
  <pubDate>Fri, 31 Dec 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>6 simple Shiny things I have learned from creating a somewhat small app</title>
  <link>https://albert-rapp.de/posts/06_shiny_app_learnings/06_shiny_app_learnings.html</link>
  <description><![CDATA[ 


<p>A couple of weeks back, I wanted to explain to my student what I mean when I talk about the “variance of the sample variance”. In my head, this term sounds quite confusing and contains the word “variance” at least one too many times. But as I was not sure whether my subsequent explanation really came through, I decided to let my students explore the notion on their own through <a href="https://rappa.shinyapps.io/estimator-variance/">a Shiny app</a>.</p>
<p>Honestly, I thought this would be quite simple to code because I have already learned the basics of Shiny when I wanted to show my students what exciting web developmental things R can do. Back then, I summarized the basics in one chapter of <a href="https://yards.albert-rapp.de/shiny-applications.html">my YARDS lecture notes</a>.</p>
<p>However, even though the idea of my app was simple, I soon came to realize that I would need to learn a couple more Shiny-related things to get the job done. And, as is usual with coding, I did this mostly by strolling through the web in order to find code solutions for my particular problems. Most of the time, I consulted Hadley Wickham’s <a href="https://mastering-shiny.org/">Mastering Shiny</a> but still I ended up searching for a lot of random other stuff on the web.</p>
<p>Consequently, I decided that it might be nice to collect what I have learned in one place. So, here is a compilation of loosely connected troubles I solved during my Shiny learning process. May this summary serve someone well.</p>
<section id="use-a-theme-for-simple-customization" class="level2">
<h2 class="anchored" data-anchor-id="use-a-theme-for-simple-customization">Use a theme for simple customization</h2>
<p>Let’s start with something super easy. If you wish to customize the appearance of you app, you can set the <code>theme</code> argument of <code>fluidPage()</code> to either a CSS-file that contains the necessary configuration (this is the hard way) or use a theme from <code>bslib::bs_theme()</code>. The latter approach comes with a lot of named preimplemented themes and is easily implemented by <code>bootswatch = "name"</code>. In my app, I have simply added <code>theme = bslib::bs_theme(bootswatch = "superhero")</code>. For other themes, have a look at <a href="https://rstudio.github.io/shinythemes/">RStudio’s Shiny themes page</a>.</p>
<p>Check out this super simple example that I have adapted from the default “new Shiny app” output (you will actually have to copy and run this in an R script on your own).</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"></span>
<span id="cb1-4">ui <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-5">  <span class="co" style="color: #5E5E5E;"># Theme added here</span></span>
<span id="cb1-6">  <span class="at" style="color: #677623;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">bs_theme</span>(<span class="at" style="color: #677623;">bootswatch =</span> <span class="st" style="color: #20794D;">"superhero"</span>),</span>
<span id="cb1-7">  </span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"Old Faithful Geyser Data"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;">sliderInput</span>(<span class="st" style="color: #20794D;">"bins"</span>,</span>
<span id="cb1-12">                  <span class="st" style="color: #20794D;">"Number of bins:"</span>,</span>
<span id="cb1-13">                  <span class="at" style="color: #677623;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-14">                  <span class="at" style="color: #677623;">max =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-15">                  <span class="at" style="color: #677623;">value =</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb1-16">    ),</span>
<span id="cb1-17">    </span>
<span id="cb1-18">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-19">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"distPlot"</span>)</span>
<span id="cb1-20">    )</span>
<span id="cb1-21">  )</span>
<span id="cb1-22">)</span>
<span id="cb1-23"></span>
<span id="cb1-24">server <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(input, output) {</span>
<span id="cb1-25">  output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb1-26">    x    <span class="ot" style="color: #00769E;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb1-27">    bins <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #677623;">length.out =</span> input<span class="sc" style="color: #5E5E5E;">$</span>bins <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-28">    <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #677623;">breaks =</span> bins, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #677623;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb1-29">  })</span>
<span id="cb1-30">}</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #677623;">ui =</span> ui, <span class="at" style="color: #677623;">server =</span> server)</span></code></pre></div>
</div>
<p>During the course of this text, we will extend this small example bit by bit. But, I want to avoid copy-and-pasting code each time we change something. Thus, for the remaining examples I will only describe the changes to the previous version instead of pasting the whole code. Nevertheless, I will provide links after each example so that each script can be downloaded at will. The current example can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/01_add_theme.R">here</a>.</p>
</section>
<section id="isolate-slider-from-reactivity" class="level2">
<h2 class="anchored" data-anchor-id="isolate-slider-from-reactivity">Isolate slider from reactivity</h2>
<p>As is currently intended, our app’s histogram changes whenever the slider is moved. Sometimes, though, this is not what we wish to do. Instead, we may want to delay the rendering of the plot until a button is clicked.</p>
<p>This can be achieved through a simple <code>isolate()</code> command which, well, isolates whatever is in between the function’s parentheses from changes on the UI. Here, let us put <code>input$bins</code> into the <code>isolate()</code> function and check what happens when we move the slider (full code <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/02_add_isolate.R">here</a>), i.e.&nbsp;we changed ::: {.cell}</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1">bins <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #677623;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<p>::: Excellent! Nothing happens when we move the slider. Dumb and useless but excellent anyway.</p>
<p>Observe that we could have also put the whole <code>renderPlot()</code> function call into <code>isolate()</code>. This app would work in the sense that we created valid code but then the reactivity of the slider is still active. The <code>isolate()</code> documentation hints at this with “…if you assign a variable inside the isolate(), its value will be visible outside of the <code>isolate()</code>”.</p>
</section>
<section id="create-and-observe-buttons" class="level2">
<h2 class="anchored" data-anchor-id="create-and-observe-buttons">Create and observe Buttons</h2>
<p>Let us bring back some reactivity to our app by adding a button that reevaluates our histogram when clicked. First, we will add a button to the UI. Second, we will implement what needs to happen on the server side of things when the button is clicked.</p>
<p>The first step is pretty simple. All we have to do is add <code>actionButton()</code> to the UI. Same as <code>sliderInput()</code> we have to specify a <code>inputId</code> and <code>label</code> for the button. Here, we could add ::: {.cell}</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"draw_button"</span>, <span class="st" style="color: #20794D;">"Reevaluate!"</span>, <span class="at" style="color: #677623;">width =</span> <span class="st" style="color: #20794D;">"100%"</span>)</span></code></pre></div>
<p>:::</p>
<p>Then, on the server side we will have to catch each click on the button. Once a click is registered, the plot is supposed to be rendered again. We do this with <code>observeEvent()</code> which expects an event expression and a handler expression. In our case, the former is simply the id of our button, i.e.&nbsp;<code>input$draw_button</code>, and the latter is what code is to be executed when the event is observed. Therefore, we move our code for rendering the plot into this part of <code>observeEvent()</code>. Thus, in our server function we now have ::: {.cell}</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb4-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb4-3">    output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-4">      x    <span class="ot" style="color: #00769E;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb4-5">      bins <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #677623;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-6">      <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #677623;">breaks =</span> bins, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #677623;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb4-7">    })</span>
<span id="cb4-8">  }</span>
<span id="cb4-9">)</span></code></pre></div>
<p>:::</p>
<p>Notice that we have wrapped our code into <code>{}</code>. Strictly speaking, this is not necessary because we only “do one thing” but, of course, we can easily imagine that we want to tie multiple calculations to a button click. In this case, we will need to wrap all commands into <code>{}</code>. In any case, our code now does what we expect it to do and on each click a new histogram is rendered using the current value of the slider input. This new app’s complete code can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/03_add_button.R">here</a>.</p>
</section>
<section id="use-eventreactive-as-an-alternative-for-updating-values" class="level2">
<h2 class="anchored" data-anchor-id="use-eventreactive-as-an-alternative-for-updating-values">Use eventReactive() as an alternative for updating values</h2>
<p>Honestly, this part I learned just 5 minutes ago while I was writing the last section of this blog post. When I looked into the documentation of <code>observeEvent()</code>, I noticed that there is also a function <code>eventReactive()</code> which may be better suited for our current use case as it allows us to avoid manually isolating <code>input$bins</code>.</p>
<p>This new function works similar to <code>observeEvent()</code> but it creates a reactive variable instead. This, we can use for rendering. Check this out ::: {.cell}</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">plot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(</span>
<span id="cb5-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb5-3">    x    <span class="ot" style="color: #00769E;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb5-4">    bins <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #677623;">length.out =</span> input<span class="sc" style="color: #5E5E5E;">$</span>bins <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #677623;">breaks =</span> bins, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #677623;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb5-6">  }</span>
<span id="cb5-7">)</span>
<span id="cb5-8"></span>
<span id="cb5-9">output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({<span class="fu" style="color: #4758AB;">plot</span>()})</span></code></pre></div>
<p>:::</p>
<p>Notice how we do not use <code>isolate()</code> anymore and use the <code>plot</code> variable like a reactive in <code>renderPlot()</code>, i.e.&nbsp;we have to “call” its value with <code>()</code>.</p>
<p>However, be aware that <code>eventReactive()</code> creates a reactive variable such that you cannot change, say, multiple plots at once. Nevertheless, <code>eventReactive()</code> can be a great way to tie a plot to an event. So, I guess it dependes on your use case and personal preference if you want to use <code>eventReactive()</code> rather than <code>observeEvent()</code>. Anyway, this version’s code can be copied from <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/04_eventReactive_instead.R">here</a>.</p>
</section>
<section id="use-reactiveval-to-manually-change-values-on-click" class="level2">
<h2 class="anchored" data-anchor-id="use-reactiveval-to-manually-change-values-on-click">Use reactiveVal() to manually change values on click</h2>
<p>Another neat function is <code>reactiveVal()</code> which helps you to construct for instance counters that increase on the click of a button. We can initialize a reactive value by writing ::: {.cell}</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">counter <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="at" style="color: #677623;">value =</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<p>::: within the server function. This way, our counter is set to zero and we can update it and set it to, say, one by calling <code>counter(value = 1)</code>. The current value of the counter can be accessed through <code>counter()</code>.</p>
<p>Clearly, we can tie the updating of a reactive value to an event that we observe through <code>observeEvent()</code>. For instance, we count how often the draw button in our small app is clicked by changing our previous <code>observeEvent(input$draw_button, ...)</code>. Here, we would change this particular line of code to ::: {.cell}</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb7-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb7-3">    tmp <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">counter</span>()</span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">counter</span>(tmp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb7-5">    </span>
<span id="cb7-6">    output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb7-7">      x    <span class="ot" style="color: #00769E;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb7-8">      bins <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #677623;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb7-9">      <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #677623;">breaks =</span> bins, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #677623;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb7-10">    })</span>
<span id="cb7-11">  }</span>
<span id="cb7-12">)</span></code></pre></div>
<p>:::</p>
<p>Finally, we can show this information on our UI for demonstration purposes by adding a <code>textOutput("demonstration_text")</code> to our UI and setting ::: {.cell}</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">output<span class="sc" style="color: #5E5E5E;">$</span>demonstration_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderText</span>(<span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb8-2">  <span class="st" style="color: #20794D;">"You have clicked the draw button"</span>,</span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">counter</span>(),</span>
<span id="cb8-4">  <span class="st" style="color: #20794D;">"times. Congrats!"</span></span>
<span id="cb8-5">))</span></code></pre></div>
<p>:::</p>
<p>The complete app can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/05_add_reactiveVal.R">here</a>.</p>
</section>
<section id="use-tabsetpanel-and-unique-plot-names" class="level2">
<h2 class="anchored" data-anchor-id="use-tabsetpanel-and-unique-plot-names">Use tabsetPanel and unique plot names</h2>
<p>Often, you do not want to display all information at once. <a href="https://rappa.shinyapps.io/estimator-variance/">In my particular case</a>, I wanted to show only one out of two plots based on the user’s chosen estimator (sample mean or sample variance). A great way to achieve that is to use <code>tabsetPanel()</code> in the UI.</p>
<p>Ordinarily, you can create a UI this way by setting</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Plot"</span>, <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"plot"</span>)),</span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Summary"</span>, <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"summary"</span>)),</span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Table"</span>, <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="st" style="color: #20794D;">"table"</span>))</span>
<span id="cb9-6">  )</span>
<span id="cb9-7">)</span></code></pre></div>
</div>
<p>This was an example taken straight out of the documentation of <code>tabsetPanel()</code>. What you will get if you start an app containing a UI like this is a panel with three tabs (each one corresponding to a plot, text or table output) and the user can click on the tabs to switch between the views. This isn’t that surprising.</p>
<p>However, if we also add an <code>id</code> to this and set <code>type</code> to <code>hidden</code>, like so ::: {.cell}</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #677623;">id =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>,</span>
<span id="cb10-4">    <span class="at" style="color: #677623;">type =</span> <span class="st" style="color: #20794D;">"hidden"</span>,</span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Plot"</span>, <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"plot"</span>)),</span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Summary"</span>, <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"summary"</span>)),</span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Table"</span>, <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="st" style="color: #20794D;">"table"</span>))</span>
<span id="cb10-8">  )</span>
<span id="cb10-9">)</span></code></pre></div>
<p>::: then, by default, the user does not have the options to change between views by clicking on tabs. Now, the view will need to change based on other interactions of the user with the UI. This change will then need to be customized within the server function. This is where the <code>id</code> argument comes into play because it allows ourselves to address the tabs via <code>updateTabsetPanel()</code>.</p>
<p>Here, let us take our previous example and display the same information on a different panel, i.e.&nbsp;at the end we will have two panels with exactly the same information in each tab. I know. This is not particularly exciting or meaningful but it serves our current purpose well.</p>
<p>Naively, we might implement our user-interface like so ::: {.cell}</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #677623;">id =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>,</span>
<span id="cb11-4">    <span class="at" style="color: #677623;">type =</span> <span class="st" style="color: #20794D;">"hidden"</span>,</span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel1"</span>, {</span>
<span id="cb11-6">      <span class="co" style="color: #5E5E5E;"># UI commands from before here</span></span>
<span id="cb11-7">    }),</span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel2"</span>, {</span>
<span id="cb11-9">      <span class="co" style="color: #5E5E5E;"># UI commands from before here</span></span>
<span id="cb11-10">    }),</span>
<span id="cb11-11">  )</span>
<span id="cb11-12">)</span></code></pre></div>
<p>:::</p>
<p>However, we will have to be careful! If we simply copy-and-paste our UI from before, then we won’t have unique identifiers to address e.g.&nbsp;the draw button or the plot output. Since this is a serious NO-NO (all caps for dramatic effect) and the app won’t work properly, let us instead write a function that draws the UI for us but creates it with different identifiers like this ::: {.cell}</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1">create_UI <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(unique_part) {</span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb12-4">      <span class="co" style="color: #5E5E5E;"># unique label here by adding unique_part to bins</span></span>
<span id="cb12-5">      <span class="fu" style="color: #4758AB;">sliderInput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"bins"</span>, unique_part, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>),</span>
<span id="cb12-6">                  <span class="st" style="color: #20794D;">"Number of bins:"</span>,</span>
<span id="cb12-7">                  <span class="at" style="color: #677623;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb12-8">                  <span class="at" style="color: #677623;">max =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb12-9">                  <span class="at" style="color: #677623;">value =</span> <span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb12-10">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"draw_button"</span>, unique_part, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>), <span class="st" style="color: #20794D;">"Reevaluate!"</span>, <span class="at" style="color: #677623;">width =</span> <span class="st" style="color: #20794D;">"100%"</span>),</span>
<span id="cb12-11">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"change_view"</span>, unique_part, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>), <span class="st" style="color: #20794D;">"Change view"</span>, <span class="at" style="color: #677623;">width =</span> <span class="st" style="color: #20794D;">"100%"</span>)</span>
<span id="cb12-12">    ),</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb12-15">      <span class="fu" style="color: #4758AB;">textOutput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"demonstration_text"</span>, unique_part, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)), <span class="co" style="color: #5E5E5E;"># Counter text added</span></span>
<span id="cb12-16">      <span class="fu" style="color: #4758AB;">textOutput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"countEvaluations"</span>, unique_part, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)),</span>
<span id="cb12-17">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"distPlot"</span>, unique_part, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>))</span>
<span id="cb12-18">    )</span>
<span id="cb12-19">  )</span>
<span id="cb12-20">}</span></code></pre></div>
<p>:::</p>
<p>Also, notice that I have created another button called “Change view” within the UI. Further, this button’s name is so mind-baffling that I won’t even try to elaborate what it will do. Finally, using <code>create_UI</code>, we can set up the UI like so</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #677623;">id =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>,</span>
<span id="cb13-4">    <span class="at" style="color: #677623;">selected =</span> <span class="st" style="color: #20794D;">"panel1"</span>,</span>
<span id="cb13-5">    <span class="at" style="color: #677623;">type =</span> <span class="st" style="color: #20794D;">"hidden"</span>,</span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel1"</span>, <span class="fu" style="color: #4758AB;">create_UI</span>(<span class="st" style="color: #20794D;">"panel1"</span>)),</span>
<span id="cb13-7">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel2"</span>, <span class="fu" style="color: #4758AB;">create_UI</span>(<span class="st" style="color: #20794D;">"panel2"</span>)),</span>
<span id="cb13-8">  )</span>
<span id="cb13-9">)</span></code></pre></div>
</div>
<p>and address everything within the UI in a unique manner. Of course, such a functional approach only works well if the two panels look sufficiently similar such that it makes sense to design them through a single function. In my particular app that deals with the variance of estimators, this was the case because the tabs for the sample mean and sample variance were quite similar in their structure.</p>
<p>Now that we have covered how the UI needs to be set up, let me show you how to change the view from one panel to the next. Shockingly, let us link this to a click on the “change view” button(s) like so ::: {.cell}</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb14-2">  input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel1, </span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #677623;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #677623;">selected =</span> <span class="st" style="color: #20794D;">"panel2"</span>)</span>
<span id="cb14-4">)</span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb14-6">  input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel2, </span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #677623;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #677623;">selected =</span> <span class="st" style="color: #20794D;">"panel1"</span>)</span>
<span id="cb14-8">)</span></code></pre></div>
<p>:::</p>
<p>Also, note that the previous code ::: {.cell}</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb15-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb15-3">    tmp <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">counter</span>()</span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;">counter</span>(tmp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb15-5">    </span>
<span id="cb15-6">    output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb15-7">      x    <span class="ot" style="color: #00769E;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb15-8">      bins <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #677623;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb15-9">      <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #677623;">breaks =</span> bins, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #677623;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb15-10">    })</span>
<span id="cb15-11">  }</span>
<span id="cb15-12">)</span></code></pre></div>
<p>:::</p>
<p>won’t work anymore because the old identifiers like <code>draw_button</code> etc. need to be updated to <code>draw_button_panel1</code> or <code>draw_button_panel2</code>. Clearly, this could potentially require some code duplication to implement the server-side logic for both tabs. But since we feel particularly clever today<sup>1</sup>, let us write another function that avoids a lot of code duplication.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb16-1">render_my_plot <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(panel, counter, input, output) {</span>
<span id="cb16-2">  tmp <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">counter</span>() <span class="co" style="color: #5E5E5E;"># save current value of counter</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">counter</span>(tmp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># update counter</span></span>
<span id="cb16-4">  </span>
<span id="cb16-5">  <span class="co" style="color: #5E5E5E;"># Create identifier names</span></span>
<span id="cb16-6">  bins_name <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"bins"</span>, panel, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb16-7">  distplot_name <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"distPlot"</span>, panel, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb16-8">  demonstration_text <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"demonstration_text"</span>, panel, <span class="at" style="color: #677623;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb16-9">  </span>
<span id="cb16-10">  <span class="co" style="color: #5E5E5E;"># Render Plot</span></span>
<span id="cb16-11">  output[[distplot_name]] <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb16-12">    x    <span class="ot" style="color: #00769E;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb16-13">    bins <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #677623;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(<span class="fu" style="color: #4758AB;">pluck</span>(input, bins_name)) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-14">    <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #677623;">breaks =</span> bins, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #677623;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb16-15">  })</span>
<span id="cb16-16">  </span>
<span id="cb16-17">  <span class="co" style="color: #5E5E5E;"># Render counter text</span></span>
<span id="cb16-18">  output[[demonstration_text]] <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderText</span>(<span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb16-19">    <span class="st" style="color: #20794D;">"You have clicked the draw button"</span>,</span>
<span id="cb16-20">    <span class="fu" style="color: #4758AB;">counter</span>(),</span>
<span id="cb16-21">    <span class="st" style="color: #20794D;">"times. Congrats!"</span></span>
<span id="cb16-22">  ))</span>
<span id="cb16-23">}</span></code></pre></div>
</div>
<p>Notice a few things here: - Our function needs to know the objects <code>counter</code>, <code>input</code> and <code>output</code> to work. - Also we need to switch to double-bracket notation for assigning new variables like <code>distPlot_panel1</code> to <code>output</code>. Obviously, we couldn’t use <code>$</code> for assignment anymore but single-bracket notation like <code>output[var_name]</code> is for some reason forbidden in Shiny. At least, that’s what an error message will kindly tell you when you dare to use only one bracket.</p>
<p>So, all in all our server-side logic looks like this now ::: {.cell}</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">server <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(input, output) {</span>
<span id="cb17-2">  <span class="co" style="color: #5E5E5E;"># Counter initialization</span></span>
<span id="cb17-3">  counter <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="at" style="color: #677623;">value =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb17-4">  counter2 <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="at" style="color: #677623;">value =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb17-5">  </span>
<span id="cb17-6">  <span class="co" style="color: #5E5E5E;"># Plot Rendering</span></span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-8">    input<span class="sc" style="color: #5E5E5E;">$</span>draw_button_panel1, {</span>
<span id="cb17-9">      <span class="fu" style="color: #4758AB;">render_my_plot</span>(<span class="st" style="color: #20794D;">"panel1"</span>, counter, input, output)</span>
<span id="cb17-10">    }</span>
<span id="cb17-11">  )</span>
<span id="cb17-12">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-13">    input<span class="sc" style="color: #5E5E5E;">$</span>draw_button_panel2, {</span>
<span id="cb17-14">      <span class="fu" style="color: #4758AB;">render_my_plot</span>(<span class="st" style="color: #20794D;">"panel2"</span>, counter2, input, output)</span>
<span id="cb17-15">    }</span>
<span id="cb17-16">  )</span>
<span id="cb17-17">  </span>
<span id="cb17-18">  <span class="co" style="color: #5E5E5E;"># Panel Switching</span></span>
<span id="cb17-19">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-20">    input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel1, </span>
<span id="cb17-21">    <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #677623;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #677623;">selected =</span> <span class="st" style="color: #20794D;">"panel2"</span>)</span>
<span id="cb17-22">  )</span>
<span id="cb17-23">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-24">    input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel2, </span>
<span id="cb17-25">    <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #677623;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #677623;">selected =</span> <span class="st" style="color: #20794D;">"panel1"</span>)</span>
<span id="cb17-26">  )</span>
<span id="cb17-27">}</span></code></pre></div>
<p>:::</p>
<p>The complete app that we have just build can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/06_tabs.R">here</a>.</p>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>Alright, I hope this helps you to build your own small Shiny app. <a href="https://rappa.shinyapps.io/estimator-variance/">In my particular case</a>, I had to use another cool function from the <code>shinyjs</code> package to update the text on the UI such that it appears in red for a second (in order for the user to notice what changes). And because I have the feeling that <code>shinyjs</code> has way more in store for us, I will end this already quite long blog post here and save that (exciting) story for another time. Hope you will be there when I talk about <code>shinyjs</code>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>And with that I really mean today. When I built my Shiny app, I actually used code duplication. But in hindsight, I feel somewhat embarrassed to leave it as it is for this blog post. Thus, I figured out how to make it work with a function.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Shiny</category>
  <guid>https://albert-rapp.de/posts/06_shiny_app_learnings/06_shiny_app_learnings.html</guid>
  <pubDate>Thu, 09 Dec 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot tips: Arranging plots</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots.html</link>
  <description><![CDATA[ 


<p>In this week’s <a href="https://github.com/rfordatascience/tidytuesday">TidyTuesday</a>, I noticed that I am frequently not using only <code>ggplot2</code> to create plots. In fact, it has become essential to me to leverage the powers of other great additional packages that align well with <code>ggplot2</code>. Therefore, I decided to extend my <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a> by introducing a few packages I use quite often.</p>
<p>In this post, I want to cover how to arrange multiple plots. In particular, I will talk about the fantastic <a href="https://patchwork.data-imaginist.com/"><code>patchwork</code></a> package by <a href="https://www.data-imaginist.com/">Thomas Lin Pedersen</a> which helps to arrange plots quite intuitively. Further, I want to take a glance at <a href="https://ggforce.data-imaginist.com/"><code>ggforce</code></a>, another package written by the same author as <code>patchwork</code>, because it also has a neat function for arranging plots. However, <code>ggforce</code> can do way more and I will demonstrate that in another installment of this series. Also, if you like to watch and listen rather than read about how the two packages work, you can check out the corresponding video on <a href="https://youtu.be/C5Ik-WkPuGQ">YouTube</a>.</p>
<p>So, let us begin by creating a data set we want to fiddle with for plotting purposes. For simplicity, let us use the <code>penguins</code> data (without missing values) from the <code>palmerpenguins</code> package.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_light</span>())</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># All missing values can be filtered out by filtering the `sex` variable</span></span>
<span id="cb1-5">dat <span class="ot" style="color: #00769E;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(sex))</span></code></pre></div>
</div>
<section id="arrange-plots-via-patchwork" class="level2">
<h2 class="anchored" data-anchor-id="arrange-plots-via-patchwork">Arrange Plots via patchwork</h2>
<p>Often, we want to show multiple plots that tell a story when looked at together. Using <code>patchwork</code>, we can easily compose a single plot consisting of subplots. This is done by using the simple symbols <code>+</code> resp. <code>/</code> to display plots next to resp. on top of each other.</p>
<p>For demonstration purposes, let us generate a few simple plots.</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1">point_plot <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, flipper_length_mm, <span class="at" style="color: #677623;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>)</span>
<span id="cb2-4">point_plot</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1">point_plot2 <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, bill_depth_mm, <span class="at" style="color: #677623;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>)</span>
<span id="cb3-4">point_plot2</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># plot_plot is obviously a fun name</span></span>
<span id="cb4-2">boxplot_plot <span class="ot" style="color: #00769E;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> body_mass_g, <span class="at" style="color: #677623;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span>
<span id="cb4-5">boxplot_plot</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-2-3.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Clearly, showing each plot separately is boring and may not tell a story convincingly. Possibly, here you may want to say that the length and depth measurements give no clear distinction between male and female penguins but the weight measurements offers a better distinguishabilty between sexes. Maybe, if we see all plots together, we can tell that story without boring the reader.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb5-2">p <span class="ot" style="color: #00769E;">&lt;-</span> (point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2) <span class="sc" style="color: #5E5E5E;">/</span> boxplot_plot</span>
<span id="cb5-3">p</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>See how I have used <code>+</code> to put the point plots next to each other and <code>/</code> to plot the boxplots below the two point plots. Obviously, that was super easy and neat. But this simple arrangement leads to a doubling of the legends which is somewhat bothersome. However, this is no cause for concern. <code>plot_layout()</code> is there to collect those legends for you.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Of course, this leaves you with two legends which is kind of superfluous. The easy way to get rid of this is to plot no legends for the boxplots.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">boxplot_plot <span class="ot" style="color: #00769E;">&lt;-</span> boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">guides</span>(<span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">"none"</span>)</span>
<span id="cb7-2">p <span class="ot" style="color: #00769E;">&lt;-</span> (point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2) <span class="sc" style="color: #5E5E5E;">/</span> boxplot_plot</span>
<span id="cb7-3">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now, what about legend positioning? Well, we already know how that usually works for a single plot (via <code>theme()</code> in case you forgot) and the good news is that the exact same thing works with patchwork as well. But beware to apply an additional <code>theme()</code> layer to the whole plot and not just to the last plot added to our composed plot. To make sure that happens, we have to add this layer via <code>&amp;</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>By the same logic, we can make additional changes to the whole plot e.g.&nbsp;to change the color mapping.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #677623;">palette =</span> <span class="st" style="color: #20794D;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Next, let us control the layout a bit more and annotate the plot with <code>plot_annotation()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1">(point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.7</span>, <span class="fl" style="color: #AD0000;">0.3</span>))) <span class="sc" style="color: #5E5E5E;">/</span> </span>
<span id="cb10-2">  boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>, <span class="at" style="color: #677623;">heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">plot_annotation</span>(</span>
<span id="cb10-5">    <span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">"Look at that arrangement!"</span>,</span>
<span id="cb10-6">    <span class="at" style="color: #677623;">subtitle =</span> <span class="st" style="color: #20794D;">"Wow"</span>,</span>
<span id="cb10-7">    <span class="at" style="color: #677623;">caption =</span> <span class="st" style="color: #20794D;">"Olà."</span>,</span>
<span id="cb10-8">    <span class="at" style="color: #677623;">tag_levels =</span> <span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb10-9">    <span class="at" style="color: #677623;">tag_prefix =</span> <span class="st" style="color: #20794D;">"("</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #677623;">tag_suffix =</span> <span class="st" style="color: #20794D;">")"</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;">&amp;</span> </span>
<span id="cb10-12">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">"Penguin sex"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #677623;">palette =</span> <span class="st" style="color: #20794D;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>We did quite a lot here, so let’s recap:</p>
<ul>
<li>We changed the widths of the plots in the first row by passing a vector of relative widths to <code>widths</code> in <code>plot_layout()</code>.</li>
<li>Same thing with <code>heights</code> in <code>plot_layout()</code> to make the boxplots larger.</li>
<li>Renamed legend label with the regular <code>labs()</code> function.</li>
<li>Added a title, subtitle, caption and tags to the <strong>whole</strong> plot with <code>plot_annotation()</code>.</li>
</ul>
<p>Also, if you want to have the tags to only label the upper and lower row, you may want to wrap the first row together by <code>wrap_elements()</code>. Think of this as creating a new single unit.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">wrapped_plots <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">wrap_elements</span>(</span>
<span id="cb11-2">  point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.7</span>, <span class="fl" style="color: #AD0000;">0.3</span>))</span>
<span id="cb11-3">)</span>
<span id="cb11-4">(wrapped_plots) <span class="sc" style="color: #5E5E5E;">/</span> </span>
<span id="cb11-5">  boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #677623;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>, <span class="at" style="color: #677623;">heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">plot_annotation</span>(</span>
<span id="cb11-8">    <span class="at" style="color: #677623;">title =</span> <span class="st" style="color: #20794D;">"Look at that arrangement!"</span>,</span>
<span id="cb11-9">    <span class="at" style="color: #677623;">subtitle =</span> <span class="st" style="color: #20794D;">"Wow"</span>,</span>
<span id="cb11-10">    <span class="at" style="color: #677623;">caption =</span> <span class="st" style="color: #20794D;">"Olà."</span>,</span>
<span id="cb11-11">    <span class="at" style="color: #677623;">tag_levels =</span> <span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb11-12">    <span class="at" style="color: #677623;">tag_prefix =</span> <span class="st" style="color: #20794D;">"("</span>,</span>
<span id="cb11-13">    <span class="at" style="color: #677623;">tag_suffix =</span> <span class="st" style="color: #20794D;">")"</span></span>
<span id="cb11-14">  ) <span class="sc" style="color: #5E5E5E;">&amp;</span> </span>
<span id="cb11-15">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #677623;">palette =</span> <span class="st" style="color: #20794D;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice how the upper row reinstated the default colors and has two legends. This demonstrates how <code>wrap_elements()</code> made the plots “independent” from the overall theming via <code>&amp;</code>, so to speak. On the bright side, there is no (C) tag anymore.</p>
<p>Unsurprisingly, <code>patchwork</code> can do much more but for starters I think the previous examples will already get you quite far. They are you “80/20 leverage points”, if you will. But in order to add one more neat feature, let me finish our intro to <code>patchwork</code> by showing you how to create plots in plots via insets.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Tweak boxplots a bit for better visual fit to point_plot</span></span>
<span id="cb12-2">plt <span class="ot" style="color: #00769E;">&lt;-</span> boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">coord_flip</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #677623;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>))</span>
<span id="cb12-6"></span>
<span id="cb12-7">point_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #677623;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">60</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">inset_element</span>(</span>
<span id="cb12-10">    plt, </span>
<span id="cb12-11">    <span class="at" style="color: #677623;">left =</span> <span class="fl" style="color: #AD0000;">0.01</span>, </span>
<span id="cb12-12">    <span class="at" style="color: #677623;">right =</span> <span class="fl" style="color: #AD0000;">0.4</span>,</span>
<span id="cb12-13">    <span class="at" style="color: #677623;">top =</span> <span class="fl" style="color: #AD0000;">0.99</span>, </span>
<span id="cb12-14">    <span class="at" style="color: #677623;">bottom =</span> <span class="fl" style="color: #AD0000;">0.6</span></span>
<span id="cb12-15">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="create-subplots-via-ggforce" class="level2">
<h2 class="anchored" data-anchor-id="create-subplots-via-ggforce">Create Subplots via ggforce</h2>
<p>I really enjoy arranging plots with <code>patchwork</code> because, to me, the syntax feels quite intuitive (mostly). However, as you probably noticed, I had to design each subplot and arrange them by hand. Clearly, if I want to use a grid-like arrangement to display each combination of two variables from a given set of variables, this may become tedious.</p>
<p>Luckily, there is the <code>ggforce</code> package that has a neat faceting function to accomplish just that. As was already mentioned above, apart from that, the <code>ggforce</code> package offers even more cool stuff which we will look at in a future blog post.</p>
<p>With <code>facet_matrix()</code> it becomes quite easy to get a grid of subplots to display multiple combinations of two variables. For instance, take a look at this.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">library</span>(ggforce)</span>
<span id="cb13-2">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> .panel_x, <span class="at" style="color: #677623;">y =</span> .panel_y, <span class="at" style="color: #677623;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g)</span>
<span id="cb13-7">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now, while this is not a particular beautiful plot, it gives us a quick overview of interesting variables which might be great for an exploratory analysis. Notice how we had to use <code>.panel_x</code> and <code>.panel_y</code> as placeholder for the individual variables. We could use the <code>geom_auto*()</code> functions to avoid typing that as they default to the correct values for <code>x</code> and <code>y</code>. Consequently, we could have written</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_autopoint</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb14-5">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g)</span>
<span id="cb14-6">  )</span></code></pre></div>
</div>
<p>With a little bit of tweaking, we can make this plot more interesting. For example. it would be neat if we had density plots on the diagonal. No problem! Add another <code>geom_autodensity()</code> layer and make sure that <code>facet_matrix()</code> understands to map only this layer to the diagonal subplots.</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">geom_autopoint</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 1</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">geom_autodensity</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #677623;">position =</span> <span class="st" style="color: #20794D;">"identity"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 2</span></span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb15-6">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g),</span>
<span id="cb15-7">    <span class="at" style="color: #677623;">layer.diag =</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb15-8">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>See how <code>layer.diag = 2</code> maps the diagonal elements to the second line of <code>geom_*</code> code. Similarly, we can manipulate the content of the upper and lower triangle in this grid by changing <code>layer.lower</code> or <code>layer.upper</code> in <code>facet_matrix()</code>. Let’s add another layer to see that in action.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb16-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_autopoint</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 1</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;">geom_autodensity</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.75</span>, <span class="at" style="color: #677623;">position =</span> <span class="st" style="color: #20794D;">"identity"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 2</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;">geom_hex</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> .panel_x, <span class="at" style="color: #677623;">y =</span> .panel_y), <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.75</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 3</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g),</span>
<span id="cb16-8">    <span class="at" style="color: #677623;">layer.diag =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #677623;">layer.lower =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb16-10">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Last but not least, let me mention that we can also easily create what is called an “asymmetric grid” in <code>ggforce</code> by mapping rows and columns manually. This is great for having categorical variables on one axis and numerical variables on the other axis.</p>
<div class="cell">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(</span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> .panel_x, <span class="at" style="color: #677623;">y =</span> .panel_y, <span class="at" style="color: #677623;">group =</span> .panel_x)</span>
<span id="cb17-5">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb17-7">    <span class="at" style="color: #677623;">cols =</span> <span class="fu" style="color: #4758AB;">vars</span>(sex, species), </span>
<span id="cb17-8">    <span class="at" style="color: #677623;">rows =</span> <span class="fu" style="color: #4758AB;">vars</span>(bill_depth_mm<span class="sc" style="color: #5E5E5E;">:</span>body_mass_g)</span>
<span id="cb17-9">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Beware that <code>geom_boxplot()</code> is a bit tricky as it requires the <code>group</code> argument to be explicitly set. Furthermore, if you want to add another aesthetic, e.g.&nbsp;<code>fill</code>, you will have to set <code>group</code> via <code>interaction()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb18-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(</span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb18-5">      <span class="at" style="color: #677623;">x =</span> .panel_x, </span>
<span id="cb18-6">      <span class="at" style="color: #677623;">y =</span> .panel_y, </span>
<span id="cb18-7">      <span class="at" style="color: #677623;">fill =</span> island, </span>
<span id="cb18-8">      <span class="at" style="color: #677623;">group =</span> <span class="fu" style="color: #4758AB;">interaction</span>(.panel_x, island)</span>
<span id="cb18-9">    )</span>
<span id="cb18-10">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-11">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb18-12">    <span class="at" style="color: #677623;">cols =</span> <span class="fu" style="color: #4758AB;">vars</span>(sex, species), </span>
<span id="cb18-13">    <span class="at" style="color: #677623;">rows =</span> <span class="fu" style="color: #4758AB;">vars</span>(bill_depth_mm<span class="sc" style="color: #5E5E5E;">:</span>body_mass_g)</span>
<span id="cb18-14">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This concludes our short summary of possibilities to arrange plots. In the next post of this <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a> we will take a closer look at <code>ggforce</code>. I hope you enjoyed today’s blog post and I look forward to “see” you at my next blog post. In the meantime, feel free to leave a comment or a click on the applause button below.</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots.html</guid>
  <pubDate>Thu, 28 Oct 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>An Exploratory Introduction to the Plotly Package</title>
  <link>https://albert-rapp.de/posts/05_exploratory_intro_plotly/05_exploratory_intro_quarto.html</link>
  <description><![CDATA[ 


<p>Currently, I am quite curious about interactive plots which is why I am reading <a href="https://alignedleft.com/work/d3-book-2e">Scott Murray’s highly recommendable book on D3</a>. For those of you who don’t know it, <a href="https://d3js.org/">D3.js</a> is a JavaScript library that is great for creating amazing interactive <strong>D</strong>ata-<strong>D</strong>riven-<strong>D</strong>ocuments on the web.</p>
<p>Unfortunately, compared to <code>ggplot2</code>, D3’s learning curve feels quite steep and I am not yet able to work with it yet. Fortunately, there are other interactive graphing libraries out there that I can use to get a first feel for creating interactive plots. For instance, there is another JavaScript library <a href="https://plotly.com/graphing-libraries/">plotly.js</a>, which is built on top of D3 and can be easily used in R through the <code>plotly</code> package.</p>
<p>Therefore, I decided to play around with this R package in the hope of figuring out how it works. Also, I summarized what I played around with in this blog post by writing what I like to call an “exploratory introduction”.</p>
<p>As the name implies, this is not really a formal introduction to <code>plotly</code> and more of an experience report. Nevertheless, I suspect that this can be useful for people who have already knowledge about <code>ggplot2</code> and want to get started with <code>plotly</code> as well.</p>
<p>Further, in case you do not want to read my informal commentary, you can also check out the <a href="https://youtu.be/rzpbQ93pmPM">video version</a> of this blog post. Think of it as a summary of this blog post.</p>
<p>As of now, I plan on doing a similar exploratory introduction to <a href="https://rstudio.github.io/r2d3/"><code>r2d3</code></a> which is an R interface to D3. Possibly, this will then be combined with knowledge I gathered from Scott Murray’s book.</p>
<section id="one-side-note-before-we-dive-in" class="level2">
<h2 class="anchored" data-anchor-id="one-side-note-before-we-dive-in">One Side Note before We Dive in</h2>
<p>According to <a href="https://en.wikipedia.org/wiki/JavaScript">Wikipedia</a>, JavaScript “is one of the core technologies of the World Wide Web”. Surprisingly, JavaScript’s ubiquity on the interwebs also messed with this blog’s theme template such that font formatting was completely destroyed when I included an interactive <code>plotly</code> plot.</p>
<p>To work around this issue, I had to save the plots in an auxillary html-file and include it as a separate frame. This is why you will find that, here, all plots are saved in a variable (for later export) even if it does not really make sense to save it for plotting purposes.</p>
<p>Finally, be aware that, for some reason, interactive <code>plotly</code> plots are quite large such that it might take some time to load them all.</p>
<p><strong>EDIT (July 10, 2022)</strong>: I have moved this blog to <a href="https://quarto.org/">Quarto</a>. Now, the issues with the theme do not persist anymore. However, I have left the remaining blog post unchanged.</p>
</section>
<section id="from-ggplot2-to-plotly" class="level2">
<h2 class="anchored" data-anchor-id="from-ggplot2-to-plotly">From ggplot2 to plotly</h2>
<p>Let us begin by transforming a ggplot to a plotly plot. Using a built-in function from the <code>plotly</code> package, it is straight-forward to convert a ggplot.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(plotly)</span>
<span id="cb1-3">p <span class="ot" style="color: #00769E;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(hwy, cty, <span class="at" style="color: #677623;">fill =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>, <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7">plotly_p <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplotly</span>(p) </span>
<span id="cb1-8">plotly_p </span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-9e36f9b7287fc3ff1689" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-9e36f9b7287fc3ff1689">{"x":{"data":[{"x":[25.9632802305743,23.1190123721957,25.9887250857428,25.1541267812252,23.6735808175057],"y":[16.1715933058411,14.6479072932154,15.8091512074694,15.1368680473417,15.2355305410922],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[28.6703195737675,28.6149087218568,31.1211074428633,29.8184731947258,26.0166396560147,26.0452899832278,27.1070123938844,26.3514895748347,24.9674781084061,27.733022740297,26.9885691683739,25.1537872454152,25.0515580063686,25.2918943323195,25.0240427458659,29.1382941171527,26.7819375887513,25.1848567074165,27.3865686707199,24.7929245101288,26.9864249885082,27.17025558725,29.0991133820266,31.0163148777559,31.1627298576757,26.3702192097902,25.6694392364472,26.6802335521206,29.8987428184599,32.6993851676583,35.3040778577328,37.3269609143957,35.3042107261717,28.6743625726551,26.0449774477631,29.0249908044934,29.1151518819854,24.3526777792722,44.3510802071542,29.1143451901153,26.0465886261314,28.7107645461336,29.0018962386996,29.0531374858692,29.365320539102,23.1118819903582,24.3898693742231],"y":[18.0268419560045,21.0923218129203,20.0821755310521,21.2593561770394,16.2463095970452,17.7856982279569,18.2053764721379,18.3065409393981,16.1083426604047,19.8828511305153,18.8821516860276,14.6140097845346,17.2346900293604,16.7395765578374,15.1742942491546,21.0763557422906,18.602791868709,20.2390499321744,20.0538449784741,19.3221163321286,20.3973518555984,21.1337628751993,20.7003657264635,21.2046494798735,21.8263884020969,17.8563024202362,17.6979020724073,18.3946897083893,24.3059953782707,23.7451707553118,25.8588577108458,28.2569796077907,25.7609339870512,20.6208273338154,18.6892111457884,21.1989603221416,22.1523408697918,16.6938118636608,32.8647365767509,21.1358172791079,18.7371968301013,21.7606279155239,21.2014816241339,21.0122608136386,21.1350337892771,16.1327578140423,16.8209167068824],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.3015260661021,24.7344928687438,23.22923045028,27.0733265019953,30.0104306235909,26.3798321515322,29.0909686008468,25.7206313757226,26.2151436597109,26.7335966616869,29.6570909235626,30.7646176569164,26.1699584566057,25.9879311926663,28.3218959607184,31.2650761147961,31.610142829828,27.030379207246,25.7648798856884,25.7436292188242,24.8172684831545,25.3088509138674,26.0846521619707,25.6422519126907,26.6405052188784,27.6901269862428,25.2293164463714,28.8143278062344,26.6189453914762,30.8523996127769,30.8343821903691,25.8201756801456,26.1517681429163,27.7379239622504,28.8464452585205,28.6597787914798,28.0418295787647,29.0388746505603,25.6351769994944,25.903115618974,25.6681236999109],"y":[14.9282032223418,17.2408581089228,16.1730884993449,19.2358713498339,21.8597383245826,17.739429394342,17.9667473772541,16.7861409256235,17.7430736832321,18.3815162934363,20.7930580658838,20.7557921497151,17.7476593397558,18.1878459936008,18.959330496937,23.3631126113236,23.2660154510289,18.8843652132899,19.1294103706256,18.2282944915816,19.1442729048431,18.790104723908,17.6082010868937,16.3269942136481,16.9268797408789,17.8116808157414,16.0743107318878,21.3014747805893,21.3279924029484,20.7924861503765,20.9507467901334,17.7296510787681,17.9029145939276,18.8719521228224,21.2923647090793,18.0586267577484,18.9397211674601,21.1957965876907,16.1432556403801,17.7616114661098,17.3433365432546],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.0227239465341,24.048225129582,22.2693779760972,22.3070750379935,23.6491686612368,23.937161385268,17.3110202835873,22.2632277594879,21.3645934749395,22.7608061537147,23.2392797995359],"y":[17.6407954813913,17.2315873414278,16.1862673345953,15.7100894937292,17.2732514120638,16.7496599560603,11.2670832933858,15.2271214475855,15.2604920431972,15.6576757021248,16.1487340793014],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[18.8038323123008,18.063645818457,16.8218950323761,16.6227737117559,19.2495132723823,18.7078005781397,11.9210049238056,16.6771984776482,14.7399151366204,15.8066530570388,11.6486974637955,16.7692785060033,17.1920727718622,15.7945951608941,12.1678999835625,14.9525950491428,16.3881444437429,16.8512996047735,14.6970500269905,16.6484100719914,17.1784525316209,15.842498434335,16.2687410986051,17.1372643891722,15.0569765023887,17.2878677111119,20.0598334677517,19.9754375632852,21.7049041287974,16.99371089302,18.7772753000259,17.6609749253839,20.2609834298491],"y":[15.2739422271028,13.874752718769,12.9663267077878,13.8109168803319,14.1778485067189,14.2077149588615,9.39028912484646,10.8711940122768,11.0632523125038,12.1503574095666,9.32648486103863,12.8863976005465,12.9027752686292,11.9117981331423,8.62526156269014,11.1297340260819,11.1016412440687,13.1973705230281,11.3030856978148,14.3786323694512,14.3183879606426,12.7129316097125,12.7228046262637,12.838467425108,11.1634765574709,12.7664306921884,14.7897396085784,15.6576763857156,16.7139430992305,15.0609453359619,14.7147574739531,14.9222336109728,16.129337281175],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[25.9226411746815,25.0580323230475,26.0342913210392,24.3072739636526,20.8666007431224,22.1550836434588,22.9800868816674,21.6207627182826,20.3274748099968,32.7456976242363,32.1159039769322,31.7511060817167,29.1817665183917,31.7604314571246,33.6243229450658,36.2746180705726,36.2066101837903,29.3059377610683,26.0796815896407,29.1764135122299,27.7087191184983,27.1792592413723,23.6299874551594,23.7126930655912,24.002088243328,26.2885680496693,25.8434132281691,26.2295783450827,25.7966720595956,44.2943236265331,40.7467814737931,29.1862527746707,26.3426234392449,28.0725765978917,28.8410276254639],"y":[18.0038693202659,17.9531263396144,16.6992158096284,16.2797883456573,15.3386000169441,14.7645690463483,14.7140759373084,14.9923510914668,14.0210552355275,28.1040279934183,24.2071043718606,25.2174598235637,22.923014947027,24.2878879055381,25.926747511141,25.1751742508262,24.1999917615205,21.2072396272793,18.8270458169281,19.2132031809539,20.0715003600344,20.1752181112766,16.9082250693813,16.3079726785421,17.3874912271276,21.3235840260983,18.8076790960506,18.8201768135652,18.8812075568363,34.7247539224103,29.047002273798,21.0092751704156,18.6441068213433,19.6789087262005,19.8743076290935],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.730048439838,14.7980333622545,19.7649131594226,16.6015379605815,17.0696817765012,19.0886254290119,14.0101853031665,14.8739927485585,16.9964049253613,16.9631157293916,17.3576533049345,12.3767684595659,17.0529710939154,16.2631027843803,18.2608779279515,14.7193599198014,17.1188509345055,16.8136931145564,18.1973494859412,17.204929156974,18.6537530535832,16.6480911968276,18.8563245458528,19.089282071963,17.2466204512864,22.078106302768,18.607719351165,19.7739009121433,16.9270011244342,11.6823010399938,18.7592530315742,17.6001228243113,14.3890627866611,15.241813872382,18.1227199528366,17.998966319114,14.6571209438145,17.3630752617493,15.7626066613942,18.0492759158835,16.6773183930665,18.7932654891163,19.1618988027796,16.977660538815,17.1113716127351,17.2902150573209,20.2856964465231,17.8847745256498,24.6714179188013,24.2114164480939,26.8889872375876,25.2811944548041,26.0054945992306,23.3202081037685,19.8055693361908,19.684732459113,19.0933377850801,16.6595744365826,19.8246874568984,17.0981509659439,14.8495922138914,17.6678228635341],"y":[14.2964044753462,10.9033410606906,13.9893802784383,12.7692566603422,11.6732674833387,14.0001104190946,11.3055463770404,11.0143155213445,14.3423404006287,12.683192146197,13.2694795124233,8.99742790609598,12.9715811144561,11.2329552609473,12.7454215493053,11.3970530265942,11.2437077347189,11.0126694800332,12.3045534135774,13.8120578838512,14.9353269757703,13.8745042527094,12.8887862261385,13.2812252065167,12.6402978861704,16.6602583160624,14.8215863356367,15.0860665231943,13.7818467048928,8.66511955801398,13.7729308404028,13.0123015075922,10.8567134732381,11.1376841330901,12.0637351742014,12.0738092845306,11.0748408121988,10.6332696324214,10.6227469965816,11.8151946324855,14.2389326959848,12.6744854193181,13.2283776756376,12.7918610557914,13.6960299642757,14.6229564331472,13.6183549216017,12.3707354582846,18.3206833882257,17.8965836307034,19.8519688231871,19.0651665486395,19.9522814774886,17.7195451492444,15.3294023854658,15.9411995083094,15.3130200272426,14.9159148991108,15.7405165003613,14.3016370672733,11.1021408595145,13.0385796908289],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(235,235,235,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[10.0135783266276,45.9861993443221],"tickmode":"array","ticktext":["20","30","40"],"tickvals":[20,30,40],"categoryorder":"array","categoryarray":["20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.32028694470413,36.0297285403963],"tickmode":"array","ticktext":["10","15","20","25","30","35"],"tickvals":[10,15,20,25,30,35],"categoryorder":"array","categoryarray":["10","15","20","25","30","35"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":null,"line":{"color":null,"width":0,"linetype":[]},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"72197a1d74e3":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"72197a1d74e3","visdat":{"72197a1d74e3":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Marvel at what one can do here: * Get additional information by hovering your cursor over a point * Filter classes by clicking on the corresponding legend items * Click and draw a rectangle with your cursor to zoom into the plot</p>
<p>But there is one thing that bothers me. If I move the cursor across the plot window, then the plotly options bar at the top of the window overlaps the “class” legend label. Can I fix this by moving the legend to the bottom?</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #677623;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">ggplotly</span>(p)</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-0785e72cbb5e363f6261" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-0785e72cbb5e363f6261">{"x":{"data":[{"x":[25.7903056101874,22.7720155455172,25.8284794168547,24.7718233393505,24.0747538495809],"y":[15.9529743781313,15.2578137861565,15.7039590280503,14.8251335514709,15.3110026558861],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[28.724928788282,28.9704796480015,30.9870998442173,30.013667422533,26.1297006333247,25.7661297576502,26.6709654502571,25.7243557645008,25.234310978651,27.8425210746005,27.01237438526,24.8217009508982,25.0989404488355,25.008470980823,25.2757840847597,28.8629731377587,26.9723513523117,25.3776418248191,26.7350541114807,24.893941555731,26.8087899804115,26.7782659891993,28.7125835966319,31.1348417585716,30.7956661624834,26.0982311692089,25.986617908068,26.8407520489767,29.8874387182295,33.1094608008862,35.0663404358551,37.3899824012071,34.6253319090232,29.0798843922094,26.1778162149712,28.7758668314666,28.9587741680443,23.9064012248069,44.1673328714445,29.2041312802583,25.786484862119,28.6570427166298,29.3539843713865,28.6049159254879,29.234054916352,23.0753620384261,23.9049132226035],"y":[17.8925527136773,21.0434985555708,20.0566824221984,20.7797578092664,15.8566655972973,17.906465687789,18.1920452861115,18.1096638107672,15.914330833964,20.2184331834316,19.0520088246092,14.9812959449366,16.6603707809001,17.0117103423923,14.7963213704526,21.3472724732012,19.2231777140871,20.2659301817417,20.0014320703223,18.7454678632319,19.6051431367174,20.7712979026139,20.678597587347,21.0977475687861,21.6747728412971,17.7587959086522,17.8635605735704,17.9026645092294,24.1314437408,24.2921842696145,26.1579096404836,27.9160452954471,26.3830583419651,20.8710483968258,19.3908748973161,21.3054976550862,22.2893820943311,16.8976055944338,32.6384669847786,21.3470540510491,18.6262985328212,21.6908325079829,20.7791306266561,21.0205695195124,20.96557775978,16.2032643554732,16.9247977515683],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.2555983712897,24.6040822522715,23.371383122541,27.0034436890855,30.0572004802525,26.19763076175,29.3192191230133,26.3487240821123,26.1579108137637,26.8603754129261,30.0338290737942,31.1186988372356,25.9212110605091,26.2972563639283,28.2321972277015,30.9625962115824,32.2083541858941,26.7559733318165,26.0697811299935,25.886404527165,24.6402083506808,25.1524827990681,25.8793717468157,26.2291478222236,26.6700634390116,27.762477626279,25.3831665214151,28.6695618882775,26.847571022436,31.0168790528551,31.189437921904,25.9454876946285,25.6025902045891,27.9157135605812,28.8411479506642,29.1027068309486,27.9518647195771,28.6615551384166,26.3473377369344,25.8242692114785,26.0169653160498],"y":[14.8953325880691,16.8613941550255,15.9748868260533,18.9327213149518,21.938785286434,17.8003435563296,18.2215826328844,17.2873896896839,18.2536358093843,17.6551160881296,20.8027632459998,21.098816501908,18.3068225651979,18.3760678159073,18.7016517814249,22.9853085631505,23.3630731543526,19.3577070601285,18.8130840901285,18.288644310832,18.9457038519904,18.6052193302661,18.3346564967185,16.0556796956807,17.1784807609394,18.0136647423729,16.0130138317123,21.1931421441957,20.6717505322769,20.9602813456207,21.0825330002233,18.2210282724351,17.8965382369235,19.1594599049538,21.2606941564009,18.3605714950711,19.0988465759903,20.7787920771167,16.3869063211605,17.8733189068735,17.3051611803472],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.2436659170315,24.359202904813,22.2927130788565,21.6395247431472,24.3332251219079,23.6545716894791,17.043558316119,22.0168799070641,21.0997491741553,22.9847903553396,23.1066487213597],"y":[17.8936534944922,16.7717906910926,16.3568065276369,16.3710069904104,17.0795188797638,17.1998922856525,11.1486384924501,15.1487537892535,15.1880150461569,15.819291770272,16.1008327728137],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.3583568325266,18.2769325692207,16.9181487351656,17.0696133704856,18.8893112622201,18.8054693585262,11.8810363415629,16.7790170403197,14.6656146453694,16.3778768775985,12.0871872410178,17.2905434036627,16.9100787121803,16.2522373348475,11.7570535618812,14.7224994767457,15.6161275539547,17.2823986206204,14.716796085611,16.9016562066972,16.6318993443623,15.9302804846317,16.3703092649579,17.1750570645556,14.6980415524915,16.9292621279135,19.9204504719004,20.1215052129701,21.6503010740504,16.8861210213974,19.0717437360436,18.1419879853725,19.8400860490277],"y":[14.7295976221561,14.3320175599307,13.1952973082662,13.9308224350214,13.7267280444503,13.6049826210365,9.34319850876927,10.7924947576597,11.1047369290143,12.3111292077228,9.00742958355695,12.7434799160808,12.8084746748209,11.6380962213501,8.65005658529699,10.6992341427132,10.7474580323324,12.7258022835478,11.315518155694,14.3592338424176,13.9373520370573,13.1998262356967,12.7819824483246,13.0008134597912,10.7719239370897,12.8659474952146,15.108105465211,16.3423550032079,16.9516295347363,14.950253107585,15.076066827774,14.857013063319,16.3688839668408],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[25.8935357488692,24.6959489177912,26.3180492438376,24.1171588290483,21.1383844038472,22.2608585972339,23.2572645789012,21.6818498063833,19.9203718435019,32.6244409456849,32.2990269854665,32.1888898134232,29.3840117704123,31.7106283217669,34.26057099998,36.2090697463602,35.7892198365182,29.1157645413652,26.2127628112212,29.0714059002697,27.7466367535293,27.3105274077505,23.9137959979475,24.2375538367778,23.7496184593067,26.2496919317171,26.0498366693035,26.2489467319101,26.1783264232799,43.6482939757407,40.9841879181564,29.3277286468074,25.6443388776854,28.0356947027147,28.6215887466446],"y":[18.3697866076604,17.9550374550745,16.9909797791392,15.7147419596091,14.8646785231307,15.1604994056746,14.7017868565395,15.3466760832816,14.3527991058305,28.3964536949992,24.2804143967107,24.8218418613076,22.7763045856729,24.0913435688242,26.0189807074144,25.3012405248359,24.0394000533968,21.184145619534,19.2783406956121,19.0962403230369,20.275354831107,20.1169124964625,16.9880163259804,15.9446448933333,17.3009320730343,21.0393345892429,18.9082662863657,18.8189822979271,18.658237413317,35.3564461534843,29.3511660929769,21.2645823951811,19.3979247581214,20.1174187488854,20.1012118879706],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[20.3091032190248,15.2790488397703,20.3703400539234,17.3810272729024,16.8423634743318,19.3835723834112,13.8388772616163,15.1881354207173,17.0413506640121,16.7609218239784,17.1190051265061,11.7355996763334,17.0493059309199,15.8114099489525,18.2958289448172,15.2717469278723,16.6863698314875,16.7214604120702,18.2777986032888,16.7766986306757,19.1237342873588,17.0431228343397,19.3670286318287,18.8174412095919,16.9898404303938,22.1711793037131,18.8919789534062,20.2430439796299,17.002413056232,11.9920438395813,19.0097224371508,17.9596012409776,13.8668470673263,15.3242430800572,17.6162499936298,17.710286067985,15.330612295121,17.0033478451893,15.6541506493464,18.2786298984662,17.2800474211574,18.6895408738404,18.8552179945633,17.270839930512,17.0907003609464,16.8591266516596,19.8057328227907,17.663447930105,24.7717334317043,24.2040410630405,27.3312225403264,25.0476173084229,26.0616730352864,23.1455693056807,19.9815690508112,19.8115724381059,18.9053693961352,17.3639608250931,19.6069440536201,17.1897698886693,15.3386149339378,18.0861588282511],"y":[13.7484446803108,10.8615721555427,13.7718579838052,12.7553339023143,12.1281002700329,14.3343667589128,10.9567549252883,11.029571913369,13.7087988255545,12.6184138052166,12.8490829955786,8.67484060637653,12.8811033789068,11.1814123842865,12.8114169809967,10.7539191341028,11.0069294702262,11.3519716313109,12.0284768361598,14.3121612045914,15.1124715959653,14.2766966123134,12.9011145597324,13.2724121438339,13.3588166361675,16.819963551499,14.7453501764685,14.6218520930037,14.1381371498108,8.68833702858537,13.6211928056553,13.0973502412438,10.6101424060762,10.9536839462817,11.8574099281803,12.271274426952,10.7452520407736,11.045230272226,11.2352353159338,12.2972681432962,14.395872390829,12.9472908236086,12.9540135068819,12.749174339138,13.6933812800795,15.0185695521533,14.1117930771783,12.1784930326045,17.7306977668777,18.1908114098012,19.6711426123977,19.0062425144017,20.3974551795051,18.1306399008259,15.1892794370651,16.3103401536122,14.6347063351423,14.6028540583327,15.7258252132684,13.8871904157102,10.7522423923016,13.1873408582062],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(235,235,235,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[10.1140130165778,45.7889195312001],"tickmode":"array","ticktext":["20","30","40"],"tickvals":[20,30,40],"categoryorder":"array","categoryarray":["20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.31473710688762,36.6917656318937],"tickmode":"array","ticktext":["10","20","30"],"tickvals":[10,20,30],"categoryorder":"array","categoryarray":["10","20","30"],"nticks":null,"ticks":"outside","tickcolor":"rgba(51,51,51,1)","ticklen":3.65296803652968,"tickwidth":0.66417600664176,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(255,255,255,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":null,"line":{"color":null,"width":0,"linetype":[]},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"72192dad36d":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"72192dad36d","visdat":{"72192dad36d":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Hmm, it appears that the legend cannot be moved by this. Do other changes in <code>theme()</code> get registered? Let’s check by applying a theme.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1">p <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">theme_light</span>()</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">ggplotly</span>(p) </span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-59b7c3386f75a5505251" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-59b7c3386f75a5505251">{"x":{"data":[{"x":[26.3355590315536,23.3730991750956,26.3640181591734,25.0560925496742,24.2395889230073],"y":[16.3005271265283,14.8210403660312,16.3278349801898,14.8367961332202,15.0912929415703],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[28.7340359883383,28.7217941086739,31.300702884607,29.9993338009343,25.9415527816862,25.9488132653758,27.3587607592344,25.9794519448653,24.9679843803868,27.7085461612791,26.6907069081441,25.2388256844133,25.2836265092716,25.2602926276624,25.100198700279,29.0195182427764,26.9698545949534,25.2676637617871,27.0572213033214,25.3904203597456,26.894684083946,26.741929660365,29.3328294707462,31.2815153419971,30.6427401041612,25.9311769159511,25.9690923705697,27.306541531533,29.8431987794116,32.8605882713571,35.2286765361205,36.8833909053355,34.946163136512,29.3450942799449,25.8161223532632,28.7142714669928,28.8878705056384,24.1212451709434,44.3519574277103,29.2474068671465,26.2638111626729,29.2077649055049,29.2883665183559,29.3426670700312,28.7810607157648,23.2337793482468,23.7485549638048],"y":[17.7063925117254,21.2573006758466,19.6888878632337,21.046761171706,16.3827280720696,18.1558230750263,17.7491731362417,18.3969509072602,15.827583819814,19.8335852822289,18.7198563016951,14.6607168354094,17.0391234625131,16.9461756547913,14.9248674012721,20.9695845821872,18.7605908730999,19.6910885727033,20.1923965511844,19.0931081077084,20.386661603488,20.7166887035593,21.3092614935711,20.7131266932935,21.7484455436468,17.7701205966994,17.7177849736065,17.8434285543859,24.3219132650644,24.0801332268864,26.0051152683794,28.1020586704835,26.2283642990515,20.7098647557199,18.8584913048893,21.335573268123,21.893779938668,17.1622772030532,33.3052848609164,21.1173765037209,18.6137098638341,21.7911199947819,21.2105168003589,20.6176042886451,20.6985684100538,16.1308380087838,17.3352070363238],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.6329453522339,24.7579262996092,23.2787697393447,27.3547739192843,30.3923404786736,26.2679289139807,29.3339575799182,25.9769872751087,25.7607941506431,26.8167088592425,29.632566943951,30.7123086487874,25.774681802094,26.0980370478705,27.6909693116322,30.7951051849872,32.0298643231392,27.1267692666501,26.0812606045976,26.15206419155,24.8853647476062,25.3749390119687,26.0463496237993,26.0048875695094,26.7281588194892,27.7217905253172,25.3015911825001,28.8328772351146,26.8058625781909,31.3650551240891,30.9329321688041,25.6886373227462,26.0769663730636,28.2451750835404,28.7625946566463,29.0630786115304,27.8710976347327,28.813647621125,26.1775991935283,25.9991230661049,25.6763870345429],"y":[15.1750575207174,16.9530628243461,15.9445871945471,18.7970860058442,22.1506891006604,17.9787300663069,17.7672012401745,17.1763493938372,18.0962234374136,18.1641729559749,20.6514299873263,21.0531769197434,18.3730337943882,18.080840385519,18.7870416713879,22.7723210738972,23.3023116132244,19.3420534387231,18.9941494600847,18.1146493680775,19.366179189831,18.9662405876443,17.6782832628116,16.3857433158904,17.3170366775244,18.238888435252,16.2346820145845,20.8971966784447,20.689024127461,21.0086116485298,21.3584908509627,18.3523897666484,17.8355348201469,19.1138653956354,21.2982556372881,18.1353243097663,19.0314715303481,20.8000187944621,16.2129601271823,17.90968870949,16.8716311719269],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.8489729536697,24.3604032695293,22.0584659794346,21.7110626654699,23.7793589415029,24.1284649441019,17.0710755046457,21.9112343257293,21.3569576889277,23.197562577948,23.2070893382654],"y":[17.7302889848128,16.7677385279909,15.7400826007128,15.9502443332225,16.9170506434515,17.3731614518911,11.0592775098979,14.6545075781643,14.7209462793544,16.1307121740654,16.2908007765189],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.1182721333578,17.6743571635336,16.6190238054842,16.6759339181706,18.734481533803,19.0809512384236,12.0525845497847,16.9421937316656,15.3392635326833,16.2031945023686,12.0886588163674,17.3336935445666,17.0386523714289,16.2558209206909,11.6084295708686,15.2682819476351,16.0080892613158,17.1287274956703,14.813976591453,17.2917595926672,16.8994054613635,15.6347428491339,16.2104250442237,16.6639959849417,14.8013170378283,16.6788831314072,20.0752073047683,20.2666966823861,22.3372947504744,17.2474221426994,18.9147849367931,17.703895402886,20.0425748551264],"y":[14.7458430364728,14.2197750238702,13.1442899050191,13.7606131505221,13.8659784348682,13.8172450581565,9.08810597993434,11.3318341933191,10.7662242056802,11.6652138791978,9.18083417005837,13.2340568184853,13.0556570526212,12.232337840274,9.07302157245576,11.0128617910668,11.2144112858921,13.2228968428448,11.2454743418843,14.2406863706186,14.0373030656949,12.7209703655913,12.9666012320668,13.0709492061287,11.0018705789,13.3306470649317,14.8978470051661,15.7226485708728,16.6037737129256,15.0696185875684,15.1071507805958,14.7468351101503,15.9659889299423],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[26.357686067,24.9210017748177,25.9575955959037,24.0748652776703,20.7399397145957,21.7992988115177,23.3886509237811,22.0970394041389,19.8399323558435,33.3404215412214,32.1186618866399,32.1794288137928,29.232413193956,31.9933812232688,33.8637546440586,36.0406721832231,35.8926976108924,28.6996240084991,25.8607175372541,28.7612527053803,28.2755909025669,26.6656059043482,24.1685108473524,24.1643206479028,24.0564245868474,25.7952744593844,25.7407927026972,26.1017528157681,25.9194024927914,43.8431004822254,40.697829076089,29.3716976484284,26.2514676697552,28.1860246833414,28.9150268247351],"y":[17.9938168056309,18.2813110269606,17.3701203411445,15.6289183104411,14.8441554090008,14.647615233995,14.8053006984293,15.2455387342721,13.9871564500034,28.0093806557357,24.2753268631175,25.2239633718506,22.7177562419325,23.7429188201204,25.898599293083,24.6047522269189,23.6660272676498,20.7264757579193,19.0423780689016,19.3054008901119,20.0147613240406,20.0423244575039,17.1498739551753,15.6890879165381,16.6665446491912,20.6959059638903,18.8407507847995,18.8540971228853,19.180408109352,34.639322324656,29.2406221233308,20.8345493672416,19.2269277147949,20.3280475491658,20.1171301949769],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[20.2246591240168,14.6120045056567,19.6757721681148,17.1163446394727,17.0751340841874,19.2787192890421,14.1376402424648,14.633552310057,17.1152366952971,16.6141115352511,17.2728946514428,11.8256080474704,17.344704359211,15.8101591154933,17.6673562135547,15.1656042506918,16.9290307033807,16.6721341088414,17.6144727703184,17.2199556604028,19.0232870506123,16.945005469583,19.361912689358,19.0070785423741,17.0546432837844,22.2153447208926,18.6172741742805,19.9093632176518,17.0186070403084,12.3622028725222,19.0966147018597,17.6721117410809,14.0215316042304,15.3039269298315,18.3563990755007,18.2575877916068,14.7680421331897,17.2868508726358,15.9082000536844,17.644700352475,16.7359863810241,18.6821053331718,18.7759814256802,16.8326654940844,16.66041830834,16.9991637865081,20.2675909178332,18.1460244724527,25.2941011788324,24.3421280765906,27.1021663567051,24.7307261690497,25.8191535426304,22.9826322741807,19.8024240249768,20.3407321775332,18.863416797854,17.3133094757795,19.9831685164943,17.2959838801995,14.9688097769395,18.2970331152901],"y":[13.7277523353696,11.1953306164593,14.2128535207361,13.2357897311449,12.2327608531341,14.2858180511743,10.6014334507287,11.0750248057768,14.2885380292311,13.3820899685845,13.248404815048,8.62754036746919,13.3539160102606,11.1617912663147,13.0909472156316,11.0666233902797,11.0127015372738,11.1395274795592,11.6470121698454,14.3632585637271,15.3442520437762,13.9284663185477,12.952740688622,13.1115463927388,13.3337575897574,17.2097469609231,15.1879232829437,14.8815233221278,13.9206351323053,9.12256789878011,14.0309310125187,13.1996788520366,11.3622326396406,11.2246586566791,11.9432113396004,11.8305980341509,11.0014723589644,11.260626314953,11.3821482239291,11.7022776810452,14.3077624171972,12.9306835956872,12.6031851122156,13.0767322529107,13.6097508916631,14.9313781637698,13.9526921166107,12.0517710095271,17.7521099474281,17.6870117483661,19.6274860767648,18.6370778590441,19.7066828595474,18.3849385354668,14.7251380288973,15.8929997041821,15.3422512948513,14.8004285246134,16.2396413603798,13.9430293980986,10.6733143854886,13.2697931824252],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[9.97125317802653,45.9891338205524],"tickmode":"array","ticktext":["10","20","30","40"],"tickvals":[10,20,30,40],"categoryorder":"array","categoryarray":["10","20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.32695126960985,35.9399114225153],"tickmode":"array","ticktext":["10","15","20","25","30","35"],"tickvals":[10,15,20,25,30,35],"categoryorder":"array","categoryarray":["10","15","20","25","30","35"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(179,179,179,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"7219158cc15c":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"7219158cc15c","visdat":{"7219158cc15c":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Apparently, at least some changes will be conducted. Let’s see, if I can use <code>layout()</code> as shown in the <a href="https://plotly.com/ggplot2/getting-started/#cutomizing-the-layout">getting started documentation of plotly</a> to move the legend.</p>
<p>The R documentation of the <code>layout()</code> function is somewhat minimalistic. Basically, it refers to the <a href="https://plotly.com/r/reference/#Layout_and_layout_style_objects">online plotly reference manual</a>. Using the table of content on that website, one can easily find the <a href="https://plotly.com/r/reference/layout/#layout-showlegend">layout options</a>.</p>
<p>I believe the options <code>xanchor</code> and <code>yanchor</code> are exactly what I need as both of them can be set to options like <code>left</code>, <code>bottom</code>, etc. Though, I wonder why the value <code>auto</code> was not changed by <code>ggplotly()</code> as the initial plot <code>p</code> contains <code>legend.position = "bottom"</code>.</p>
<p>In any case, I am not a hundred percent sure what kind of syntax <code>layout()</code> requires. An example in the R documentaion would have been nice. Well, let’s try the straight-forward approach then.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">p <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">ggplotly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">xanchor =</span> <span class="st" style="color: #20794D;">"center"</span>)</span></code></pre></div>
</div>
<p>Well, that didn’t go as expected, but the warning displays valid attributes and <code>legend</code> is among them. Upon closer inspection, I also realize that, according to the reference manual, <code>xanchor</code> and <code>yanchor</code> have parent <code>layout.legend</code>. So, I guess, I will have to use this somehow. Maybe, pass a list to <code>legend</code> via <code>layout()</code>?</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">p_layout <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">ggplotly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">xanchor =</span> <span class="st" style="color: #20794D;">"center"</span>)) </span>
<span id="cb5-4">p_layout</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-b42605121f679c6eeee5" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-b42605121f679c6eeee5">{"x":{"data":[{"x":[26.0116849495098,22.6237717179582,25.764897194691,24.7371929964051,23.8205849638209],"y":[15.9151560271159,14.7695724092424,15.8274023495615,15.2717442942783,15.1872410682961],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[29.0609631571919,28.6598140018061,31.264850147441,29.7955284958705,25.7603842385113,26.387763306126,27.2011927070096,26.3939691012725,24.6452831687406,28.1710186712444,27.0585325989872,25.3702758647501,24.7907761607319,25.1145751098171,25.2891842776909,28.886712625064,26.6833219124004,24.9273486603051,26.6809077559039,24.8191292094067,26.9864416213706,27.3163421697915,28.6164192557335,31.0239972036332,30.7583003414795,26.1627913635224,26.2399363145232,27.0817368352786,30.1973427133635,33.0178896408528,35.104985790886,36.931118880026,34.8320832829922,29.2592419141904,26.1907465649769,28.9424662929028,29.1225669665262,24.2298248305917,44.3293394520879,29.2225732719526,25.8875045867637,28.8889495171607,28.683142214641,29.3616826085374,28.6619365908206,23.328050301969,24.2873944228515],"y":[17.912205193378,21.2015896197408,19.9401069276035,21.1911655316129,16.1068883826956,17.8962458919734,18.3880851209164,18.2899750938639,15.7480921082199,20.1218889269978,19.2010145831853,14.9806271780282,16.6907661059871,17.2774514913559,15.0127597883344,20.6757658353075,19.1212106969208,20.1316457921639,19.870496330969,18.919733703509,19.89152846504,21.1174947414547,21.2891903510317,21.3071631092578,21.6248027294874,18.2128070713952,17.749705696851,18.2348915128037,23.97567767445,23.6063714887947,25.770990883559,27.7448031296954,25.912830186449,20.9438679151237,18.6515826465562,20.6395484717563,21.8801758730784,16.6281388716772,33.0066957008094,20.977200935781,19.3391752598807,21.7142851587385,20.8794595830142,20.802975464426,21.0420863259584,15.9012444913387,16.9337640242651],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.739405117929,24.9863436045125,23.1137838644907,26.984055464901,30.2399207925424,26.0286823490635,28.7771958524361,26.3792720368132,25.6439279600978,27.0629452995956,29.9625503279269,30.7169819297269,26.3956023121253,25.6020639559254,27.6755129795521,30.6900767732412,32.2940501049161,27.1637821085751,25.9690543666482,26.0464723408222,24.9695115808398,25.3347975391895,25.8669805431738,26.3331540420651,26.9665501050651,28.3990229105577,24.8887281961739,28.6771436873823,27.2737194543704,30.8497486613691,31.2905798854306,25.8078788356855,26.0177438646555,27.9054394301027,28.9977337477729,28.7048018604517,28.1371131407097,28.7516190700233,26.3441517263651,25.8559333633631,25.6996576638892],"y":[15.022048461996,16.8579029988497,15.9064679833129,19.2769319031388,22.3301289942116,18.0843960059807,17.7433783359826,16.9773244637996,18.3504334012046,17.7464179934934,20.760933694616,21.239400902018,18.1088039558381,18.3589997116476,19.3436212750152,22.8758857229725,22.714402343519,18.8956364713609,19.3149520915002,17.8892306659371,18.7866886405274,19.3524536162615,18.3014682283625,16.1494493432343,16.6086946543306,18.3174421261996,16.3107696743682,20.7030160496011,20.6183781761676,20.6312486384064,21.0467564517632,17.6626913264394,18.3630574088544,18.7774163652211,20.6188094941899,18.1238359356299,18.7068416809663,21.382617842406,16.2220370823517,17.6837108129635,17.0286895250902],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.26179895401,23.8410007026047,22.3866170071065,21.9840914119035,23.6728670729324,24.2067316127941,16.6818303121254,21.748536785692,21.3150423493236,23.0413119241595,23.386277564615],"y":[17.7181684762239,16.8177860418335,16.0826957812533,15.6603915033862,17.0084212016314,16.8606367437169,11.2103579238057,15.1343600587919,15.3662633063272,16.0946287015453,16.0161679346114],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.3834068035707,17.8598134886473,17.0798357564956,16.7321897964925,19.074383925274,18.9106077449396,12.1885633213446,16.7867620062083,15.0635120410472,15.7517741043121,12.1934213111177,16.6898730784655,16.9189279137179,15.7989672876894,12.3050363890827,14.9477998664603,16.0297919960693,17.358907046169,15.1299764785916,17.020747266151,16.7831180801615,15.7599116364494,16.0153801940382,17.0111683728173,15.3782199617475,16.9201131481677,19.8463108254597,20.1142627129331,21.7337177319452,17.0980748455971,19.2432869048789,17.819368680194,20.1874263642356],"y":[15.2282542226836,13.9378468856215,13.1511700036004,14.1160236217082,13.7898566707969,14.1264911139384,9.28551123477519,10.8774960203096,11.3453003942966,11.621932435222,9.22070240806788,12.7228215653449,12.920366477035,11.6817293837667,9.32092038076371,11.2323036337271,10.6026885472238,12.7621143836528,11.052631095238,14.3970494123176,13.7653344428167,13.1082617068663,12.714839704521,13.080237388052,10.6064092664048,13.162492001988,14.8288141084835,16.1311535678804,17.002991447784,14.7973497902974,15.1411930952221,15.1787119742483,16.2168083282188],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[25.7685987092555,24.6210816347972,26.0966955531389,23.9240264613181,20.92563242428,22.029207027331,23.1217450788245,21.7509111825377,19.8448396371678,32.9617680974305,31.880621526204,31.8104016724974,29.3150988450274,32.1653952518478,33.8698308326304,36.2319706512615,36.0757341977209,28.9791588775814,25.6130513262004,28.6476282989606,28.0101098399609,26.925314669311,23.9733760751784,23.8947227843106,24.1262820756063,26.2349742092192,26.317323214002,26.3141138436273,25.815545138903,43.8525195904076,41.0885706970468,29.3392933879048,25.8611307162791,28.1119971612468,28.6596962867305],"y":[17.8790796305984,17.6311778688803,16.7683179760352,16.1764981390908,15.2581782478839,15.3141866393387,15.3262748103589,15.1037987960503,14.2301698910072,28.211952235736,24.093910032697,24.8360250469297,22.8345252282917,23.8434222713113,25.9495290724561,24.7129521731287,23.8671175653115,21.3914933232591,19.1728735662997,18.9639612840489,20.1612644856796,19.8622724726796,16.7668191341683,16.0246962592006,17.2993721764535,20.9175135478377,19.3397230809554,18.8841482803226,19.3894518228248,34.768831470795,28.7984741771594,20.6725125199184,19.2545888436958,20.088751145266,19.6796641271561],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.8468293478712,15.2994695132598,20.2401945205405,16.9023437917233,17.3388787996024,18.6442550294101,13.7593952007592,14.8182046163827,16.8319866623729,16.6286323038861,17.292328967154,12.1216770103201,17.2945156395435,15.7260327145457,18.2990186499432,15.2913430254906,16.8962380837649,17.3960412088782,17.916540745832,16.9717301024124,19.1716399334371,16.7603177098557,19.0896730398759,19.163464123942,16.8187494080514,21.9908434417099,19.3817542588338,19.8049455933273,17.1951724065468,12.2294062811881,18.8250279899687,17.8338151266798,14.2700028875843,14.7728223528713,17.8140360204503,18.3325814669952,14.7534357981756,16.6340647542849,16.1250715706497,18.2535226320848,16.755544863455,18.9613490428776,18.891640223749,16.6739359928295,17.3709119550884,17.1571521781385,19.8591869333759,18.126815651916,24.8591765984893,24.2574459448457,27.2118462199345,25.2862076947466,25.6844578852877,23.2975249700248,19.9903906559572,20.1154328024015,18.6296841816977,16.9906655624509,20.047744663991,17.0225034834817,14.9641694018617,17.611518708989],"y":[13.851163014397,10.6049686832353,14.0387935139239,12.8074899321422,12.285000945814,14.3187174363062,11.2743985190988,10.8300436072052,14.1586513606831,13.1473725194111,13.3396540921181,9.03993601053953,13.3070868883282,11.0751147190109,12.8861603569239,11.2427730137482,11.3302704352885,11.3148448005319,11.7250625401735,14.1888448191807,14.789858045429,14.1644080867991,13.117273818329,12.6890789356083,12.7976637622342,17.3208457050845,14.9371472384781,15.326429431513,13.7132696531713,9.37261504139751,13.8227764042094,12.8273381119594,10.8238321876153,10.9376985542476,12.3865089837462,12.1737722998485,11.3034718217328,11.1184774778783,11.1297355508432,11.8034213166684,13.6215676173568,13.0180067034438,12.7673460686579,13.0762120932341,13.8627658244222,14.7703238826245,13.6900332149118,11.6092559557408,18.0588973080739,17.92604475189,19.7984254844487,19.3818804236129,19.97773156818,17.8346593189985,15.1518263386562,16.2748082626611,15.056772082299,15.1857747444883,15.760522980988,14.3393394954503,10.7841240057722,13.0799351796508],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[10.5112938882317,45.9397225741763],"tickmode":"array","ticktext":["20","30","40"],"tickvals":[20,30,40],"categoryorder":"array","categoryarray":["20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.75349123752676,36.0552762438078],"tickmode":"array","ticktext":["10","15","20","25","30","35"],"tickvals":[10,15,20,25,30,35],"categoryorder":"array","categoryarray":["10","15","20","25","30","35"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(179,179,179,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"xanchor":"center"},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"721928d69cbd":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"721928d69cbd","visdat":{"721928d69cbd":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Aha! At least this did not crash again but the resulting plot does not look as I would expect it to. Let’s see what happens when we change <code>yanchor</code> as well and then we’ll go from there.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">p_layout <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplotly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb6-4">    <span class="at" style="color: #677623;">xanchor =</span> <span class="st" style="color: #20794D;">"center"</span>,</span>
<span id="cb6-5">    <span class="at" style="color: #677623;">yanchor =</span> <span class="st" style="color: #20794D;">"bottom"</span></span>
<span id="cb6-6">  )) </span>
<span id="cb6-7">p_layout</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-904cc7d2cedb8594cf0c" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-904cc7d2cedb8594cf0c">{"x":{"data":[{"x":[26.2124764177948,23.2846341574565,26.1367076698691,24.9606422847137,23.7336195057258],"y":[16.1555412968621,14.6954630786553,16.0938621137291,15.3904577139765,15.1194882504642],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[28.7458036707714,29.3203528119251,30.7786963002756,30.3973918469623,25.9489538218826,26.3310164378956,27.2647509017959,26.1849016422406,24.7997567297891,27.7918092306703,27.353700886108,25.1839512061328,25.1975828189403,24.7961830738932,24.7462900560349,28.8162384558469,27.2552447307855,24.8508099243045,26.8383242089301,24.910116475448,26.6004162967205,27.2994116080925,28.7118740906939,31.1240445308387,30.824476647377,25.6880906585604,26.3491419266909,27.0207060376182,30.3789398301393,32.6156058698893,35.3405557716265,37.1566042557359,34.814877971448,29.3191884558648,26.2673412673175,29.1168495869264,29.3201869452372,23.6551277838647,43.7723994165659,29.3514427287504,26.091968228668,28.8477036667988,28.8413069039583,29.3059585114941,28.746331879124,23.2748384037986,23.7920315658674],"y":[18.2291476711631,21.341550289467,20.2929168529809,20.960137601383,16.3271322496235,17.9380913726985,18.035526743345,17.825762809813,15.8590636493638,20.2218319764361,19.055670247227,14.9342757271603,17.3928670009598,17.1229896424338,15.2118932463229,20.626541743055,18.8482247643173,19.8864667201415,19.6581099322066,19.1343918997794,20.1307452958077,20.752849127166,21.2190500481054,20.7259335123003,22.1494803413749,18.3855093918741,17.997884724848,17.9569469412789,24.0509864557534,24.192582924664,26.0292808866128,27.797951101698,26.3601042252034,21.1423883037642,19.0003703512251,20.8833935471252,22.2015381289646,16.7719216432422,33.122388451919,20.8338039711118,19.3851037906483,22.1761275961995,21.058008476533,20.7131660383195,20.7186595382169,16.2874315565452,16.6454750522971],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.9184227567166,24.6677407542244,23.3806077189744,26.7427533149719,29.8404921697453,26.19878013134,29.3231266936287,26.1243397334591,26.3200796745718,26.7880498666316,29.6759303564206,30.7844220321625,26.251759724319,26.2121940854937,28.3694229790941,30.9843194359913,32.2708892995492,27.3663165284321,25.8252775348723,26.2092701353133,25.316357793659,24.802197769843,26.1488095767796,25.6986135726795,26.7818746341392,28.341472505033,24.8721215292811,28.6723029619083,27.0786428973079,31.1930865805596,30.9523560347036,26.3554725255817,25.8872422246262,28.3836976505816,28.8926691364497,28.7992389164865,28.0982319163159,28.96742325183,25.6575549000874,25.99118703641,25.8467972885817],"y":[15.0840957667679,17.0448081290349,15.826607846655,18.701280996576,21.7145266760141,17.7722667632625,17.8084078865126,16.9232561254874,17.7161628449336,17.6205793881789,20.955717247352,21.3753798380494,18.2981355059892,17.9655442973599,18.7315228415653,22.801216632314,23.3458248818293,18.8842742690817,18.9368077710271,17.9778333770111,19.2477414317429,19.2805679807439,17.8308378562331,15.7013916179538,17.0466719886288,17.8765666577965,16.1970427354798,20.6826861649752,20.7840270759538,21.1459424616769,21.1078209541738,17.8206404624507,18.3783792907372,19.2248169826344,20.868130354397,17.9925113435835,19.3121276544407,21.3484752207994,15.8747244512662,18.120862833038,17.2520714016631],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.051264728792,24.1255426134914,21.705296205543,21.8368374237791,23.7008442861959,24.377963353321,16.684826679714,21.7731261465698,20.7236892368644,23.3612949177623,23.1095600700006],"y":[17.6476474745199,17.093260689266,16.2718155469745,16.2207451527938,16.7433715701103,17.1077295830473,11.262403807044,14.9962289938703,14.824997545965,16.382540643774,16.3782873665914],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[18.7596735635772,18.3314154367894,17.2169217810035,16.9105314524844,18.6173465928063,19.0190549841151,12.3841957585886,16.735080139339,14.689954422228,15.8909724524245,12.2371385032311,16.7747636767104,17.043150938116,15.8575855635107,11.6810039591044,15.0928116947412,15.7180038271472,16.7655479485169,14.7181271908805,16.6099153747782,17.3169119577855,16.1686744052917,15.615573859401,17.0876679554582,15.2757129084319,16.8349908675998,19.7898183353245,19.6427815224975,22.1764695921913,16.8197107700631,18.9267988270149,17.6466644989327,20.3591402517632],"y":[15.1066210698336,13.7797246774659,12.8248665886,13.8419885359704,13.7161670953035,14.3499038910493,9.36117051746696,11.2946344446391,11.1907247485593,12.3897080274299,9.14631563350558,12.952514070645,12.6420773705468,11.9159385917708,8.97828091215342,11.1780777959153,10.611885814555,12.6979585612193,10.8437255825847,13.8252912219614,13.6751964064315,12.9787230918184,12.9722097314894,13.3358650172129,11.3954892851412,13.1808542406186,15.1532386070117,16.3733052615076,16.8084368065,14.9542173288763,14.6811217620969,15.3552569147199,15.6917519256473],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[26.1025984909385,25.121736212261,25.8504584001377,23.9875035949051,20.6369039034471,22.3163729222491,22.6464455626905,21.9890482772142,19.7178128102794,32.6520916145295,31.8745758548379,32.1907163985074,28.6346500309184,31.6180774323642,34.1116904228926,36.090818349272,36.0105215040967,28.6064881343395,25.6400744058192,28.6993640175089,28.395393049717,26.971783917211,24.0280104452744,24.0355184398592,23.9104820623994,25.705721792765,26.3410961892456,26.0404886111617,26.2983558896929,44.0269527442753,41.0018501130864,29.1050629921257,26.134281780757,28.3253859788179,29.1400485897437],"y":[17.7310026932508,17.9329326998442,17.2933676106855,16.3815357301384,15.1691216630861,14.9669684901834,14.9155168432742,15.2340279810131,14.1171266542748,28.2519527764991,23.8512784574181,24.7525136848912,23.2447075285017,24.2634220074862,26.0568644858897,24.6196935828775,24.0090722577646,20.6126850027591,18.8920559549704,19.323534799926,19.6316662423313,19.8894139293581,16.7358497420326,16.1497946465388,16.8171135118231,21.2324576033279,18.8451794913039,19.074895064719,19.3486907264218,35.1069474810734,28.9178699217737,21.35221622549,19.289853926748,20.2174615660682,20.0966052418575],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[20.0037031421438,14.706725429371,20.2626991696656,16.6735627828166,16.8392110910267,19.2325057800859,14.323632818833,14.9733685774729,17.2468974875286,16.6096536530182,17.1276807770133,11.7873919246718,16.8461248595268,16.2697353580967,18.0018149986863,14.9205664534122,17.2128178240731,17.2847774848342,18.1697419729084,17.0247547687963,19.193264327012,17.1924591850489,18.9227077776566,19.0932397132739,16.9980279047042,22.0207871574909,18.9233574314043,20.1484056999907,17.248780881241,11.9736802099273,19.065258442983,18.1202031100169,13.7862653257325,15.0338599298149,17.7697312166914,17.8500564426184,14.7785847214982,17.346151124686,16.2521541306749,17.8341765318066,16.7833869088441,18.7215338513255,18.9461821848527,17.298640514724,16.7954411290586,16.9092163400725,20.1910501250997,18.1076821202412,25.3224460119382,23.9680260108784,26.8514601839706,25.2682574752718,26.0754399413243,22.7695364540443,20.3662471782416,19.9736753884703,18.6344332428649,17.0056098623201,20.2053825233132,16.976948966831,14.8778016502038,18.1859664179385],"y":[13.8635982135311,10.9790799910203,13.6168155539781,12.6236183237284,12.0869628719985,14.1669690702111,11.1434785185382,10.7963826229796,14.3802195806056,13.1976162627339,12.9091973977163,9.2981112331152,13.0631276836619,11.3053293325007,12.6611965680495,11.1765779031441,11.0163750773296,10.8088998500258,11.8076552422717,13.6787722498178,15.3755964498967,14.3803029013798,12.9010387230664,13.1681484229863,13.3200268980116,16.9967369273305,14.7150129271671,14.9448101712391,14.3365486538038,8.8258499044925,13.659523906,12.7503383336589,11.2950753044337,11.221223934181,11.8620181040838,11.6237539809197,11.1977009978145,11.3317039161921,11.1746936151758,12.0248803526163,13.6362469600514,12.9442657889798,12.8255066469312,12.9678264148533,13.7188402676955,15.2852309912443,13.7536479391158,11.8624260473996,18.3057177320123,18.1657037489116,19.6592346196994,19.2239710792899,20.2564520297572,18.2123980266973,15.3667543584481,15.92998845689,14.7882762299851,14.6141491854563,15.7873575706035,13.6231633724645,11.0858650252223,13.076134111546],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[10.0637065198459,45.6442501835339],"tickmode":"array","ticktext":["20","30","40"],"tickvals":[20,30,40],"categoryorder":"array","categoryarray":["20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.51179502566345,36.4210023599025],"tickmode":"array","ticktext":["10","20","30"],"tickvals":[10,20,30],"categoryorder":"array","categoryarray":["10","20","30"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(179,179,179,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"xanchor":"center","yanchor":"bottom"},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"721928427895":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"721928427895","visdat":{"721928427895":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Unsurprisingly, this did not help at all. In retrospect, I don’t know how I could think that changing <code>yanchor</code> as well would magically cure things. Again, referring back to the manual (I should really read the descriptions instead of relying on the possible values), it appears that <code>xanchor</code> only sets a reference points for the option <code>x</code>. Same thing for <code>yanchor</code> and <code>y</code>.</p>
<p>So, how about changing <code>x</code> and <code>y</code> instead? Possible values for both options range from -2 to 3, so my best guess is that ranges from 0 to 1 refer to the window the points are plotted in. Consequently, moving the legend to the bottom could be as easy as using a positive <code>x</code> value and negative <code>y</code> value which are both close to zero.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">p_layout <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">ggplotly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">x =</span> <span class="fl" style="color: #AD0000;">0.1</span>, <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>))</span>
<span id="cb7-4">p_layout</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-01a1de0b95d92f3a5f1d" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-01a1de0b95d92f3a5f1d">{"x":{"data":[{"x":[25.8065533364192,23.357402985543,26.0340004431084,24.6403189495206,23.9189536860213],"y":[16.1997626233846,15.1286145728081,15.9393832176924,14.7625013981014,15.1011037988588],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[28.8436050487682,28.7538943830878,31.1184240596369,30.0465153295547,26.3766651758924,25.8294393500313,26.6397865835577,26.1453390672803,24.7058661801741,27.6516313340515,27.2589234866202,25.3777883091941,25.2505093209445,24.6656728059053,25.2158494476229,29.0031592460349,26.9094007140026,24.6923942120746,27.0142558651045,24.8493411913514,26.6778621064499,27.2108153207228,29.2222385657951,31.1509230477735,31.0039531700313,25.6315207410604,26.3028746176511,26.6304194767028,30.2880857272074,32.6361487356946,35.1245068240911,36.9806497715414,35.0788164110854,29.012760065496,26.0033549297601,28.7787961667404,28.9584521895275,23.6463036894798,44.0238277019933,29.2527216700837,25.9911295128986,29.3302833393216,28.6934574158862,28.7248170094565,28.8516855340451,22.8165612190962,23.792663435638],"y":[18.2772451482713,20.9550348352641,19.7667352214456,21.2583109207451,16.0168614856899,17.8392328931019,18.018046647869,18.367285098508,15.8644716622308,19.9856536399573,18.9622812930495,15.3572263879701,16.6256309583783,17.19916504547,15.0064800936729,21.3303754515946,19.1255633018911,19.9924301389605,20.1265630856156,19.2883501060307,20.140886050649,21.138662016578,20.6700966509059,21.3662458719686,21.6065145144239,17.6189902000129,17.9807238079608,17.6736461190507,23.9368419151753,24.1580472256988,25.9550680443645,28.0484825529158,25.9971133273095,20.9227969309315,19.2054412387311,20.8023183070123,22.251679161191,16.605408048071,32.7195302102715,21.18035538923,18.7218009257689,21.8038337036967,20.9043248001486,21.3321810076013,21.1150207150728,16.1771799407899,17.1663507986814],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.1369205892086,24.8641829775646,22.9081852836534,27.2676311256364,29.8005911588669,26.0582907767966,29.0105768170208,25.9243855595589,25.9181643780321,26.8488245178014,30.0023111708462,30.7997201610357,25.8445050058886,25.6972720488906,28.386252915673,30.7972171695903,32.3153513327241,27.093616717495,25.6798482401297,25.7909576494247,25.2900501871482,24.807504183799,26.1336989931762,25.6702994175255,27.3553604971617,28.1836694825441,24.8089501269162,28.9127851489931,26.6064175540581,31.2253144472837,31.0618302553892,26.1759172797203,25.7651075717062,27.8709165286273,29.2153279721737,29.302011291869,27.6523407461122,29.1795029902831,25.9835651502013,26.0854734579101,26.0234080698341],"y":[14.9260633170605,17.3540187396109,15.8770768672228,19.0898933593184,21.9379746548831,18.0642828885466,17.6514256898314,16.7063938435167,18.0299041092396,18.3559706343338,21.3075743071735,21.1525129396468,17.8866450512782,18.293136918731,19.2484586959705,23.2150792879984,23.2714181970805,18.9736329818144,19.0653846433386,18.3221196774393,19.231904198043,18.8425102965906,18.3563484009355,15.7764721428975,16.6867723630741,17.9031279342249,15.7010800546035,20.9978547586128,20.9780564168468,21.3833214789629,21.1983194515109,17.6010632069781,18.1463090278208,18.7713852148503,20.6009681474417,17.9234550429508,18.6138336876407,20.9393776774406,16.2957552924752,18.2321974894032,16.828707818687],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.6615713955835,24.3541861239821,22.2953165883198,22.0648772383109,24.1893124794587,24.3423702482134,16.9554016375914,22.1580788852647,20.627163542062,22.7596715955064,23.1630818257108],"y":[17.6520819814876,17.3302231842652,15.7519885923713,16.0404765926301,16.6856727004051,16.8573990240693,10.9814974317327,14.9065430881456,15.1624931346625,15.9243633940816,16.1057926539332],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.3980000803247,18.0085005654022,17.200642153807,17.3099031709135,18.9522765930742,18.6808295840397,11.7187923867255,16.9425225170329,15.0070279894397,16.0323042266071,12.1500992929563,16.6494058467448,17.29539891202,15.7533437373117,12.0888707479462,15.3423402007669,16.1289927221835,16.6712430676445,14.9615782110021,17.1907294068486,17.2438196884468,15.7749735275283,15.6701532945037,17.0510034421459,14.8348332365975,16.7809042796493,20.3035770624876,19.7589606702328,21.893909303844,16.8314764816314,18.8198266278952,18.0761773489416,19.6096380565315],"y":[14.7895042441785,13.8328092435375,13.2853913186118,14.3058329759166,13.9852018179372,13.6675652869046,8.85844025332481,10.6371370783076,10.8555685151368,12.0515756327659,8.97529734987766,12.8547368930653,12.9351743750274,12.2080785809085,9.29868215881288,10.9852750232443,10.8505121538416,12.9944422461092,11.2340642837808,13.9745862733573,14.2140992298722,12.7613686462864,13.368013077043,13.1090460661799,10.7908219395205,13.2017372643575,14.9229858059436,16.0524227136746,16.8793165588751,15.3724191302434,15.0213666690513,14.8841756748036,15.9718824012205],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[25.964347730577,24.8912737939507,25.6667799547315,23.6055714027956,20.7403123905882,22.3369158916175,22.9338779326528,21.8550889689475,19.6136137191206,32.8513441175222,32.2415546065196,32.0827320320532,28.6909048361704,32.3166941769421,33.7105928825215,35.9985658373684,36.3594508735463,28.7146176405251,26.26931651216,29.1658346878365,27.7107725413516,26.7109544798732,24.2309780862182,24.1988850252703,23.6021377330646,26.0947035063058,25.8095520000905,26.3927924398333,25.9654825950041,43.7895921239629,41.1901026340201,29.2201820777729,25.6358667209744,28.1357262313366,28.6165534505621],"y":[18.3500003628433,18.236332873255,17.0699801333249,15.7158019967377,15.2568145392463,14.8047284450382,14.8254076948389,14.976285533607,14.2842219106853,27.6021619485691,24.3344595855102,25.2830445440486,23.0596775481477,23.6144488381222,26.0316238887608,25.1717812947929,23.9814276237041,21.2202190764248,18.7555595781654,19.2093996305019,19.9848918590695,19.7524899026379,16.9013868065551,15.9838987510651,16.8455176612362,20.9522402953356,19.058050073497,19.0718690156937,18.7027171703056,34.6410224912688,28.7284988792613,21.3443049732596,18.7412632606924,20.0054139912128,20.2106100250036],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.9600560011342,14.6090634729713,19.847041413188,17.3960603035986,16.8060511959717,18.8603796627373,13.6424338877201,14.6753846691921,16.9940452229232,16.6283225705847,16.8708590622991,11.9133472159505,16.9767889102921,16.0743627158925,18.1093173954636,15.1231255978346,16.963538846001,17.1773668266833,17.6971770524979,16.7455888031051,18.686485322006,16.8880525859073,18.6592280620709,18.8085525201634,17.2518528429791,22.3113063002005,19.1544429942966,20.0949051620439,16.6572790686041,12.1079134613276,18.8974795904011,17.9853720409796,14.0675826989114,14.9204456701875,17.6389483284205,18.3071042941883,15.2861782962456,17.0798628630117,15.6707183163613,17.9132622333243,16.6847367502749,18.9762680828571,18.7969227308407,16.737336291559,16.6805690269917,17.2911987608299,20.3925033714622,17.8662406189367,24.9718975223601,23.6287476090714,27.3958018444479,24.7024583429098,25.7781565189362,23.3200672451407,19.7816036948934,20.3607565680519,18.9136193847284,16.6992032812908,19.949063195847,16.8004500152543,14.6796502502635,18.1938533704728],"y":[13.7524677807465,10.923164931871,13.713561616838,12.9547357311472,12.3209918946028,14.0475766688585,11.3483833618462,11.1713868442923,14.2376169072464,12.7054893849418,12.8942017992958,9.31710521243513,12.6913223177195,10.8367209773511,12.6456360565498,10.6980468118563,11.0188886675984,10.7913222491741,12.3678304845467,13.7151395790279,15.2459384484217,13.6478223176673,12.9089746486396,12.8426278106868,13.3931020617485,16.7887152196839,14.9323879146948,14.8695820398629,13.9784624593332,9.12400523032993,14.1579138452187,13.1018685506657,10.7558549100533,10.8968622036278,11.6663473302498,11.7353592408821,11.0757389442995,11.1800107760355,10.7548237608746,12.3505083557218,13.8878844646737,13.1463543144986,12.7252753922716,12.6222801128402,14.3655536578968,15.0235885411501,13.9155164469033,12.2882768703625,17.6346125693992,17.7599395809695,19.999564803578,19.0919307172298,20.2633386066183,18.3692972855642,15.3099950009957,15.6227555105463,14.7176077578217,15.0540077382699,16.332754359208,13.8631524983793,11.2722344893962,12.9163998169824],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[10.1035406209622,45.6390794677567],"tickmode":"array","ticktext":["20","30","40"],"tickvals":[20,30,40],"categoryorder":"array","categoryarray":["20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.56931114142761,35.930151603166],"tickmode":"array","ticktext":["10","15","20","25","30","35"],"tickvals":[10,15,20,25,30,35],"categoryorder":"array","categoryarray":["10","15","20","25","30","35"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(179,179,179,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"x":0.1,"y":-0.1},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"721927196648":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"721927196648","visdat":{"721927196648":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Now, this brings us closer to what I had in mind when I set <code>legend.position = "bottom"</code> in <code>theme()</code>. Possibly, we can change the orientation of the legend from vertical to horizontal, tweak the <code>x</code> and <code>y</code> values a bit and then we’re there. Scrolling through the manual (again), reveals that there is an option <code>orientation</code> which can be set to <code>h</code>. This sounds promising.</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">p_layout <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">ggplotly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb8-4">    <span class="at" style="color: #677623;">x =</span> <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb8-5">    <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb8-6">    <span class="at" style="color: #677623;">orientation =</span> <span class="st" style="color: #20794D;">"h"</span></span>
<span id="cb8-7">  )) </span>
<span id="cb8-8">p_layout</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-26137e04ec9d799eec13" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-26137e04ec9d799eec13">{"x":{"data":[{"x":[25.7927104098722,22.6755322733894,25.8309474216774,24.6181428382173,23.6782936288044],"y":[16.2223217191175,14.6386721465737,15.7269888347015,14.6187379892915,14.9910187035799],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[28.844095395878,29.1976460751146,31.1347791042179,30.3778195466846,26.207376524806,26.3850448429585,26.6271775240079,25.8501105297357,24.7601301839575,28.2306374093518,26.9274796180427,25.1021791759878,24.8688860137016,24.6338773116469,25.2935518417507,28.6697547858581,27.0831559496,24.9874957261607,26.9599701287225,24.9367716683075,27.3669667346403,26.7067198935896,29.1669543268159,31.1257971387357,30.7579454964027,25.7561623929068,25.8652867449448,27.1152042170987,30.175994883664,32.7104259844869,35.1290740834549,37.2278030019254,35.2628655718639,29.096558620967,26.196089637652,29.1640363086015,29.2592326533049,23.9869796115905,44.0152236981317,29.29753753189,26.0302760375664,28.9439809251577,29.2831269454211,29.2428669720888,29.3967675413936,22.9262406015769,24.2232918033376],"y":[18.3234365276992,21.3598371272907,20.2999448191375,21.0735952055082,16.1291650112718,18.1866744833067,17.7755635648966,18.2518863851205,15.9393169591203,19.8730228271335,19.2797523470595,14.97250551451,17.1242796102539,17.1133008271456,14.7397709488869,21.2808408096433,18.9090150589123,20.0214041948318,19.6064278747886,18.8111684614792,20.0853018378839,21.0475924380124,20.6496307462454,20.6583843728527,21.8062854927033,18.1051579510793,18.1964708510786,18.0245929302648,24.1343635926023,24.1008376695216,25.990675178729,28.2732628637925,26.105179666169,20.7521730141714,19.2668424068019,20.6429800758138,21.8727679019794,17.2973468016833,32.6469641651958,20.7978373808786,18.766073926352,21.733198050037,20.720102323778,21.3986012645066,20.7909463699907,15.8989523496479,17.2926810726523],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.8637790279463,25.3050158176571,23.0591881452128,27.3860754612833,29.8574543735012,25.8616997890174,28.9452918114141,26.3714673427865,26.071054427512,26.7197298308834,30.1612728150561,30.9705677794293,25.6477527694777,25.9621710933745,28.0043777892366,31.0904084095731,31.9313464926556,26.9090628355742,25.8432442680001,25.774811187759,24.9284709252417,24.8905024675652,25.9448493795469,25.8563041564077,27.3753679573536,27.7245172511786,25.2814254608005,28.7157406881452,26.8749062282965,31.0178506866097,31.30169693809,26.1155779505149,25.9795610517263,27.7745213134214,29.317832662724,29.3311585955322,27.6377807371318,28.6226357959211,26.3782493105158,26.2972448987886,25.9827140215784],"y":[15.3136010318995,16.7307547880337,16.0724446684122,18.6507491862401,22.2619955038652,17.962672008574,18.1851101417094,16.6288615565747,17.7585073783994,18.399694239907,21.0311506485567,20.7060663575307,17.7040594812483,17.7991714898497,19.0446565236896,23.0273706560954,23.0350510032848,19.3048851303756,18.6035289328545,18.0157517300919,19.1195640802383,18.6418194150552,17.707997084409,15.6535234736279,17.2098340325057,17.7450792871416,15.691595329158,20.6268109714612,21.0933429749683,21.2105821954086,21.0561851914972,17.9751590671018,18.1092161275446,18.6460478803143,21.3750430131331,18.0435314640403,18.7995806923136,20.8355842577294,15.796228175424,18.0950685750693,16.8555498706177],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.8601288339123,24.3327170096338,22.3166558800265,22.0528869127855,24.1024828163907,24.2874763034284,16.7085891406983,22.3913881547749,21.2988986779004,23.2678107852116,23.3084645435214],"y":[17.67995199617,16.779568111524,15.8525081114843,16.2667417040095,16.8657315926626,17.112741490826,10.6034272834659,14.8510615468025,14.9229135129601,15.9274729382247,15.9096597917378],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[18.6495404884219,18.3074554543942,16.9549776226282,17.1852466885,18.7752113794908,19.0415606893599,12.0927779152989,17.0870345916599,14.6357692385092,15.6685238616541,11.806616323255,16.6101172722876,16.8810432620347,15.649360315688,12.3387322183698,14.7471914293244,16.3392802048475,17.3821336986497,14.6944316782057,16.9490488888696,16.7362603966147,16.1247824916616,16.3507771320641,16.8934825893492,14.9086261646822,16.6043288588524,19.6206486523151,19.7848995111883,21.8050386693329,16.9639363855124,19.0281703822315,18.2636853490025,20.2159166833386],"y":[14.9451055444777,14.2988753745332,13.2979252679273,14.1201124818996,14.1879843780771,13.6871193613857,8.89531265813857,11.39471344091,10.6425250412896,12.1749741215259,8.87854838147759,13.3009317060933,13.2971908919513,12.1036728411913,8.79826471693814,11.2453873328865,11.1774517334998,12.9659522773698,11.3523165555671,13.9947068648413,14.100389370881,12.83346126955,13.2747526984662,13.3224335629493,11.3796774202958,13.3925697008148,15.3309890840203,15.9767137324438,16.8595238192007,14.6367638541386,15.0903594488278,15.1236687039956,15.786456833221],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[26.2897689098492,24.8758444223553,25.9546740973368,24.0654359700158,20.8515946026891,22.1222005551681,22.8441555706784,21.8358777830377,20.0150458788499,33.1584274090826,32.1680227644742,32.2068783547729,29.2132689017802,32.2606633119285,34.2658516013995,36.1686760431156,35.705429517664,29.224527226761,26.2299784898758,28.8715398313478,28.2121936606243,26.7345048159361,24.3887870347127,23.6190712263808,23.8373346153647,26.1331524539739,25.7575164113194,26.0514218173921,26.3207126703113,44.2045096585527,41.1240897212178,29.3561045689508,25.7885828061029,28.2812574958429,28.7119347542524],"y":[18.2324293993413,18.0918388279155,17.2472778106108,15.608950871788,15.0994835378602,14.6359145250171,15.0437706749886,15.3936190463603,13.9278396535665,27.7240388190374,23.8701963152736,25.3773036247119,22.6654917133972,23.8700262919068,26.1749765781686,25.2954441359267,24.2368086006492,21.2230133350939,18.8503809483722,19.3264548361301,20.1705264398828,20.316209644638,16.7921871481463,15.9617144143209,16.9774045590311,21.0894182048738,18.9711359506473,19.0264010895044,18.755499628,35.1252232529223,29.2223958069459,20.6268203189597,19.3069921653718,19.910234621726,19.680772658065],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[20.1160257937387,14.8927083699033,20.2598686954007,17.201980037801,16.7918703721836,19.3199491266161,13.6737749001011,14.9059497082606,16.9585290063173,17.3644228188321,16.8104523586109,11.9930812094361,16.798294339329,15.9098239874467,17.6994629226625,15.0865623895079,16.9846277462319,16.6194143623114,17.7020161684603,16.934996095486,18.9798186300322,16.6194064240903,18.8622104544193,19.0480481196195,17.0912526706234,22.1482317682356,19.1326428709552,19.8330930205062,16.8988955223933,12.3286827754229,19.0791251778603,18.0372859582305,13.989779670164,14.8972986930981,17.8261470714584,18.2809544760734,14.784480704926,17.366156664677,15.6730703637004,17.7798442643136,16.9061527984217,19.0845837006345,19.0157379509881,17.022839454934,16.6543291779235,16.6070357026532,19.8590436864644,17.8870806520805,25.0400675037876,24.2179862480611,26.8633046448231,24.9974555341527,25.6808868121356,22.7695074150339,20.2862460821867,19.8570328842849,19.3151239523664,16.8630580881611,20.0161318257451,17.1488105932251,15.17789898552,17.826871792227],"y":[13.9968907225877,11.2369046710432,13.8769146591425,13.059672177583,11.7307872252539,14.0111067892984,10.6059669081122,10.8025295581669,14.0754764486104,13.1018083488569,13.2617698600516,8.61837750338018,13.2339500440285,10.7162622522563,13.1051032211632,11.2488909030333,11.2448491720483,10.7665647629648,11.7958552541211,13.831876654923,14.8752695159987,14.2733385361731,12.7557265138254,13.0620207149535,12.7594340885058,17.1474816016853,14.6230036623776,15.2089438620955,14.2799836236984,9.02646165732294,14.0621955517679,12.9815171437338,10.7571591503918,10.668556416221,11.8406853815541,11.7785253226757,10.7748415598646,10.752718379721,11.3084417412058,12.0144778482616,13.7331435937434,13.3707278100774,13.0637502066791,12.9602553257719,13.7776713002473,14.6708085425198,13.8830329116434,11.950653748028,17.6202132791281,17.9203241614625,20.029670258984,19.1048619357869,20.0810130756348,17.9858583364636,14.8522843115032,15.9700395498425,15.2230651348829,14.8565274389461,15.6983368381858,13.8766781533137,10.608560408093,12.6539054464549],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[10.1867216564901,45.8244043253176],"tickmode":"array","ticktext":["20","30","40"],"tickvals":[20,30,40],"categoryorder":"array","categoryarray":["20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.29303521590307,36.4505655403994],"tickmode":"array","ticktext":["10","20","30"],"tickvals":[10,20,30],"categoryorder":"array","categoryarray":["10","20","30"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(179,179,179,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"x":0.1,"y":-0.2,"orientation":"h"},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"72191f389a1":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"72191f389a1","visdat":{"72191f389a1":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Nice! Finally, I am satisfied. Out of curiosity, let us investigate what had happened, if we had set orientation to <code>"h"</code> from the start.</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">p_layout <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">ggplotly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">orientation =</span> <span class="st" style="color: #20794D;">"h"</span>)) </span>
<span id="cb9-4">p_layout</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-82429cb5e76543afe024" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-82429cb5e76543afe024">{"x":{"data":[{"x":[26.0695374974981,23.2086925234646,26.0768791632727,24.9308416092768,23.8377278642729],"y":[16.0255920592695,14.9937019487843,16.2581179991364,14.6785500021651,14.9681662725285],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[29.2325189378113,28.8532226204872,31.3592744208872,30.199346187897,25.9283539408818,25.9758448410779,26.7959052326158,26.3361588846892,24.6654317613691,27.9923393897712,27.0046153195202,24.6158054735512,25.3285694360733,25.1906069174409,25.2100386058912,29.10594604332,26.7922257948667,24.6693819865584,27.2870676016435,24.7108556447551,26.8869150258601,26.6395817369223,28.7409728361294,30.8681651802734,30.9054084653035,26.3083997838199,25.9642351053655,27.040266973339,30.3017102699727,32.6438519284129,35.385097906366,36.8783125722781,35.1507273484021,29.1799569616094,26.0125601794571,28.9640714298934,29.1267944455147,23.7246849192306,44.322838523984,28.6647483410314,26.0912471286953,28.7895679594949,29.0880855601281,28.8595965363085,28.6984598759562,23.0894380249083,23.8697686104104],"y":[18.3546365527436,21.3599895056337,20.0436936119571,21.0941042929888,15.9950746381655,18.3581185951829,18.2678233733401,18.2594217065722,16.2794251123443,19.9059263626114,19.2920959310606,14.9529407570139,16.9014831976965,16.7613126020879,15.191211941652,20.613101792708,19.2002502327785,19.8885834714398,20.224532520771,19.0842224361375,20.390429372713,21.3617810707539,20.9458538677543,21.1876969605684,22.023192255199,17.764141587913,18.004825716652,18.1660383384675,23.8722776727751,24.1610339703038,25.719329581596,28.3180871790275,26.1644991233945,21.1955964449793,19.2426964538172,21.327014782466,22.2342363858595,17.1768635012209,32.8190428625792,20.9294821463525,18.761811398156,22.0562411589548,21.1649545585737,21.3555597810075,21.3608713643625,16.0921993074939,17.0229520991445],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.9044261876494,24.740211728029,22.7019718203694,26.635106375441,30.2450193801895,26.2290019288659,29.1139196861535,25.9675163818523,26.0613439768553,26.7735526811332,29.9075755758211,30.7505010068417,26.3826859112829,25.9200291238725,27.8134721610695,31.0913221659139,32.1743525596336,27.2983133057132,25.6529014863074,26.0771654583514,24.9437842892483,24.6082462120801,26.1642944850028,26.2351581836119,27.0457895239815,27.781882635504,24.6939795896411,28.8139035582542,26.7512148642912,30.9917057665065,30.8071901621297,26.2751989595592,25.8321278845891,27.7054823482409,28.6316050566733,28.6990886611864,28.3028334125876,29.0206906398758,26.2609739355743,25.9546907719225,26.1499782312661],"y":[15.2203587526456,16.6392504854128,15.7147986333817,18.8174664350227,21.9412421638146,18.0619578139856,18.0710607575253,16.7382188407704,18.3158760275692,18.1823668444529,20.9278107820079,20.9471999887377,17.8966239795089,17.7303354423493,19.3118404872715,22.7406380165368,22.6032889027148,19.2829365236685,18.8827249582857,17.7235391762108,19.1947817381471,18.8948097981513,17.966564495489,16.0649606874213,17.1082607276738,17.6055515542626,16.3943020233884,21.0646239906549,20.8488395115361,20.66338078361,21.3159992082044,17.8375386539847,18.1393284775317,19.1340950250626,20.9187900936231,17.7004002038389,18.9227939575911,20.8587905358523,15.9053624220192,17.7711879475042,17.3250940512866],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.3811728440225,24.2415038228035,21.6621089892462,22.2176215292886,24.2885711893439,23.7624798161909,16.8741880491376,22.3482740551233,21.2630665579811,22.7614980570972,23.0209097975865],"y":[17.8727037012577,16.6231906885281,15.650029456988,15.6334036266431,17.0330333298072,17.1832605516538,11.0103338634595,15.0982644820586,14.6526034248993,15.9709895990789,16.1474538382143],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.1797799473628,18.2600548697636,17.2516784453765,17.074075470306,19.0746808677912,18.9322942204773,11.9272167149931,17.0604608079419,15.0611950146034,16.1903100423515,11.7458210209385,16.8385425474495,16.9214616367593,16.3715123716742,11.8011103281751,14.7072661235929,15.8631472278386,16.8314063332975,14.7031968990341,17.3396130913869,17.0063692236319,15.620716095157,16.0954405045137,17.0740307107568,14.9368035169318,16.9185084719211,20.3094828292727,19.729708958976,21.8971724007279,16.9803054461256,18.6825426554307,17.9563752116635,19.7180323660374],"y":[14.911607263796,13.8244879053906,12.711102345027,13.9245182558894,13.6002623602748,14.3930446505547,9.25128542855382,10.6467828910798,11.2882873428985,12.2226631194353,9.3206142757088,12.6414996828884,13.2106960527599,11.7426085369661,9.13175450786948,10.9605820188299,10.6250534445047,13.1893267909065,11.0187177952379,14.3452952159569,14.2327709948644,12.8799873674288,13.041873472929,12.9547880431637,10.9845888245851,12.6195365335792,15.3193038061261,16.0753157293424,16.7987223310396,15.3486866958439,14.783008900471,14.886529946886,15.6580456236377],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[26.2584711428732,24.6843957705423,25.761778011173,23.7427618680522,21.0229884400964,22.1495326923206,23.0055673277006,22.3760009210557,19.9999113256112,33.3216467292979,32.2490658331662,31.8183402437717,28.6980494702235,31.9146104715765,33.6857627861202,35.895660399273,35.927889703773,28.7847827907652,25.7680317917839,28.85321668908,27.9590525520965,27.2695139134303,23.7878491772339,23.9092619780451,23.6351802969351,25.6332604017109,26.3944717409089,25.6851196939126,25.9051174111664,44.1181229254231,40.8756589414552,29.2367516124621,25.8039553610608,27.9247004931793,28.6678938863799],"y":[17.743487313576,18.3753665978089,17.03784600012,15.7303178867325,15.3458430631086,14.8598864398897,15.0906618429348,15.0095629019663,13.9699981797487,27.9509539887309,23.9274278540164,25.2128541234881,23.123784535937,24.193960095942,25.8276962187141,24.9545920222998,23.6574839897454,20.6497408656403,19.091205720976,18.9087609639391,19.8892674980685,20.0645335869864,17.1455876529217,15.7300239535049,16.9539977174252,21.2987467868254,19.0378701049834,19.3878855776042,18.8809800971299,35.0024371901527,28.9001474447548,20.847729780525,19.1294082490727,19.9546166317537,20.1237246634439],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.9603847742081,14.9667947752401,20.0589487444609,17.0323692591861,16.9646910116076,18.8365162357688,14.2560035970062,15.2472310306504,17.321026304923,16.864389058575,16.910606117174,11.7305228490382,17.0655788823962,15.9525397550315,18.1082643568516,15.0638210255653,17.1231527039781,17.0291766369715,18.2808106482029,17.2638733290136,18.8665304856375,17.286883941479,18.9828423297033,19.0532320093364,16.9801580976695,22.1650135064498,19.210812809132,19.9155101319775,17.054683617875,11.6714911801741,19.0647804113105,17.7630062384531,13.8458338851109,15.3502142705023,17.8517790557817,17.6693007864058,14.9609489548951,17.2745739817619,16.3971147347242,17.6098847638816,17.2222477449104,19.1276823399588,19.2615903589875,16.7618252299726,17.0923787966371,17.1748099584132,19.684054929018,18.332779658027,24.6615074167028,23.8394733386114,27.039931009151,25.3593792930245,26.1613463381305,22.9078646976501,20.2028732353821,20.2974869528785,18.8189371362329,17.0684418180957,19.8233358317986,17.1215390730649,15.2790247466415,18.1357749523595],"y":[13.6059259127825,11.2509085131809,13.9599288342521,13.0812973793596,11.7033239554614,14.1809156015515,11.1340024420992,10.7594505637884,14.2622279999778,13.2201357904822,13.3906772723421,9.282617505081,13.2620885847136,10.7518239416182,13.1673424385488,11.3802332621068,10.6231529213488,11.0671825589612,12.2501522678882,14.0613758731633,14.8011695966125,14.1844814665616,13.3359524067491,12.8996841784567,12.7365496750921,16.8221336159855,15.1432422727346,15.0093276975676,14.1762971213087,8.88045346625149,13.6064977914095,13.1814047921449,10.9768593823537,10.943230118975,11.7079885417596,11.8291084365919,10.9827715408057,11.05130129233,10.8586260164157,11.8752932742238,13.950502111949,13.1268884273246,12.6665988752618,13.0116081442684,14.2025771729648,15.1150749068707,14.2311852864921,11.7180188342929,17.769343748875,17.7708415782079,19.8199173267931,19.1202205227688,20.0215699287131,17.8652841815725,14.792487549223,15.9688552590087,15.2767203791067,14.9335553821176,15.8113246012479,14.3633516587317,11.2862542835996,13.0647100212052],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[10.0389238129836,45.9554058911745],"tickmode":"array","ticktext":["20","30","40"],"tickvals":[20,30,40],"categoryorder":"array","categoryarray":["20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.57435428005643,36.3085363763478],"tickmode":"array","ticktext":["10","20","30"],"tickvals":[10,20,30],"categoryorder":"array","categoryarray":["10","20","30"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(179,179,179,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895},"title":{"text":"class","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"orientation":"h"},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"7219cd17de2":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"7219cd17de2","visdat":{"7219cd17de2":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>This already looks nice enough, so our manual tweaking was not technically necessary. But then again, this does not recreate what <code>legend.position = "bottom"</code> usually does. Now that we understand how <code>layout()</code> works, we can roam the reference manual and try to tweak the legend box. Let’s try to change a couple of things. This does <a href="https://www.allisonhorst.com/post/do-your-worst/">not have to be pretty</a>, we only want to see how plotly works.</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1">p_layout <span class="ot" style="color: #00769E;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">ggplotly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">layout</span>(</span>
<span id="cb10-4">    <span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-5">      <span class="at" style="color: #677623;">orientation =</span> <span class="st" style="color: #20794D;">"h"</span>,</span>
<span id="cb10-6">      <span class="at" style="color: #677623;">borderwidth =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb10-7">      <span class="at" style="color: #677623;">bgcolor =</span> <span class="st" style="color: #20794D;">"grey"</span>,</span>
<span id="cb10-8">      <span class="at" style="color: #677623;">bordercolor =</span> <span class="st" style="color: #20794D;">"red"</span>,</span>
<span id="cb10-9">      <span class="at" style="color: #677623;">font =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-10">        <span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb10-11">        <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">"Gravitas One"</span>,</span>
<span id="cb10-12">        <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb10-13">      ),</span>
<span id="cb10-14">      <span class="at" style="color: #677623;">title =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-15">        <span class="at" style="color: #677623;">text =</span> <span class="st" style="color: #20794D;">"Class"</span>,</span>
<span id="cb10-16">        <span class="at" style="color: #677623;">side =</span> <span class="st" style="color: #20794D;">"top"</span>,</span>
<span id="cb10-17">        <span class="at" style="color: #677623;">font =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-18">          <span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb10-19">          <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">"Gravitas One"</span>,</span>
<span id="cb10-20">          <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb10-21">        )</span>
<span id="cb10-22">      )</span>
<span id="cb10-23">    )</span>
<span id="cb10-24">  ) </span>
<span id="cb10-25">p_layout</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-c1822205ba0bb7c0a12d" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-c1822205ba0bb7c0a12d">{"x":{"data":[{"x":[26.2126705972478,22.6320037908852,25.6397652262822,25.0590386480093,24.3847278216854],"y":[16.1223283611238,14.8530924139544,16.1630423689261,15.358515961282,14.7271509934217],"text":["hwy: 26<br />cty: 16<br />class: 2seater","hwy: 23<br />cty: 15<br />class: 2seater","hwy: 26<br />cty: 16<br />class: 2seater","hwy: 25<br />cty: 15<br />class: 2seater","hwy: 24<br />cty: 15<br />class: 2seater"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(248,118,109,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"2seater","legendgroup":"2seater","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[29.2617352306843,28.7641792904586,31.363973865658,30.0622346494347,26.0614174349233,25.9749494725838,27.112383537367,26.0887329801917,24.9265520246699,27.70893189013,27.1583926467225,25.1452307872474,24.9475105524063,24.8048370137811,24.924999672547,29.2999253900722,26.9251742649823,24.7397677030414,27.0603397618979,24.7068787420169,27.1457749573514,26.7017301892862,29.1640649402514,31.3021415226161,31.3460283182561,25.9530777899548,25.6217130327597,26.6129999039695,30.3875863801688,32.8602655494586,34.9337795065716,37.2197001218796,34.8979654857889,28.910080540739,25.6992746392265,29.3842530945316,28.823387860693,23.8937733093277,44.0746670253575,28.9436669940129,25.9439421925694,29.1720225263387,28.9988071989268,29.0007707808167,28.8359601235017,23.142392170988,24.3711495589465],"y":[18.3850577676669,21.109042417258,19.7489161072299,20.8695192230865,15.6837525980547,18.3453168110922,17.8595756217837,18.356501846388,16.3184670342132,19.8276552224532,18.9005517072976,14.6999482477084,17.3791597269475,16.6341861961409,14.7907935356721,20.7023262342438,18.8014747006819,19.647010451369,19.6191661316901,19.3520635157824,19.8788207208738,21.0807186942548,21.3531133981422,20.8747578116134,21.6157172758132,17.679671212472,18.3712347788736,17.9457679720595,23.616689533554,23.9591580143198,26.3574936231598,27.7225373059511,26.3643362410367,21.0025525156409,18.9854004805908,21.3718705056235,21.7553104486316,17.3059135431424,33.0430539211258,20.6778359312564,18.7322492850944,21.9104556918144,20.7350815933198,21.1952211065218,20.8655987519771,15.967921692878,16.8097294507548],"text":["hwy: 29<br />cty: 18<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 20<br />class: compact","hwy: 30<br />cty: 21<br />class: compact","hwy: 26<br />cty: 16<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 25<br />cty: 16<br />class: compact","hwy: 28<br />cty: 20<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 17<br />class: compact","hwy: 25<br />cty: 15<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 27<br />cty: 19<br />class: compact","hwy: 25<br />cty: 20<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 25<br />cty: 19<br />class: compact","hwy: 27<br />cty: 20<br />class: compact","hwy: 27<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 31<br />cty: 21<br />class: compact","hwy: 31<br />cty: 22<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 26<br />cty: 18<br />class: compact","hwy: 27<br />cty: 18<br />class: compact","hwy: 30<br />cty: 24<br />class: compact","hwy: 33<br />cty: 24<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 37<br />cty: 28<br />class: compact","hwy: 35<br />cty: 26<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 24<br />cty: 17<br />class: compact","hwy: 44<br />cty: 33<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 26<br />cty: 19<br />class: compact","hwy: 29<br />cty: 22<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 29<br />cty: 21<br />class: compact","hwy: 23<br />cty: 16<br />class: compact","hwy: 24<br />cty: 17<br />class: compact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(196,154,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"compact","legendgroup":"compact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[24.3192322781309,25.2624274563044,23.3494365127757,27.3800885356963,29.9615647545084,26.2978661147878,29.1809459993616,26.2492932723835,25.9167514557019,26.8663530796766,29.6749562868848,31.0238175921142,25.8443435164168,26.0546866115183,27.995257598348,31.1360755875707,32.3867716945708,27.3190435092896,25.6806296847761,26.268261622265,24.9594032105058,24.6501414308324,25.7631372805685,26.0728140162304,26.7087981238961,27.9316570486873,24.965398796089,29.3508634094149,27.1120078414679,31.0003814611584,31.1497931426391,25.6686932176352,26.1694518158212,27.6958675054833,28.6272643679753,28.8724487274885,28.2926743621007,28.6237486200407,26.3445793138817,25.6663313753903,26.3270542740822],"y":[14.9877048410475,16.6301148619503,16.2956589067355,18.9978350488469,21.7045581210405,17.8659242335707,18.178244330734,17.2779254952446,18.3426582355052,17.6216326469556,20.9669458081946,21.0570865185931,17.8593582699075,17.9025226173922,19.2016226384789,22.9411860892549,23.1295330312103,18.6654091699049,19.2896401714534,17.9364604651928,19.1972066227347,19.3228009110317,17.7385846773162,16.1523173747584,16.9077599033713,17.7267344970256,16.2284234624356,20.9427716661245,20.7624648857862,21.2502379260957,21.0676820071414,17.9047901771963,17.8237421272323,18.774550110288,21.0805976741016,18.2745499065146,19.2158361423761,21.0849326090887,16.0815473122522,18.2055545441806,17.1161866690964],"text":["hwy: 24<br />cty: 15<br />class: midsize","hwy: 25<br />cty: 17<br />class: midsize","hwy: 23<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 30<br />cty: 22<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 27<br />cty: 18<br />class: midsize","hwy: 30<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 31<br />cty: 23<br />class: midsize","hwy: 32<br />cty: 23<br />class: midsize","hwy: 27<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 25<br />cty: 19<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 27<br />cty: 17<br />class: midsize","hwy: 28<br />cty: 18<br />class: midsize","hwy: 25<br />cty: 16<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 27<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 31<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 29<br />cty: 18<br />class: midsize","hwy: 28<br />cty: 19<br />class: midsize","hwy: 29<br />cty: 21<br />class: midsize","hwy: 26<br />cty: 16<br />class: midsize","hwy: 26<br />cty: 18<br />class: midsize","hwy: 26<br />cty: 17<br />class: midsize"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(83,180,0,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"midsize","legendgroup":"midsize","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[23.6102255221456,23.8361993486062,22.3756611565128,22.3593795780092,23.7907286111265,23.6366546649486,16.7338793501258,21.7066473729908,20.9729130061343,22.6220411408693,22.669667599909],"y":[17.6679002989084,17.3067346882075,15.7830754643306,15.6977359242737,17.2237617913634,17.0994091037661,11.2546726217493,14.8837245846167,14.9144463773817,16.0518408790231,16.0711812889203],"text":["hwy: 24<br />cty: 18<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 22<br />cty: 16<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 24<br />cty: 17<br />class: minivan","hwy: 17<br />cty: 11<br />class: minivan","hwy: 22<br />cty: 15<br />class: minivan","hwy: 21<br />cty: 15<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan","hwy: 23<br />cty: 16<br />class: minivan"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,192,148,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"minivan","legendgroup":"minivan","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.1496664563194,18.0878173703328,16.7651690063998,17.3473541917279,18.6755971241742,18.8603526746854,11.6957168897614,16.7216297712177,14.6440815642476,15.6488611796871,12.2754720726982,16.7535398574546,17.071472074464,15.9288620283827,12.0674532596022,15.2304008411244,15.7609216498211,17.333704677783,14.8572879722342,16.7417688194662,17.1011609377339,16.1571081517264,15.8090239459649,16.6799474790692,15.2752686388791,17.03951427266,19.9985944120213,19.9941656066105,21.6955615885556,17.1484090317041,18.6725468147546,17.8608581630513,19.7752760894597],"y":[14.7867627762258,13.7857878822833,13.0254877569154,14.2637671459466,13.7603942992166,13.8808301040903,9.16346727199852,11.1268740095198,10.6866492671892,12.1030790500343,8.63145754318684,13.0779761839658,13.0922382829711,12.068915489316,8.67966448422521,10.7569126792252,10.8995350925252,12.925207673572,10.9562889080495,14.1061292197555,13.95213749744,12.7013731945306,13.1136034322903,12.9657786890864,10.9689944215119,12.9544721260667,15.1433819977567,15.8751542903483,16.9884978163987,15.2943880347535,14.748148797825,15.0809732565656,15.7083240719512],"text":["hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 19<br />cty: 14<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 11<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 12<br />class: pickup","hwy: 12<br />cty:  9<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 16<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 17<br />cty: 14<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 16<br />cty: 13<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 15<br />cty: 11<br />class: pickup","hwy: 17<br />cty: 13<br />class: pickup","hwy: 20<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup","hwy: 22<br />cty: 17<br />class: pickup","hwy: 17<br />cty: 15<br />class: pickup","hwy: 19<br />cty: 15<br />class: pickup","hwy: 18<br />cty: 15<br />class: pickup","hwy: 20<br />cty: 16<br />class: pickup"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,182,235,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"pickup","legendgroup":"pickup","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[26.0923818824813,25.0271656367928,25.8228407476097,24.1478619538248,20.9109896209091,22.3638336284086,23.1296497801319,21.980512589775,20.1879341091961,33.0205909956247,31.8159883886576,31.7804927799851,28.723098436743,31.7143151549622,34.3750102974474,35.9668270613998,35.7024996854365,28.6951518714428,26.1810667751357,28.9488320931792,28.3481136692688,26.6454334516078,24.3670479174703,23.9019317768514,23.8957035196945,25.7099488204345,25.9992327963933,25.7104023788124,26.3875325640664,44.0934990052134,40.7047516519204,28.7511354180053,25.8305984854698,27.6860179657117,28.6116388887167],"y":[17.6306662604213,18.3881617192179,16.7416628748178,15.7185553146526,14.9109087951481,15.1292372196913,14.8453912088647,14.6637244530022,13.6681060718372,28.2506446612999,24.1293115712702,25.3133156962693,23.3259966665879,23.8932890718803,26.2332214754075,25.0068475186825,24.3365985639393,20.8071985159069,19.2303975537419,19.3999961219728,19.8409836720675,19.7667347127572,17.3055925387889,16.1829415973276,17.1230871770531,21.3767383154482,19.2908443052322,18.7059782104567,18.6416274186224,35.1898982645944,28.9483160052449,20.7402550423518,19.0193743264303,20.0017812713981,20.0483169814572],"text":["hwy: 26<br />cty: 18<br />class: subcompact","hwy: 25<br />cty: 18<br />class: subcompact","hwy: 26<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 21<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 23<br />cty: 15<br />class: subcompact","hwy: 22<br />cty: 15<br />class: subcompact","hwy: 20<br />cty: 14<br />class: subcompact","hwy: 33<br />cty: 28<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 32<br />cty: 25<br />class: subcompact","hwy: 29<br />cty: 23<br />class: subcompact","hwy: 32<br />cty: 24<br />class: subcompact","hwy: 34<br />cty: 26<br />class: subcompact","hwy: 36<br />cty: 25<br />class: subcompact","hwy: 36<br />cty: 24<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 29<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 27<br />cty: 20<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 24<br />cty: 16<br />class: subcompact","hwy: 24<br />cty: 17<br />class: subcompact","hwy: 26<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 44<br />cty: 35<br />class: subcompact","hwy: 41<br />cty: 29<br />class: subcompact","hwy: 29<br />cty: 21<br />class: subcompact","hwy: 26<br />cty: 19<br />class: subcompact","hwy: 28<br />cty: 20<br />class: subcompact","hwy: 29<br />cty: 20<br />class: subcompact"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(165,138,255,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"subcompact","legendgroup":"subcompact","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[19.8236596925184,14.6813160551712,19.6918209349737,17.105771077238,17.3142387369648,18.934433038719,14.1725591478869,14.8939125610515,16.9003186212853,16.7792049601674,17.1143636247143,11.6089839927852,17.093383483775,16.0885156067088,18.3785910530016,14.761524466984,16.6253307098523,17.1925054388121,18.3716492809355,16.9122361069545,18.6884420152754,17.1644319383428,18.6298411149532,18.6425347421318,17.3069119919091,22.131227917783,19.3357721731067,20.3061907023191,17.0897804344073,11.8336220832542,18.6913940899074,18.3701072067022,13.8623073900118,14.7817070592195,17.6932708645239,18.3465690452605,14.8131530631334,16.7720801638439,16.2717330334708,18.1324367845431,17.3337701017037,19.3058309705928,19.2492008170113,17.0957684397697,16.7824121329933,16.7928484311327,20.2359776860103,18.0518764413893,24.7030928786844,24.1808856129646,27.3393180441111,24.7536011680961,26.160018895939,22.7413442021236,20.3639505036175,19.819655797258,19.2517382081598,16.7244572233409,20.2354617934674,17.1163949932903,15.3438739784062,18.2900630842894],"y":[13.9334737442434,11.0884036662057,13.6482344716787,12.6142124112695,12.0738755594939,13.6060054596514,10.9277799993753,11.0473523622379,14.1726497897878,12.6625841036439,13.2462486179546,8.64961915630847,12.7812231760472,10.9664902530611,12.7756706848741,10.9054344303906,10.8334468519315,10.9845596482977,12.1574284901842,14.283466482535,14.9486060831696,13.7059503357857,12.7264356413856,12.8674567874521,12.6770628640428,16.8656265281141,14.8380644854158,14.7281773332506,14.1500557146966,8.76464878227562,13.8134863348678,13.2761167664081,11.2780846234411,10.7292376501486,12.3006953019649,12.3944141784683,10.6981300419196,11.2641072006896,11.0596028326079,12.1976612927392,13.8517397599295,12.944765426591,12.9459082813933,12.7891007829458,14.0596401920542,14.6409951556474,13.9203072618693,11.702991832979,17.6141166476533,18.340933928825,19.7615323716775,18.9573684828356,20.0000548064709,17.6427846519276,14.7165754470974,15.7901012625545,14.7370156049728,14.9648283628747,16.1670867750421,13.8464223111048,10.8044498909265,12.9370751995593],"text":["hwy: 20<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 12<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 22<br />cty: 17<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 12<br />cty:  9<br />class: suv","hwy: 19<br />cty: 14<br />class: suv","hwy: 18<br />cty: 13<br />class: suv","hwy: 14<br />cty: 11<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 17<br />cty: 11<br />class: suv","hwy: 16<br />cty: 11<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 19<br />cty: 13<br />class: suv","hwy: 17<br />cty: 13<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 14<br />class: suv","hwy: 18<br />cty: 12<br />class: suv","hwy: 25<br />cty: 18<br />class: suv","hwy: 24<br />cty: 18<br />class: suv","hwy: 27<br />cty: 20<br />class: suv","hwy: 25<br />cty: 19<br />class: suv","hwy: 26<br />cty: 20<br />class: suv","hwy: 23<br />cty: 18<br />class: suv","hwy: 20<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 19<br />cty: 15<br />class: suv","hwy: 17<br />cty: 15<br />class: suv","hwy: 20<br />cty: 16<br />class: suv","hwy: 17<br />cty: 14<br />class: suv","hwy: 15<br />cty: 11<br />class: suv","hwy: 18<br />cty: 13<br />class: suv"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(251,97,215,1)","opacity":0.5,"size":7.55905511811024,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","name":"suv","legendgroup":"suv","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":37.2602739726027},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[9.98475824216381,45.7177247558348],"tickmode":"array","ticktext":["10","20","30","40"],"tickvals":[10,20,30,40],"categoryorder":"array","categoryarray":["10","20","30","40"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"y","title":{"text":"hwy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[7.30353550711647,36.5178203006648],"tickmode":"array","ticktext":["10","20","30"],"tickvals":[10,20,30],"categoryorder":"array","categoryarray":["10","20","30"],"nticks":null,"ticks":"outside","tickcolor":"rgba(179,179,179,1)","ticklen":3.65296803652968,"tickwidth":0.33208800332088,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(222,222,222,1)","gridwidth":0.33208800332088,"zeroline":false,"anchor":"x","title":{"text":"cty","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(179,179,179,1)","width":0.66417600664176,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"grey","bordercolor":"red","borderwidth":3,"font":{"color":"white","family":"Gravitas One","size":15},"title":{"text":"Class","font":{"color":"white","family":"Gravitas One","size":15},"side":"top"},"orientation":"h"},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"72195df4450f":{"x":{},"y":{},"fill":{},"type":"scatter"}},"cur_data":"72195df4450f","visdat":{"72195df4450f":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Note how we have used lists in lists (in lists) to customize the legend. Interestingly, our initial blunder of ignoring the “parent” resp. the hierarchy of options earlier helped to understand that as an option’s parent’s name gets longer, e.g.&nbsp;<code>layout.legend.title.font</code>, we will have to use more convoluted lists to change that option.</p>
</section>
<section id="creating-a-plotly-chart-manually" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-plotly-chart-manually">Creating a Plotly Chart Manually</h2>
<p>Since we have learned how to tweak a plotly object, we might as well figure out how to create one without having to use <code>ggplotly()</code>. It is not that I want to avoid using ggplot altogether but, in principle, it cannot hurt if we can understand plotly’s implementation in the R package <code>plotly</code>.</p>
<p>So, from the book <a href="https://plotly-r.com/index.html">Interactive web-based data visualization with R, plotly, and shiny</a> I gather that the <code>plotly</code> R package implements the JavaScript <code>plotly.js</code> library via a Grammar of Graphics approach. Thus, it works similar to <code>ggplot2</code> in the sense that we can add layers of graphical objects to create a plot. In <code>plotly</code>’s case, we pass a plotly object from one <code>add_*</code> layer to the next (via <code>%&gt;%</code>).</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">plt <span class="ot" style="color: #00769E;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">plot_ly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">add_markers</span>(<span class="at" style="color: #677623;">x =</span> <span class="sc" style="color: #5E5E5E;">~</span>hwy, <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>cty, <span class="at" style="color: #677623;">color =</span> <span class="sc" style="color: #5E5E5E;">~</span>class)</span>
<span id="cb11-4">plt</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-8eb10918cc4b34bc7c47" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-8eb10918cc4b34bc7c47">{"x":{"visdat":{"72191c69f189":["function () ","plotlyVisDat"]},"cur_data":"72191c69f189","attrs":{"72191c69f189":{"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"x":{},"y":{},"type":"scatter","mode":"markers","color":{},"inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"hwy"},"yaxis":{"domain":[0,1],"automargin":true,"title":"cty"},"hovermode":"closest","showlegend":true},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[26,23,26,25,24],"y":[16,15,16,15,15],"type":"scatter","mode":"markers","name":"2seater","marker":{"color":"rgba(102,194,165,1)","line":{"color":"rgba(102,194,165,1)"}},"textfont":{"color":"rgba(102,194,165,1)"},"error_y":{"color":"rgba(102,194,165,1)"},"error_x":{"color":"rgba(102,194,165,1)"},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[29,29,31,30,26,26,27,26,25,28,27,25,25,25,25,29,27,25,27,25,27,27,29,31,31,26,26,27,30,33,35,37,35,29,26,29,29,24,44,29,26,29,29,29,29,23,24],"y":[18,21,20,21,16,18,18,18,16,20,19,15,17,17,15,21,19,20,20,19,20,21,21,21,22,18,18,18,24,24,26,28,26,21,19,21,22,17,33,21,19,22,21,21,21,16,17],"type":"scatter","mode":"markers","name":"compact","marker":{"color":"rgba(252,141,98,1)","line":{"color":"rgba(252,141,98,1)"}},"textfont":{"color":"rgba(252,141,98,1)"},"error_y":{"color":"rgba(252,141,98,1)"},"error_x":{"color":"rgba(252,141,98,1)"},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[24,25,23,27,30,26,29,26,26,27,30,31,26,26,28,31,32,27,26,26,25,25,26,26,27,28,25,29,27,31,31,26,26,28,29,29,28,29,26,26,26],"y":[15,17,16,19,22,18,18,17,18,18,21,21,18,18,19,23,23,19,19,18,19,19,18,16,17,18,16,21,21,21,21,18,18,19,21,18,19,21,16,18,17],"type":"scatter","mode":"markers","name":"midsize","marker":{"color":"rgba(141,160,203,1)","line":{"color":"rgba(141,160,203,1)"}},"textfont":{"color":"rgba(141,160,203,1)"},"error_y":{"color":"rgba(141,160,203,1)"},"error_x":{"color":"rgba(141,160,203,1)"},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[24,24,22,22,24,24,17,22,21,23,23],"y":[18,17,16,16,17,17,11,15,15,16,16],"type":"scatter","mode":"markers","name":"minivan","marker":{"color":"rgba(231,138,195,1)","line":{"color":"rgba(231,138,195,1)"}},"textfont":{"color":"rgba(231,138,195,1)"},"error_y":{"color":"rgba(231,138,195,1)"},"error_x":{"color":"rgba(231,138,195,1)"},"line":{"color":"rgba(231,138,195,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[19,18,17,17,19,19,12,17,15,16,12,17,17,16,12,15,16,17,15,17,17,16,16,17,15,17,20,20,22,17,19,18,20],"y":[15,14,13,14,14,14,9,11,11,12,9,13,13,12,9,11,11,13,11,14,14,13,13,13,11,13,15,16,17,15,15,15,16],"type":"scatter","mode":"markers","name":"pickup","marker":{"color":"rgba(166,216,84,1)","line":{"color":"rgba(166,216,84,1)"}},"textfont":{"color":"rgba(166,216,84,1)"},"error_y":{"color":"rgba(166,216,84,1)"},"error_x":{"color":"rgba(166,216,84,1)"},"line":{"color":"rgba(166,216,84,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[26,25,26,24,21,22,23,22,20,33,32,32,29,32,34,36,36,29,26,29,28,27,24,24,24,26,26,26,26,44,41,29,26,28,29],"y":[18,18,17,16,15,15,15,15,14,28,24,25,23,24,26,25,24,21,19,19,20,20,17,16,17,21,19,19,19,35,29,21,19,20,20],"type":"scatter","mode":"markers","name":"subcompact","marker":{"color":"rgba(255,217,47,1)","line":{"color":"rgba(255,217,47,1)"}},"textfont":{"color":"rgba(255,217,47,1)"},"error_y":{"color":"rgba(255,217,47,1)"},"error_x":{"color":"rgba(255,217,47,1)"},"line":{"color":"rgba(255,217,47,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[20,15,20,17,17,19,14,15,17,17,17,12,17,16,18,15,17,17,18,17,19,17,19,19,17,22,19,20,17,12,19,18,14,15,18,18,15,17,16,18,17,19,19,17,17,17,20,18,25,24,27,25,26,23,20,20,19,17,20,17,15,18],"y":[14,11,14,13,12,14,11,11,14,13,13,9,13,11,13,11,11,11,12,14,15,14,13,13,13,17,15,15,14,9,14,13,11,11,12,12,11,11,11,12,14,13,13,13,14,15,14,12,18,18,20,19,20,18,15,16,15,15,16,14,11,13],"type":"scatter","mode":"markers","name":"suv","marker":{"color":"rgba(229,196,148,1)","line":{"color":"rgba(229,196,148,1)"}},"textfont":{"color":"rgba(229,196,148,1)"},"error_y":{"color":"rgba(229,196,148,1)"},"error_x":{"color":"rgba(229,196,148,1)"},"line":{"color":"rgba(229,196,148,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Notice the <code>~</code>. These are used to ensure that the variables are mapped from the data (similar to <code>aes()</code> in <code>ggplot2</code>). Alternatively, one could also use <code>x = mpg$hwy</code> to create the same plot.</p>
<p>Because we can see a lot of overplotting, let us jitter the points. Unfortunately, I couldn’t find a built-in option for that. Therefore, let’s do the jittering manually.</p>
<div class="cell">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb12-2">jitter_hwy <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb12-3">jitter_cty <span class="ot" style="color: #00769E;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb12-4">jittered_mpg <span class="ot" style="color: #00769E;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-6">    <span class="at" style="color: #677623;">hwy =</span> hwy <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="fu" style="color: #4758AB;">length</span>(hwy), <span class="sc" style="color: #5E5E5E;">-</span>jitter_hwy, jitter_hwy),</span>
<span id="cb12-7">    <span class="at" style="color: #677623;">cty =</span> cty <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="fu" style="color: #4758AB;">length</span>(cty), <span class="sc" style="color: #5E5E5E;">-</span>jitter_cty, jitter_cty)</span>
<span id="cb12-8">  )</span>
<span id="cb12-9">plt <span class="ot" style="color: #00769E;">&lt;-</span> jittered_mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;">plot_ly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-11">  <span class="fu" style="color: #4758AB;">add_markers</span>(<span class="at" style="color: #677623;">x =</span> <span class="sc" style="color: #5E5E5E;">~</span>hwy, <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>cty, <span class="at" style="color: #677623;">color =</span> <span class="sc" style="color: #5E5E5E;">~</span>class)</span>
<span id="cb12-12">plt </span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-e16ffa212c503cb82ae5" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-e16ffa212c503cb82ae5">{"x":{"visdat":{"7219381902f":["function () ","plotlyVisDat"]},"cur_data":"7219381902f","attrs":{"7219381902f":{"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"x":{},"y":{},"type":"scatter","mode":"markers","color":{},"inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"hwy"},"yaxis":{"domain":[0,1],"automargin":true,"title":"cty"},"hovermode":"closest","showlegend":true},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[27.9770791064948,23.6228231964633,26.8341218726709,25.1762640988454,24.3765680817887],"y":[15.8087983620353,14.9431525552645,16.7362136137672,15.8514159116894,15.7639551186003],"type":"scatter","mode":"markers","name":"2seater","marker":{"color":"rgba(102,194,165,1)","line":{"color":"rgba(102,194,165,1)"}},"textfont":{"color":"rgba(102,194,165,1)"},"error_y":{"color":"rgba(102,194,165,1)"},"error_x":{"color":"rgba(102,194,165,1)"},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[28.1503100804985,30.1532205417752,30.6359076872468,31.5320696160197,27.7618691371754,24.1822259975597,27.112421952188,27.5696761775762,25.2057400578633,27.8264589412138,28.8273333813995,24.8133366247639,25.7102825418115,25.2905336078256,23.4116987306625,28.6378998104483,25.0418684473261,24.0627467473969,27.5198922138661,23.735313963145,28.4545764457434,26.0601309258491,29.2583617391065,32.6527528921142,32.6074975579977,25.0966664860025,25.2859310256317,28.9425635375082,30.4799732407555,34.7492563566193,34.8661308092996,36.6273303730413,35.6369212968275,28.1529571227729,24.6825809404254,27.6886869855225,28.9281704220921,23.0118597140536,42.8650191584602,29.6975055523217,24.1906545097008,29.8034123498946,28.4075545538217,28.6357759917155,30.283805295825,24.675429392606,23.1301133204252],"y":[17.5217137141153,20.7943039066158,19.3954894733615,21.6638551256619,15.3057744456455,18.6068370840512,18.0936523131095,18.3246352840215,15.343396987766,20.2661107196473,18.6237394935451,15.4491086928174,16.7978796493262,17.9387128222734,15.9347967412323,21.9276866638102,19.5491830841638,20.1526036751457,19.7908977181651,18.899604968261,20.4130038022995,21.0949189360254,21.288480441086,21.192527089268,21.6438747514039,18.7822286249138,18.2525138948113,17.6058098305948,23.7764093275182,23.3209501849487,26.7251037950628,28.9062024275772,26.1272893669084,21.1677446719259,19.463415317703,20.33104182221,22.7329355264083,17.4171482743695,33.5207990724593,20.2941682171077,18.7161139268428,22.3466649628244,21.0476452033035,20.6996035855263,20.481061403174,15.1163835925981,16.4732394842431],"type":"scatter","mode":"markers","name":"compact","marker":{"color":"rgba(252,141,98,1)","line":{"color":"rgba(252,141,98,1)"}},"textfont":{"color":"rgba(252,141,98,1)"},"error_y":{"color":"rgba(252,141,98,1)"},"error_x":{"color":"rgba(252,141,98,1)"},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[25.5992998816073,23.9843509374186,21.1682381341234,27.7628211136907,31.1818696707487,24.0984547380358,28.9111838843673,27.0338381500915,25.642759106122,25.5883787637576,31.7411992130801,30.2049155998975,24.2428822861984,27.7909077601507,28.8823850937188,29.7353980960324,33.370917275548,25.9246471282095,24.9563998226076,24.3067646613345,23.9828947121277,25.9285408221185,24.4443858452141,25.5599777409807,27.2877412559465,26.8675710512325,24.7790720080957,29.3270003991202,28.3590710591525,30.2497926596552,31.8331612888724,25.0600712243468,26.3773727761582,27.9251592019573,29.241013054736,29.7930463794619,29.6627341536805,29.4734049094841,25.7136860350147,26.1683214688674,24.2339139543474],"y":[15.4534050780348,16.5144334929064,15.4435758693144,18.6726624118164,21.6946492628194,17.0400486011058,18.0056260912679,17.7420868272893,18.0520593202673,17.4501467016526,20.9728235281073,20.7404295969754,18.9667003615759,17.7766382303089,18.4584896806628,22.4177526971325,22.617573665455,19.9426849004813,19.1698001869954,18.5216472507454,18.7454187888652,19.5383878224529,17.1899248263799,15.4209741582163,17.9541979925707,17.5926043507643,16.4519660538062,20.9958978723735,20.5520993452519,20.3840466374531,21.9012425281107,17.6434510755353,17.9569127676077,18.0559851438738,20.8722599921748,17.9280332536437,18.3305961624719,21.1698731146753,15.5415560388938,17.4601938407868,17.3824156629853],"type":"scatter","mode":"markers","name":"midsize","marker":{"color":"rgba(141,160,203,1)","line":{"color":"rgba(141,160,203,1)"}},"textfont":{"color":"rgba(141,160,203,1)"},"error_y":{"color":"rgba(141,160,203,1)"},"error_x":{"color":"rgba(141,160,203,1)"},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[22.8656317433342,23.2727240305394,20.9265031414106,20.5712000895292,23.6581853432581,23.6548973051831,16.4753818036988,20.6097789909691,19.555224253796,21.9321363978088,22.8638498010114],"y":[17.0126015678979,16.1441142479889,15.3284224499948,16.5406681485474,17.4703686116263,17.9437512713484,10.9329447536729,14.1487690266222,15.297636248637,16.5171863390133,15.2742121620104],"type":"scatter","mode":"markers","name":"minivan","marker":{"color":"rgba(231,138,195,1)","line":{"color":"rgba(231,138,195,1)"}},"textfont":{"color":"rgba(231,138,195,1)"},"error_y":{"color":"rgba(231,138,195,1)"},"error_x":{"color":"rgba(231,138,195,1)"},"line":{"color":"rgba(231,138,195,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[18.0638905614614,19.4313108613715,15.1833246666938,16.7688002968207,20.1956993825734,17.4875970399007,12.2437919350341,15.8261255584657,13.5101266009733,17.2585601555184,11.7940653655678,18.2402574121952,18.2495580380782,17.1773692844436,11.7593267504126,16.017900634557,16.5168845262378,17.8407296054065,13.0024990933016,18.1527833361179,15.4114585770294,15.7395709659904,17.9398279199377,18.5722044575959,16.5458762431517,15.7002106010914,18.9549041073769,21.8494357457384,22.4054629039019,17.0601189089939,18.6102933688089,19.52098616492,19.4563674591482],"y":[14.7931691892445,13.4499706584029,12.1159171210602,13.7917853766121,13.1298565999605,13.4517728658393,8.10925821820274,11.340564079117,10.5954835652374,11.1980836587027,9.59766322234645,13.5691505330615,12.0188598101959,12.5581317655742,9.4587813038379,11.2602637056261,10.9618216599338,12.3132737027481,10.0164310396649,13.4754988099448,13.707972205244,13.713770840317,13.707526747603,12.5917909108102,10.2940966491587,13.4079841226339,14.4696393515915,16.225343930535,16.2163570588455,14.9740651398897,14.1988916466944,14.3223315253854,15.5659857415594],"type":"scatter","mode":"markers","name":"pickup","marker":{"color":"rgba(166,216,84,1)","line":{"color":"rgba(166,216,84,1)"}},"textfont":{"color":"rgba(166,216,84,1)"},"error_y":{"color":"rgba(166,216,84,1)"},"error_x":{"color":"rgba(166,216,84,1)"},"line":{"color":"rgba(166,216,84,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[24.5227827662602,25.6124077001587,25.3740658890456,24.6270325118676,20.2814929699525,20.7507644770667,24.1291772052646,20.3743799468502,19.8671161662787,33.0460218396038,32.399955837056,31.3312941612676,28.9544521346688,33.8178953099996,33.9316095886752,37.5614008884877,37.6577527476475,29.4349399292842,24.5691771823913,29.1971386242658,29.8163649542257,27.3419334124774,23.6180411269888,24.591573917307,23.2792824683711,26.1347517818213,26.9613374415785,24.8844117512926,25.6509844744578,45.8444191748276,41.9135777130723,29.7455003280193,24.2113757710904,27.5808805385605,28.9113815193996],"y":[17.2076133764349,17.0674555459991,17.9988090558909,15.0697496081702,14.6767825675197,15.8301275232807,15.2344705392607,14.5725706974044,14.4755948060192,28.6681086183526,23.6285415608436,24.9851330956444,23.3947475324385,24.282924707979,26.2878458299674,25.9557068096474,23.8294706689194,20.2388095599599,19.2465950925834,18.2730803941377,20.9349389886484,20.0301436157897,16.3261406584643,16.2438045903109,17.9719083304517,21.9824731117114,19.9721085946076,18.2741349427961,19.8106191633269,35.78015582636,29.6236548321322,21.495032644365,18.3098234515637,19.2494841772132,20.9494516169652],"type":"scatter","mode":"markers","name":"subcompact","marker":{"color":"rgba(255,217,47,1)","line":{"color":"rgba(255,217,47,1)"}},"textfont":{"color":"rgba(255,217,47,1)"},"error_y":{"color":"rgba(255,217,47,1)"},"error_x":{"color":"rgba(255,217,47,1)"},"line":{"color":"rgba(255,217,47,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[19.3116828771308,16.8180145965889,21.558157264255,17.7712136246264,17.5620272550732,18.1566389491782,12.5884545892477,16.8520969301462,18.6091961804777,18.0132314572111,18.5801814366132,11.4978511035442,17.6604607785121,14.3793626436964,17.5358785511926,14.0975345782936,16.9012662963942,15.8804755406454,17.5192661508918,17.451084013097,18.4071916369721,15.4445416973904,17.9744778908789,19.6722223497927,16.670587118715,21.2308800434694,17.8790705250576,19.4779554633424,18.9368768138811,10.6168092032894,17.3641759995371,16.5676276311278,14.7600284060463,15.4770259335637,19.5655764685944,18.6919963704422,15.9483109517023,17.0845429031178,16.6393537987024,19.2872218405828,18.1451262068003,20.9192876694724,18.7577261449769,16.2468088082969,18.3898126604035,16.9901090683416,19.5516361193731,16.9857959765941,23.8719626748934,24.009198253043,26.4156182873994,25.5999406352639,25.4988558264449,22.4217815231532,20.9862720165402,20.6731385989115,19.4720714930445,16.4889522409067,20.1193427434191,18.4987293714657,13.6093864673749,18.2914682328701],"y":[14.1860913033597,10.5350428642705,14.0621407977305,13.5705833425745,11.336121621076,14.3483736850321,11.9003339586779,11.0328897885047,14.1530380425975,12.2014431646094,12.1438081944361,9.7608811375685,13.5084948041476,11.6332117752172,13.9642807473429,10.2071992899291,10.9049167884514,10.9845866574906,11.7791742230766,13.9293318837881,15.4265580014326,13.1106038526632,12.7095661950298,13.6056245458312,13.6714176740497,17.3375430349261,14.8378317938186,14.6466899863444,14.6705106399022,8.28763408726081,13.3856318937615,13.7934773652814,10.6162391086109,10.7266010870226,12.5678929574788,11.38675735984,10.0355316237547,10.8132157325745,10.9663353385404,11.8436899003573,13.6856176033616,13.7329666293226,12.9102161019109,13.0675297472626,14.0753543660976,15.8279908993281,13.370592883788,11.5644368347712,18.5713756685145,17.2108354922384,19.4791892580688,18.5410897447728,19.2021169881336,17.2358276825398,14.1650054915808,15.6786251603626,15.3615751024336,14.6338984961621,16.6631371960975,13.4303441653028,10.659094826784,13.9932344374247],"type":"scatter","mode":"markers","name":"suv","marker":{"color":"rgba(229,196,148,1)","line":{"color":"rgba(229,196,148,1)"}},"textfont":{"color":"rgba(229,196,148,1)"},"error_y":{"color":"rgba(229,196,148,1)"},"error_x":{"color":"rgba(229,196,148,1)"},"line":{"color":"rgba(229,196,148,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Regarding the customization of the points aka markers, we can pass a list of options (taken from the reference manual again) to the <code>marker</code> argument in <code>add_markers()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb13-2">plt <span class="ot" style="color: #00769E;">&lt;-</span> jittered_mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">plot_ly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">add_markers</span>(</span>
<span id="cb13-5">    <span class="at" style="color: #677623;">x =</span> <span class="sc" style="color: #5E5E5E;">~</span>hwy, </span>
<span id="cb13-6">    <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>cty, </span>
<span id="cb13-7">    <span class="at" style="color: #677623;">color =</span> <span class="sc" style="color: #5E5E5E;">~</span>class,</span>
<span id="cb13-8">    <span class="at" style="color: #677623;">marker =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb13-9">      <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb13-10">      <span class="at" style="color: #677623;">opacity =</span> <span class="fl" style="color: #AD0000;">0.6</span>,</span>
<span id="cb13-11">      <span class="at" style="color: #677623;">line =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #677623;">width =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb13-12">    )</span>
<span id="cb13-13">  ) </span>
<span id="cb13-14">plt</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-75dae40aded30e8a9389" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-75dae40aded30e8a9389">{"x":{"visdat":{"72197b848cb":["function () ","plotlyVisDat"]},"cur_data":"72197b848cb","attrs":{"72197b848cb":{"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"x":{},"y":{},"type":"scatter","mode":"markers","color":{},"marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"hwy"},"yaxis":{"domain":[0,1],"automargin":true,"title":"cty"},"hovermode":"closest","showlegend":true},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[27.9770791064948,23.6228231964633,26.8341218726709,25.1762640988454,24.3765680817887],"y":[15.8087983620353,14.9431525552645,16.7362136137672,15.8514159116894,15.7639551186003],"type":"scatter","mode":"markers","marker":{"color":"rgba(102,194,165,1)","size":8,"opacity":0.6,"line":{"color":"black","width":2}},"name":"2seater","textfont":{"color":"rgba(102,194,165,1)"},"error_y":{"color":"rgba(102,194,165,1)"},"error_x":{"color":"rgba(102,194,165,1)"},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[28.1503100804985,30.1532205417752,30.6359076872468,31.5320696160197,27.7618691371754,24.1822259975597,27.112421952188,27.5696761775762,25.2057400578633,27.8264589412138,28.8273333813995,24.8133366247639,25.7102825418115,25.2905336078256,23.4116987306625,28.6378998104483,25.0418684473261,24.0627467473969,27.5198922138661,23.735313963145,28.4545764457434,26.0601309258491,29.2583617391065,32.6527528921142,32.6074975579977,25.0966664860025,25.2859310256317,28.9425635375082,30.4799732407555,34.7492563566193,34.8661308092996,36.6273303730413,35.6369212968275,28.1529571227729,24.6825809404254,27.6886869855225,28.9281704220921,23.0118597140536,42.8650191584602,29.6975055523217,24.1906545097008,29.8034123498946,28.4075545538217,28.6357759917155,30.283805295825,24.675429392606,23.1301133204252],"y":[17.5217137141153,20.7943039066158,19.3954894733615,21.6638551256619,15.3057744456455,18.6068370840512,18.0936523131095,18.3246352840215,15.343396987766,20.2661107196473,18.6237394935451,15.4491086928174,16.7978796493262,17.9387128222734,15.9347967412323,21.9276866638102,19.5491830841638,20.1526036751457,19.7908977181651,18.899604968261,20.4130038022995,21.0949189360254,21.288480441086,21.192527089268,21.6438747514039,18.7822286249138,18.2525138948113,17.6058098305948,23.7764093275182,23.3209501849487,26.7251037950628,28.9062024275772,26.1272893669084,21.1677446719259,19.463415317703,20.33104182221,22.7329355264083,17.4171482743695,33.5207990724593,20.2941682171077,18.7161139268428,22.3466649628244,21.0476452033035,20.6996035855263,20.481061403174,15.1163835925981,16.4732394842431],"type":"scatter","mode":"markers","marker":{"color":"rgba(252,141,98,1)","size":8,"opacity":0.6,"line":{"color":"black","width":2}},"name":"compact","textfont":{"color":"rgba(252,141,98,1)"},"error_y":{"color":"rgba(252,141,98,1)"},"error_x":{"color":"rgba(252,141,98,1)"},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[25.5992998816073,23.9843509374186,21.1682381341234,27.7628211136907,31.1818696707487,24.0984547380358,28.9111838843673,27.0338381500915,25.642759106122,25.5883787637576,31.7411992130801,30.2049155998975,24.2428822861984,27.7909077601507,28.8823850937188,29.7353980960324,33.370917275548,25.9246471282095,24.9563998226076,24.3067646613345,23.9828947121277,25.9285408221185,24.4443858452141,25.5599777409807,27.2877412559465,26.8675710512325,24.7790720080957,29.3270003991202,28.3590710591525,30.2497926596552,31.8331612888724,25.0600712243468,26.3773727761582,27.9251592019573,29.241013054736,29.7930463794619,29.6627341536805,29.4734049094841,25.7136860350147,26.1683214688674,24.2339139543474],"y":[15.4534050780348,16.5144334929064,15.4435758693144,18.6726624118164,21.6946492628194,17.0400486011058,18.0056260912679,17.7420868272893,18.0520593202673,17.4501467016526,20.9728235281073,20.7404295969754,18.9667003615759,17.7766382303089,18.4584896806628,22.4177526971325,22.617573665455,19.9426849004813,19.1698001869954,18.5216472507454,18.7454187888652,19.5383878224529,17.1899248263799,15.4209741582163,17.9541979925707,17.5926043507643,16.4519660538062,20.9958978723735,20.5520993452519,20.3840466374531,21.9012425281107,17.6434510755353,17.9569127676077,18.0559851438738,20.8722599921748,17.9280332536437,18.3305961624719,21.1698731146753,15.5415560388938,17.4601938407868,17.3824156629853],"type":"scatter","mode":"markers","marker":{"color":"rgba(141,160,203,1)","size":8,"opacity":0.6,"line":{"color":"black","width":2}},"name":"midsize","textfont":{"color":"rgba(141,160,203,1)"},"error_y":{"color":"rgba(141,160,203,1)"},"error_x":{"color":"rgba(141,160,203,1)"},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[22.8656317433342,23.2727240305394,20.9265031414106,20.5712000895292,23.6581853432581,23.6548973051831,16.4753818036988,20.6097789909691,19.555224253796,21.9321363978088,22.8638498010114],"y":[17.0126015678979,16.1441142479889,15.3284224499948,16.5406681485474,17.4703686116263,17.9437512713484,10.9329447536729,14.1487690266222,15.297636248637,16.5171863390133,15.2742121620104],"type":"scatter","mode":"markers","marker":{"color":"rgba(231,138,195,1)","size":8,"opacity":0.6,"line":{"color":"black","width":2}},"name":"minivan","textfont":{"color":"rgba(231,138,195,1)"},"error_y":{"color":"rgba(231,138,195,1)"},"error_x":{"color":"rgba(231,138,195,1)"},"line":{"color":"rgba(231,138,195,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[18.0638905614614,19.4313108613715,15.1833246666938,16.7688002968207,20.1956993825734,17.4875970399007,12.2437919350341,15.8261255584657,13.5101266009733,17.2585601555184,11.7940653655678,18.2402574121952,18.2495580380782,17.1773692844436,11.7593267504126,16.017900634557,16.5168845262378,17.8407296054065,13.0024990933016,18.1527833361179,15.4114585770294,15.7395709659904,17.9398279199377,18.5722044575959,16.5458762431517,15.7002106010914,18.9549041073769,21.8494357457384,22.4054629039019,17.0601189089939,18.6102933688089,19.52098616492,19.4563674591482],"y":[14.7931691892445,13.4499706584029,12.1159171210602,13.7917853766121,13.1298565999605,13.4517728658393,8.10925821820274,11.340564079117,10.5954835652374,11.1980836587027,9.59766322234645,13.5691505330615,12.0188598101959,12.5581317655742,9.4587813038379,11.2602637056261,10.9618216599338,12.3132737027481,10.0164310396649,13.4754988099448,13.707972205244,13.713770840317,13.707526747603,12.5917909108102,10.2940966491587,13.4079841226339,14.4696393515915,16.225343930535,16.2163570588455,14.9740651398897,14.1988916466944,14.3223315253854,15.5659857415594],"type":"scatter","mode":"markers","marker":{"color":"rgba(166,216,84,1)","size":8,"opacity":0.6,"line":{"color":"black","width":2}},"name":"pickup","textfont":{"color":"rgba(166,216,84,1)"},"error_y":{"color":"rgba(166,216,84,1)"},"error_x":{"color":"rgba(166,216,84,1)"},"line":{"color":"rgba(166,216,84,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[24.5227827662602,25.6124077001587,25.3740658890456,24.6270325118676,20.2814929699525,20.7507644770667,24.1291772052646,20.3743799468502,19.8671161662787,33.0460218396038,32.399955837056,31.3312941612676,28.9544521346688,33.8178953099996,33.9316095886752,37.5614008884877,37.6577527476475,29.4349399292842,24.5691771823913,29.1971386242658,29.8163649542257,27.3419334124774,23.6180411269888,24.591573917307,23.2792824683711,26.1347517818213,26.9613374415785,24.8844117512926,25.6509844744578,45.8444191748276,41.9135777130723,29.7455003280193,24.2113757710904,27.5808805385605,28.9113815193996],"y":[17.2076133764349,17.0674555459991,17.9988090558909,15.0697496081702,14.6767825675197,15.8301275232807,15.2344705392607,14.5725706974044,14.4755948060192,28.6681086183526,23.6285415608436,24.9851330956444,23.3947475324385,24.282924707979,26.2878458299674,25.9557068096474,23.8294706689194,20.2388095599599,19.2465950925834,18.2730803941377,20.9349389886484,20.0301436157897,16.3261406584643,16.2438045903109,17.9719083304517,21.9824731117114,19.9721085946076,18.2741349427961,19.8106191633269,35.78015582636,29.6236548321322,21.495032644365,18.3098234515637,19.2494841772132,20.9494516169652],"type":"scatter","mode":"markers","marker":{"color":"rgba(255,217,47,1)","size":8,"opacity":0.6,"line":{"color":"black","width":2}},"name":"subcompact","textfont":{"color":"rgba(255,217,47,1)"},"error_y":{"color":"rgba(255,217,47,1)"},"error_x":{"color":"rgba(255,217,47,1)"},"line":{"color":"rgba(255,217,47,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[19.3116828771308,16.8180145965889,21.558157264255,17.7712136246264,17.5620272550732,18.1566389491782,12.5884545892477,16.8520969301462,18.6091961804777,18.0132314572111,18.5801814366132,11.4978511035442,17.6604607785121,14.3793626436964,17.5358785511926,14.0975345782936,16.9012662963942,15.8804755406454,17.5192661508918,17.451084013097,18.4071916369721,15.4445416973904,17.9744778908789,19.6722223497927,16.670587118715,21.2308800434694,17.8790705250576,19.4779554633424,18.9368768138811,10.6168092032894,17.3641759995371,16.5676276311278,14.7600284060463,15.4770259335637,19.5655764685944,18.6919963704422,15.9483109517023,17.0845429031178,16.6393537987024,19.2872218405828,18.1451262068003,20.9192876694724,18.7577261449769,16.2468088082969,18.3898126604035,16.9901090683416,19.5516361193731,16.9857959765941,23.8719626748934,24.009198253043,26.4156182873994,25.5999406352639,25.4988558264449,22.4217815231532,20.9862720165402,20.6731385989115,19.4720714930445,16.4889522409067,20.1193427434191,18.4987293714657,13.6093864673749,18.2914682328701],"y":[14.1860913033597,10.5350428642705,14.0621407977305,13.5705833425745,11.336121621076,14.3483736850321,11.9003339586779,11.0328897885047,14.1530380425975,12.2014431646094,12.1438081944361,9.7608811375685,13.5084948041476,11.6332117752172,13.9642807473429,10.2071992899291,10.9049167884514,10.9845866574906,11.7791742230766,13.9293318837881,15.4265580014326,13.1106038526632,12.7095661950298,13.6056245458312,13.6714176740497,17.3375430349261,14.8378317938186,14.6466899863444,14.6705106399022,8.28763408726081,13.3856318937615,13.7934773652814,10.6162391086109,10.7266010870226,12.5678929574788,11.38675735984,10.0355316237547,10.8132157325745,10.9663353385404,11.8436899003573,13.6856176033616,13.7329666293226,12.9102161019109,13.0675297472626,14.0753543660976,15.8279908993281,13.370592883788,11.5644368347712,18.5713756685145,17.2108354922384,19.4791892580688,18.5410897447728,19.2021169881336,17.2358276825398,14.1650054915808,15.6786251603626,15.3615751024336,14.6338984961621,16.6631371960975,13.4303441653028,10.659094826784,13.9932344374247],"type":"scatter","mode":"markers","marker":{"color":"rgba(229,196,148,1)","size":8,"opacity":0.6,"line":{"color":"black","width":2}},"name":"suv","textfont":{"color":"rgba(229,196,148,1)"},"error_y":{"color":"rgba(229,196,148,1)"},"error_x":{"color":"rgba(229,196,148,1)"},"line":{"color":"rgba(229,196,148,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Alternatively, and what I find surprisingly convenient, we can leave our initial plotly object as it is and pass it to the <code>style()</code> function. This functions works just like the <code>layout()</code> function we have seen before.</p>
<div class="cell">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb14-1">plt <span class="ot" style="color: #00769E;">&lt;-</span> jittered_mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">plot_ly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">add_markers</span>(</span>
<span id="cb14-4">    <span class="at" style="color: #677623;">x =</span> <span class="sc" style="color: #5E5E5E;">~</span>hwy, </span>
<span id="cb14-5">    <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>cty, </span>
<span id="cb14-6">    <span class="at" style="color: #677623;">color =</span> <span class="sc" style="color: #5E5E5E;">~</span>class</span>
<span id="cb14-7">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;">style</span>(</span>
<span id="cb14-9">    <span class="at" style="color: #677623;">marker =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb14-10">      <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb14-11">      <span class="at" style="color: #677623;">opacity =</span> <span class="fl" style="color: #AD0000;">0.6</span>,</span>
<span id="cb14-12">      <span class="at" style="color: #677623;">line =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #677623;">width =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb14-13">    )</span>
<span id="cb14-14">  ) </span>
<span id="cb14-15">plt </span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-1a9e7551fc64c5bd14e3" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-1a9e7551fc64c5bd14e3">{"x":{"visdat":{"7219492b01b9":["function () ","plotlyVisDat"]},"cur_data":"7219492b01b9","attrs":{"7219492b01b9":{"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"x":{},"y":{},"type":"scatter","mode":"markers","color":{},"inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"hwy"},"yaxis":{"domain":[0,1],"automargin":true,"title":"cty"},"hovermode":"closest","showlegend":true},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[27.9770791064948,23.6228231964633,26.8341218726709,25.1762640988454,24.3765680817887],"y":[15.8087983620353,14.9431525552645,16.7362136137672,15.8514159116894,15.7639551186003],"type":"scatter","mode":"markers","name":"2seater","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(102,194,165,1)"},"error_y":{"color":"rgba(102,194,165,1)"},"error_x":{"color":"rgba(102,194,165,1)"},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[28.1503100804985,30.1532205417752,30.6359076872468,31.5320696160197,27.7618691371754,24.1822259975597,27.112421952188,27.5696761775762,25.2057400578633,27.8264589412138,28.8273333813995,24.8133366247639,25.7102825418115,25.2905336078256,23.4116987306625,28.6378998104483,25.0418684473261,24.0627467473969,27.5198922138661,23.735313963145,28.4545764457434,26.0601309258491,29.2583617391065,32.6527528921142,32.6074975579977,25.0966664860025,25.2859310256317,28.9425635375082,30.4799732407555,34.7492563566193,34.8661308092996,36.6273303730413,35.6369212968275,28.1529571227729,24.6825809404254,27.6886869855225,28.9281704220921,23.0118597140536,42.8650191584602,29.6975055523217,24.1906545097008,29.8034123498946,28.4075545538217,28.6357759917155,30.283805295825,24.675429392606,23.1301133204252],"y":[17.5217137141153,20.7943039066158,19.3954894733615,21.6638551256619,15.3057744456455,18.6068370840512,18.0936523131095,18.3246352840215,15.343396987766,20.2661107196473,18.6237394935451,15.4491086928174,16.7978796493262,17.9387128222734,15.9347967412323,21.9276866638102,19.5491830841638,20.1526036751457,19.7908977181651,18.899604968261,20.4130038022995,21.0949189360254,21.288480441086,21.192527089268,21.6438747514039,18.7822286249138,18.2525138948113,17.6058098305948,23.7764093275182,23.3209501849487,26.7251037950628,28.9062024275772,26.1272893669084,21.1677446719259,19.463415317703,20.33104182221,22.7329355264083,17.4171482743695,33.5207990724593,20.2941682171077,18.7161139268428,22.3466649628244,21.0476452033035,20.6996035855263,20.481061403174,15.1163835925981,16.4732394842431],"type":"scatter","mode":"markers","name":"compact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(252,141,98,1)"},"error_y":{"color":"rgba(252,141,98,1)"},"error_x":{"color":"rgba(252,141,98,1)"},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[25.5992998816073,23.9843509374186,21.1682381341234,27.7628211136907,31.1818696707487,24.0984547380358,28.9111838843673,27.0338381500915,25.642759106122,25.5883787637576,31.7411992130801,30.2049155998975,24.2428822861984,27.7909077601507,28.8823850937188,29.7353980960324,33.370917275548,25.9246471282095,24.9563998226076,24.3067646613345,23.9828947121277,25.9285408221185,24.4443858452141,25.5599777409807,27.2877412559465,26.8675710512325,24.7790720080957,29.3270003991202,28.3590710591525,30.2497926596552,31.8331612888724,25.0600712243468,26.3773727761582,27.9251592019573,29.241013054736,29.7930463794619,29.6627341536805,29.4734049094841,25.7136860350147,26.1683214688674,24.2339139543474],"y":[15.4534050780348,16.5144334929064,15.4435758693144,18.6726624118164,21.6946492628194,17.0400486011058,18.0056260912679,17.7420868272893,18.0520593202673,17.4501467016526,20.9728235281073,20.7404295969754,18.9667003615759,17.7766382303089,18.4584896806628,22.4177526971325,22.617573665455,19.9426849004813,19.1698001869954,18.5216472507454,18.7454187888652,19.5383878224529,17.1899248263799,15.4209741582163,17.9541979925707,17.5926043507643,16.4519660538062,20.9958978723735,20.5520993452519,20.3840466374531,21.9012425281107,17.6434510755353,17.9569127676077,18.0559851438738,20.8722599921748,17.9280332536437,18.3305961624719,21.1698731146753,15.5415560388938,17.4601938407868,17.3824156629853],"type":"scatter","mode":"markers","name":"midsize","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(141,160,203,1)"},"error_y":{"color":"rgba(141,160,203,1)"},"error_x":{"color":"rgba(141,160,203,1)"},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[22.8656317433342,23.2727240305394,20.9265031414106,20.5712000895292,23.6581853432581,23.6548973051831,16.4753818036988,20.6097789909691,19.555224253796,21.9321363978088,22.8638498010114],"y":[17.0126015678979,16.1441142479889,15.3284224499948,16.5406681485474,17.4703686116263,17.9437512713484,10.9329447536729,14.1487690266222,15.297636248637,16.5171863390133,15.2742121620104],"type":"scatter","mode":"markers","name":"minivan","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(231,138,195,1)"},"error_y":{"color":"rgba(231,138,195,1)"},"error_x":{"color":"rgba(231,138,195,1)"},"line":{"color":"rgba(231,138,195,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[18.0638905614614,19.4313108613715,15.1833246666938,16.7688002968207,20.1956993825734,17.4875970399007,12.2437919350341,15.8261255584657,13.5101266009733,17.2585601555184,11.7940653655678,18.2402574121952,18.2495580380782,17.1773692844436,11.7593267504126,16.017900634557,16.5168845262378,17.8407296054065,13.0024990933016,18.1527833361179,15.4114585770294,15.7395709659904,17.9398279199377,18.5722044575959,16.5458762431517,15.7002106010914,18.9549041073769,21.8494357457384,22.4054629039019,17.0601189089939,18.6102933688089,19.52098616492,19.4563674591482],"y":[14.7931691892445,13.4499706584029,12.1159171210602,13.7917853766121,13.1298565999605,13.4517728658393,8.10925821820274,11.340564079117,10.5954835652374,11.1980836587027,9.59766322234645,13.5691505330615,12.0188598101959,12.5581317655742,9.4587813038379,11.2602637056261,10.9618216599338,12.3132737027481,10.0164310396649,13.4754988099448,13.707972205244,13.713770840317,13.707526747603,12.5917909108102,10.2940966491587,13.4079841226339,14.4696393515915,16.225343930535,16.2163570588455,14.9740651398897,14.1988916466944,14.3223315253854,15.5659857415594],"type":"scatter","mode":"markers","name":"pickup","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(166,216,84,1)"},"error_y":{"color":"rgba(166,216,84,1)"},"error_x":{"color":"rgba(166,216,84,1)"},"line":{"color":"rgba(166,216,84,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[24.5227827662602,25.6124077001587,25.3740658890456,24.6270325118676,20.2814929699525,20.7507644770667,24.1291772052646,20.3743799468502,19.8671161662787,33.0460218396038,32.399955837056,31.3312941612676,28.9544521346688,33.8178953099996,33.9316095886752,37.5614008884877,37.6577527476475,29.4349399292842,24.5691771823913,29.1971386242658,29.8163649542257,27.3419334124774,23.6180411269888,24.591573917307,23.2792824683711,26.1347517818213,26.9613374415785,24.8844117512926,25.6509844744578,45.8444191748276,41.9135777130723,29.7455003280193,24.2113757710904,27.5808805385605,28.9113815193996],"y":[17.2076133764349,17.0674555459991,17.9988090558909,15.0697496081702,14.6767825675197,15.8301275232807,15.2344705392607,14.5725706974044,14.4755948060192,28.6681086183526,23.6285415608436,24.9851330956444,23.3947475324385,24.282924707979,26.2878458299674,25.9557068096474,23.8294706689194,20.2388095599599,19.2465950925834,18.2730803941377,20.9349389886484,20.0301436157897,16.3261406584643,16.2438045903109,17.9719083304517,21.9824731117114,19.9721085946076,18.2741349427961,19.8106191633269,35.78015582636,29.6236548321322,21.495032644365,18.3098234515637,19.2494841772132,20.9494516169652],"type":"scatter","mode":"markers","name":"subcompact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(255,217,47,1)"},"error_y":{"color":"rgba(255,217,47,1)"},"error_x":{"color":"rgba(255,217,47,1)"},"line":{"color":"rgba(255,217,47,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[19.3116828771308,16.8180145965889,21.558157264255,17.7712136246264,17.5620272550732,18.1566389491782,12.5884545892477,16.8520969301462,18.6091961804777,18.0132314572111,18.5801814366132,11.4978511035442,17.6604607785121,14.3793626436964,17.5358785511926,14.0975345782936,16.9012662963942,15.8804755406454,17.5192661508918,17.451084013097,18.4071916369721,15.4445416973904,17.9744778908789,19.6722223497927,16.670587118715,21.2308800434694,17.8790705250576,19.4779554633424,18.9368768138811,10.6168092032894,17.3641759995371,16.5676276311278,14.7600284060463,15.4770259335637,19.5655764685944,18.6919963704422,15.9483109517023,17.0845429031178,16.6393537987024,19.2872218405828,18.1451262068003,20.9192876694724,18.7577261449769,16.2468088082969,18.3898126604035,16.9901090683416,19.5516361193731,16.9857959765941,23.8719626748934,24.009198253043,26.4156182873994,25.5999406352639,25.4988558264449,22.4217815231532,20.9862720165402,20.6731385989115,19.4720714930445,16.4889522409067,20.1193427434191,18.4987293714657,13.6093864673749,18.2914682328701],"y":[14.1860913033597,10.5350428642705,14.0621407977305,13.5705833425745,11.336121621076,14.3483736850321,11.9003339586779,11.0328897885047,14.1530380425975,12.2014431646094,12.1438081944361,9.7608811375685,13.5084948041476,11.6332117752172,13.9642807473429,10.2071992899291,10.9049167884514,10.9845866574906,11.7791742230766,13.9293318837881,15.4265580014326,13.1106038526632,12.7095661950298,13.6056245458312,13.6714176740497,17.3375430349261,14.8378317938186,14.6466899863444,14.6705106399022,8.28763408726081,13.3856318937615,13.7934773652814,10.6162391086109,10.7266010870226,12.5678929574788,11.38675735984,10.0355316237547,10.8132157325745,10.9663353385404,11.8436899003573,13.6856176033616,13.7329666293226,12.9102161019109,13.0675297472626,14.0753543660976,15.8279908993281,13.370592883788,11.5644368347712,18.5713756685145,17.2108354922384,19.4791892580688,18.5410897447728,19.2021169881336,17.2358276825398,14.1650054915808,15.6786251603626,15.3615751024336,14.6338984961621,16.6631371960975,13.4303441653028,10.659094826784,13.9932344374247],"type":"scatter","mode":"markers","name":"suv","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(229,196,148,1)"},"error_y":{"color":"rgba(229,196,148,1)"},"error_x":{"color":"rgba(229,196,148,1)"},"line":{"color":"rgba(229,196,148,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Similarly, we could pass this along to <code>layout()</code> if we want to customize the legend box again.</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1">plt_layout <span class="ot" style="color: #00769E;">&lt;-</span> plt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">layout</span>(</span>
<span id="cb15-3">    <span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb15-4">      <span class="at" style="color: #677623;">orientation =</span> <span class="st" style="color: #20794D;">"h"</span>,</span>
<span id="cb15-5">      <span class="at" style="color: #677623;">borderwidth =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb15-6">      <span class="at" style="color: #677623;">bgcolor =</span> <span class="st" style="color: #20794D;">"grey"</span>,</span>
<span id="cb15-7">      <span class="at" style="color: #677623;">bordercolor =</span> <span class="st" style="color: #20794D;">"red"</span>,</span>
<span id="cb15-8">      <span class="at" style="color: #677623;">font =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb15-9">        <span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb15-10">        <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">"Gravitas One"</span>,</span>
<span id="cb15-11">        <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb15-12">      ),</span>
<span id="cb15-13">      <span class="at" style="color: #677623;">title =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb15-14">        <span class="at" style="color: #677623;">text =</span> <span class="st" style="color: #20794D;">"Class"</span>,</span>
<span id="cb15-15">        <span class="at" style="color: #677623;">side =</span> <span class="st" style="color: #20794D;">"top"</span>,</span>
<span id="cb15-16">        <span class="at" style="color: #677623;">font =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb15-17">          <span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb15-18">          <span class="at" style="color: #677623;">family =</span> <span class="st" style="color: #20794D;">"Gravitas One"</span>,</span>
<span id="cb15-19">          <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb15-20">        )</span>
<span id="cb15-21">      )</span>
<span id="cb15-22">    )</span>
<span id="cb15-23">  )</span>
<span id="cb15-24">plt_layout</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-bad54bc0ff6aecacc590" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-bad54bc0ff6aecacc590">{"x":{"visdat":{"7219492b01b9":["function () ","plotlyVisDat"]},"cur_data":"7219492b01b9","attrs":{"7219492b01b9":{"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"x":{},"y":{},"type":"scatter","mode":"markers","color":{},"inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"hwy"},"yaxis":{"domain":[0,1],"automargin":true,"title":"cty"},"hovermode":"closest","showlegend":true,"legend":{"orientation":"h","borderwidth":3,"bgcolor":"grey","bordercolor":"red","font":{"color":"white","family":"Gravitas One","size":15},"title":{"text":"Class","side":"top","font":{"color":"white","family":"Gravitas One","size":15}}}},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[27.9770791064948,23.6228231964633,26.8341218726709,25.1762640988454,24.3765680817887],"y":[15.8087983620353,14.9431525552645,16.7362136137672,15.8514159116894,15.7639551186003],"type":"scatter","mode":"markers","name":"2seater","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(102,194,165,1)"},"error_y":{"color":"rgba(102,194,165,1)"},"error_x":{"color":"rgba(102,194,165,1)"},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[28.1503100804985,30.1532205417752,30.6359076872468,31.5320696160197,27.7618691371754,24.1822259975597,27.112421952188,27.5696761775762,25.2057400578633,27.8264589412138,28.8273333813995,24.8133366247639,25.7102825418115,25.2905336078256,23.4116987306625,28.6378998104483,25.0418684473261,24.0627467473969,27.5198922138661,23.735313963145,28.4545764457434,26.0601309258491,29.2583617391065,32.6527528921142,32.6074975579977,25.0966664860025,25.2859310256317,28.9425635375082,30.4799732407555,34.7492563566193,34.8661308092996,36.6273303730413,35.6369212968275,28.1529571227729,24.6825809404254,27.6886869855225,28.9281704220921,23.0118597140536,42.8650191584602,29.6975055523217,24.1906545097008,29.8034123498946,28.4075545538217,28.6357759917155,30.283805295825,24.675429392606,23.1301133204252],"y":[17.5217137141153,20.7943039066158,19.3954894733615,21.6638551256619,15.3057744456455,18.6068370840512,18.0936523131095,18.3246352840215,15.343396987766,20.2661107196473,18.6237394935451,15.4491086928174,16.7978796493262,17.9387128222734,15.9347967412323,21.9276866638102,19.5491830841638,20.1526036751457,19.7908977181651,18.899604968261,20.4130038022995,21.0949189360254,21.288480441086,21.192527089268,21.6438747514039,18.7822286249138,18.2525138948113,17.6058098305948,23.7764093275182,23.3209501849487,26.7251037950628,28.9062024275772,26.1272893669084,21.1677446719259,19.463415317703,20.33104182221,22.7329355264083,17.4171482743695,33.5207990724593,20.2941682171077,18.7161139268428,22.3466649628244,21.0476452033035,20.6996035855263,20.481061403174,15.1163835925981,16.4732394842431],"type":"scatter","mode":"markers","name":"compact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(252,141,98,1)"},"error_y":{"color":"rgba(252,141,98,1)"},"error_x":{"color":"rgba(252,141,98,1)"},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[25.5992998816073,23.9843509374186,21.1682381341234,27.7628211136907,31.1818696707487,24.0984547380358,28.9111838843673,27.0338381500915,25.642759106122,25.5883787637576,31.7411992130801,30.2049155998975,24.2428822861984,27.7909077601507,28.8823850937188,29.7353980960324,33.370917275548,25.9246471282095,24.9563998226076,24.3067646613345,23.9828947121277,25.9285408221185,24.4443858452141,25.5599777409807,27.2877412559465,26.8675710512325,24.7790720080957,29.3270003991202,28.3590710591525,30.2497926596552,31.8331612888724,25.0600712243468,26.3773727761582,27.9251592019573,29.241013054736,29.7930463794619,29.6627341536805,29.4734049094841,25.7136860350147,26.1683214688674,24.2339139543474],"y":[15.4534050780348,16.5144334929064,15.4435758693144,18.6726624118164,21.6946492628194,17.0400486011058,18.0056260912679,17.7420868272893,18.0520593202673,17.4501467016526,20.9728235281073,20.7404295969754,18.9667003615759,17.7766382303089,18.4584896806628,22.4177526971325,22.617573665455,19.9426849004813,19.1698001869954,18.5216472507454,18.7454187888652,19.5383878224529,17.1899248263799,15.4209741582163,17.9541979925707,17.5926043507643,16.4519660538062,20.9958978723735,20.5520993452519,20.3840466374531,21.9012425281107,17.6434510755353,17.9569127676077,18.0559851438738,20.8722599921748,17.9280332536437,18.3305961624719,21.1698731146753,15.5415560388938,17.4601938407868,17.3824156629853],"type":"scatter","mode":"markers","name":"midsize","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(141,160,203,1)"},"error_y":{"color":"rgba(141,160,203,1)"},"error_x":{"color":"rgba(141,160,203,1)"},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[22.8656317433342,23.2727240305394,20.9265031414106,20.5712000895292,23.6581853432581,23.6548973051831,16.4753818036988,20.6097789909691,19.555224253796,21.9321363978088,22.8638498010114],"y":[17.0126015678979,16.1441142479889,15.3284224499948,16.5406681485474,17.4703686116263,17.9437512713484,10.9329447536729,14.1487690266222,15.297636248637,16.5171863390133,15.2742121620104],"type":"scatter","mode":"markers","name":"minivan","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(231,138,195,1)"},"error_y":{"color":"rgba(231,138,195,1)"},"error_x":{"color":"rgba(231,138,195,1)"},"line":{"color":"rgba(231,138,195,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[18.0638905614614,19.4313108613715,15.1833246666938,16.7688002968207,20.1956993825734,17.4875970399007,12.2437919350341,15.8261255584657,13.5101266009733,17.2585601555184,11.7940653655678,18.2402574121952,18.2495580380782,17.1773692844436,11.7593267504126,16.017900634557,16.5168845262378,17.8407296054065,13.0024990933016,18.1527833361179,15.4114585770294,15.7395709659904,17.9398279199377,18.5722044575959,16.5458762431517,15.7002106010914,18.9549041073769,21.8494357457384,22.4054629039019,17.0601189089939,18.6102933688089,19.52098616492,19.4563674591482],"y":[14.7931691892445,13.4499706584029,12.1159171210602,13.7917853766121,13.1298565999605,13.4517728658393,8.10925821820274,11.340564079117,10.5954835652374,11.1980836587027,9.59766322234645,13.5691505330615,12.0188598101959,12.5581317655742,9.4587813038379,11.2602637056261,10.9618216599338,12.3132737027481,10.0164310396649,13.4754988099448,13.707972205244,13.713770840317,13.707526747603,12.5917909108102,10.2940966491587,13.4079841226339,14.4696393515915,16.225343930535,16.2163570588455,14.9740651398897,14.1988916466944,14.3223315253854,15.5659857415594],"type":"scatter","mode":"markers","name":"pickup","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(166,216,84,1)"},"error_y":{"color":"rgba(166,216,84,1)"},"error_x":{"color":"rgba(166,216,84,1)"},"line":{"color":"rgba(166,216,84,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[24.5227827662602,25.6124077001587,25.3740658890456,24.6270325118676,20.2814929699525,20.7507644770667,24.1291772052646,20.3743799468502,19.8671161662787,33.0460218396038,32.399955837056,31.3312941612676,28.9544521346688,33.8178953099996,33.9316095886752,37.5614008884877,37.6577527476475,29.4349399292842,24.5691771823913,29.1971386242658,29.8163649542257,27.3419334124774,23.6180411269888,24.591573917307,23.2792824683711,26.1347517818213,26.9613374415785,24.8844117512926,25.6509844744578,45.8444191748276,41.9135777130723,29.7455003280193,24.2113757710904,27.5808805385605,28.9113815193996],"y":[17.2076133764349,17.0674555459991,17.9988090558909,15.0697496081702,14.6767825675197,15.8301275232807,15.2344705392607,14.5725706974044,14.4755948060192,28.6681086183526,23.6285415608436,24.9851330956444,23.3947475324385,24.282924707979,26.2878458299674,25.9557068096474,23.8294706689194,20.2388095599599,19.2465950925834,18.2730803941377,20.9349389886484,20.0301436157897,16.3261406584643,16.2438045903109,17.9719083304517,21.9824731117114,19.9721085946076,18.2741349427961,19.8106191633269,35.78015582636,29.6236548321322,21.495032644365,18.3098234515637,19.2494841772132,20.9494516169652],"type":"scatter","mode":"markers","name":"subcompact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(255,217,47,1)"},"error_y":{"color":"rgba(255,217,47,1)"},"error_x":{"color":"rgba(255,217,47,1)"},"line":{"color":"rgba(255,217,47,1)"},"xaxis":"x","yaxis":"y","frame":null},{"x":[19.3116828771308,16.8180145965889,21.558157264255,17.7712136246264,17.5620272550732,18.1566389491782,12.5884545892477,16.8520969301462,18.6091961804777,18.0132314572111,18.5801814366132,11.4978511035442,17.6604607785121,14.3793626436964,17.5358785511926,14.0975345782936,16.9012662963942,15.8804755406454,17.5192661508918,17.451084013097,18.4071916369721,15.4445416973904,17.9744778908789,19.6722223497927,16.670587118715,21.2308800434694,17.8790705250576,19.4779554633424,18.9368768138811,10.6168092032894,17.3641759995371,16.5676276311278,14.7600284060463,15.4770259335637,19.5655764685944,18.6919963704422,15.9483109517023,17.0845429031178,16.6393537987024,19.2872218405828,18.1451262068003,20.9192876694724,18.7577261449769,16.2468088082969,18.3898126604035,16.9901090683416,19.5516361193731,16.9857959765941,23.8719626748934,24.009198253043,26.4156182873994,25.5999406352639,25.4988558264449,22.4217815231532,20.9862720165402,20.6731385989115,19.4720714930445,16.4889522409067,20.1193427434191,18.4987293714657,13.6093864673749,18.2914682328701],"y":[14.1860913033597,10.5350428642705,14.0621407977305,13.5705833425745,11.336121621076,14.3483736850321,11.9003339586779,11.0328897885047,14.1530380425975,12.2014431646094,12.1438081944361,9.7608811375685,13.5084948041476,11.6332117752172,13.9642807473429,10.2071992899291,10.9049167884514,10.9845866574906,11.7791742230766,13.9293318837881,15.4265580014326,13.1106038526632,12.7095661950298,13.6056245458312,13.6714176740497,17.3375430349261,14.8378317938186,14.6466899863444,14.6705106399022,8.28763408726081,13.3856318937615,13.7934773652814,10.6162391086109,10.7266010870226,12.5678929574788,11.38675735984,10.0355316237547,10.8132157325745,10.9663353385404,11.8436899003573,13.6856176033616,13.7329666293226,12.9102161019109,13.0675297472626,14.0753543660976,15.8279908993281,13.370592883788,11.5644368347712,18.5713756685145,17.2108354922384,19.4791892580688,18.5410897447728,19.2021169881336,17.2358276825398,14.1650054915808,15.6786251603626,15.3615751024336,14.6338984961621,16.6631371960975,13.4303441653028,10.659094826784,13.9932344374247],"type":"scatter","mode":"markers","name":"suv","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(229,196,148,1)"},"error_y":{"color":"rgba(229,196,148,1)"},"error_x":{"color":"rgba(229,196,148,1)"},"line":{"color":"rgba(229,196,148,1)"},"xaxis":"x","yaxis":"y","frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Interesting! For some obscure reason the exact same legend command behaves differently now. Honestly, I have no clue what is going on here. If I had to hazard a guess, I would say that during the conversion of a ggplot object to a plotly object via <code>ggplotly()</code> some default values were implemented that cause the change but this is just a hunch. Possibly, this is connected to <code>xanchor</code> or <code>yanchor</code>.</p>
<p>In any case, we got a glimpse of how the <code>plotly</code> R package works which uses the JavaScript library <code>plotly.js</code> to create interactive plots. Also, we have learned how to convert a ggplot2 object to a plotly object and how we can customize this further.</p>
<p>Interestingly, when converting from ggplot2 to plotly, the pop-up window that appears when you hover over a point is already customized compared to the default from <code>plot_ly()</code>. Did you notice the difference already?</p>
<p>So, in order to end our “exploratory introduction” let us adjust the <code>hovertemplate</code> according to the description in the reference manual. Here, we will use <code>\n</code> for line breaks.</p>
<div class="cell">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb16-1">plt <span class="ot" style="color: #00769E;">&lt;-</span> plt <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">style</span>(<span class="at" style="color: #677623;">hovertemplate =</span> <span class="st" style="color: #20794D;">"hwy: %{x:.2f}</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">cty: %{y:.2f}"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">orientation =</span> <span class="st" style="color: #20794D;">"h"</span>, <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.2</span>)) </span>
<span id="cb16-4">plt</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-d1b1c257a633fdd0689a" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-d1b1c257a633fdd0689a">{"x":{"visdat":{"7219492b01b9":["function () ","plotlyVisDat"]},"cur_data":"7219492b01b9","attrs":{"7219492b01b9":{"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"x":{},"y":{},"type":"scatter","mode":"markers","color":{},"inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"hwy"},"yaxis":{"domain":[0,1],"automargin":true,"title":"cty"},"hovermode":"closest","showlegend":true,"legend":{"orientation":"h","y":-0.2}},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[27.9770791064948,23.6228231964633,26.8341218726709,25.1762640988454,24.3765680817887],"y":[15.8087983620353,14.9431525552645,16.7362136137672,15.8514159116894,15.7639551186003],"type":"scatter","mode":"markers","name":"2seater","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(102,194,165,1)"},"error_y":{"color":"rgba(102,194,165,1)"},"error_x":{"color":"rgba(102,194,165,1)"},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}"},{"x":[28.1503100804985,30.1532205417752,30.6359076872468,31.5320696160197,27.7618691371754,24.1822259975597,27.112421952188,27.5696761775762,25.2057400578633,27.8264589412138,28.8273333813995,24.8133366247639,25.7102825418115,25.2905336078256,23.4116987306625,28.6378998104483,25.0418684473261,24.0627467473969,27.5198922138661,23.735313963145,28.4545764457434,26.0601309258491,29.2583617391065,32.6527528921142,32.6074975579977,25.0966664860025,25.2859310256317,28.9425635375082,30.4799732407555,34.7492563566193,34.8661308092996,36.6273303730413,35.6369212968275,28.1529571227729,24.6825809404254,27.6886869855225,28.9281704220921,23.0118597140536,42.8650191584602,29.6975055523217,24.1906545097008,29.8034123498946,28.4075545538217,28.6357759917155,30.283805295825,24.675429392606,23.1301133204252],"y":[17.5217137141153,20.7943039066158,19.3954894733615,21.6638551256619,15.3057744456455,18.6068370840512,18.0936523131095,18.3246352840215,15.343396987766,20.2661107196473,18.6237394935451,15.4491086928174,16.7978796493262,17.9387128222734,15.9347967412323,21.9276866638102,19.5491830841638,20.1526036751457,19.7908977181651,18.899604968261,20.4130038022995,21.0949189360254,21.288480441086,21.192527089268,21.6438747514039,18.7822286249138,18.2525138948113,17.6058098305948,23.7764093275182,23.3209501849487,26.7251037950628,28.9062024275772,26.1272893669084,21.1677446719259,19.463415317703,20.33104182221,22.7329355264083,17.4171482743695,33.5207990724593,20.2941682171077,18.7161139268428,22.3466649628244,21.0476452033035,20.6996035855263,20.481061403174,15.1163835925981,16.4732394842431],"type":"scatter","mode":"markers","name":"compact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(252,141,98,1)"},"error_y":{"color":"rgba(252,141,98,1)"},"error_x":{"color":"rgba(252,141,98,1)"},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}"},{"x":[25.5992998816073,23.9843509374186,21.1682381341234,27.7628211136907,31.1818696707487,24.0984547380358,28.9111838843673,27.0338381500915,25.642759106122,25.5883787637576,31.7411992130801,30.2049155998975,24.2428822861984,27.7909077601507,28.8823850937188,29.7353980960324,33.370917275548,25.9246471282095,24.9563998226076,24.3067646613345,23.9828947121277,25.9285408221185,24.4443858452141,25.5599777409807,27.2877412559465,26.8675710512325,24.7790720080957,29.3270003991202,28.3590710591525,30.2497926596552,31.8331612888724,25.0600712243468,26.3773727761582,27.9251592019573,29.241013054736,29.7930463794619,29.6627341536805,29.4734049094841,25.7136860350147,26.1683214688674,24.2339139543474],"y":[15.4534050780348,16.5144334929064,15.4435758693144,18.6726624118164,21.6946492628194,17.0400486011058,18.0056260912679,17.7420868272893,18.0520593202673,17.4501467016526,20.9728235281073,20.7404295969754,18.9667003615759,17.7766382303089,18.4584896806628,22.4177526971325,22.617573665455,19.9426849004813,19.1698001869954,18.5216472507454,18.7454187888652,19.5383878224529,17.1899248263799,15.4209741582163,17.9541979925707,17.5926043507643,16.4519660538062,20.9958978723735,20.5520993452519,20.3840466374531,21.9012425281107,17.6434510755353,17.9569127676077,18.0559851438738,20.8722599921748,17.9280332536437,18.3305961624719,21.1698731146753,15.5415560388938,17.4601938407868,17.3824156629853],"type":"scatter","mode":"markers","name":"midsize","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(141,160,203,1)"},"error_y":{"color":"rgba(141,160,203,1)"},"error_x":{"color":"rgba(141,160,203,1)"},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}"},{"x":[22.8656317433342,23.2727240305394,20.9265031414106,20.5712000895292,23.6581853432581,23.6548973051831,16.4753818036988,20.6097789909691,19.555224253796,21.9321363978088,22.8638498010114],"y":[17.0126015678979,16.1441142479889,15.3284224499948,16.5406681485474,17.4703686116263,17.9437512713484,10.9329447536729,14.1487690266222,15.297636248637,16.5171863390133,15.2742121620104],"type":"scatter","mode":"markers","name":"minivan","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(231,138,195,1)"},"error_y":{"color":"rgba(231,138,195,1)"},"error_x":{"color":"rgba(231,138,195,1)"},"line":{"color":"rgba(231,138,195,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}"},{"x":[18.0638905614614,19.4313108613715,15.1833246666938,16.7688002968207,20.1956993825734,17.4875970399007,12.2437919350341,15.8261255584657,13.5101266009733,17.2585601555184,11.7940653655678,18.2402574121952,18.2495580380782,17.1773692844436,11.7593267504126,16.017900634557,16.5168845262378,17.8407296054065,13.0024990933016,18.1527833361179,15.4114585770294,15.7395709659904,17.9398279199377,18.5722044575959,16.5458762431517,15.7002106010914,18.9549041073769,21.8494357457384,22.4054629039019,17.0601189089939,18.6102933688089,19.52098616492,19.4563674591482],"y":[14.7931691892445,13.4499706584029,12.1159171210602,13.7917853766121,13.1298565999605,13.4517728658393,8.10925821820274,11.340564079117,10.5954835652374,11.1980836587027,9.59766322234645,13.5691505330615,12.0188598101959,12.5581317655742,9.4587813038379,11.2602637056261,10.9618216599338,12.3132737027481,10.0164310396649,13.4754988099448,13.707972205244,13.713770840317,13.707526747603,12.5917909108102,10.2940966491587,13.4079841226339,14.4696393515915,16.225343930535,16.2163570588455,14.9740651398897,14.1988916466944,14.3223315253854,15.5659857415594],"type":"scatter","mode":"markers","name":"pickup","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(166,216,84,1)"},"error_y":{"color":"rgba(166,216,84,1)"},"error_x":{"color":"rgba(166,216,84,1)"},"line":{"color":"rgba(166,216,84,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}"},{"x":[24.5227827662602,25.6124077001587,25.3740658890456,24.6270325118676,20.2814929699525,20.7507644770667,24.1291772052646,20.3743799468502,19.8671161662787,33.0460218396038,32.399955837056,31.3312941612676,28.9544521346688,33.8178953099996,33.9316095886752,37.5614008884877,37.6577527476475,29.4349399292842,24.5691771823913,29.1971386242658,29.8163649542257,27.3419334124774,23.6180411269888,24.591573917307,23.2792824683711,26.1347517818213,26.9613374415785,24.8844117512926,25.6509844744578,45.8444191748276,41.9135777130723,29.7455003280193,24.2113757710904,27.5808805385605,28.9113815193996],"y":[17.2076133764349,17.0674555459991,17.9988090558909,15.0697496081702,14.6767825675197,15.8301275232807,15.2344705392607,14.5725706974044,14.4755948060192,28.6681086183526,23.6285415608436,24.9851330956444,23.3947475324385,24.282924707979,26.2878458299674,25.9557068096474,23.8294706689194,20.2388095599599,19.2465950925834,18.2730803941377,20.9349389886484,20.0301436157897,16.3261406584643,16.2438045903109,17.9719083304517,21.9824731117114,19.9721085946076,18.2741349427961,19.8106191633269,35.78015582636,29.6236548321322,21.495032644365,18.3098234515637,19.2494841772132,20.9494516169652],"type":"scatter","mode":"markers","name":"subcompact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(255,217,47,1)"},"error_y":{"color":"rgba(255,217,47,1)"},"error_x":{"color":"rgba(255,217,47,1)"},"line":{"color":"rgba(255,217,47,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}"},{"x":[19.3116828771308,16.8180145965889,21.558157264255,17.7712136246264,17.5620272550732,18.1566389491782,12.5884545892477,16.8520969301462,18.6091961804777,18.0132314572111,18.5801814366132,11.4978511035442,17.6604607785121,14.3793626436964,17.5358785511926,14.0975345782936,16.9012662963942,15.8804755406454,17.5192661508918,17.451084013097,18.4071916369721,15.4445416973904,17.9744778908789,19.6722223497927,16.670587118715,21.2308800434694,17.8790705250576,19.4779554633424,18.9368768138811,10.6168092032894,17.3641759995371,16.5676276311278,14.7600284060463,15.4770259335637,19.5655764685944,18.6919963704422,15.9483109517023,17.0845429031178,16.6393537987024,19.2872218405828,18.1451262068003,20.9192876694724,18.7577261449769,16.2468088082969,18.3898126604035,16.9901090683416,19.5516361193731,16.9857959765941,23.8719626748934,24.009198253043,26.4156182873994,25.5999406352639,25.4988558264449,22.4217815231532,20.9862720165402,20.6731385989115,19.4720714930445,16.4889522409067,20.1193427434191,18.4987293714657,13.6093864673749,18.2914682328701],"y":[14.1860913033597,10.5350428642705,14.0621407977305,13.5705833425745,11.336121621076,14.3483736850321,11.9003339586779,11.0328897885047,14.1530380425975,12.2014431646094,12.1438081944361,9.7608811375685,13.5084948041476,11.6332117752172,13.9642807473429,10.2071992899291,10.9049167884514,10.9845866574906,11.7791742230766,13.9293318837881,15.4265580014326,13.1106038526632,12.7095661950298,13.6056245458312,13.6714176740497,17.3375430349261,14.8378317938186,14.6466899863444,14.6705106399022,8.28763408726081,13.3856318937615,13.7934773652814,10.6162391086109,10.7266010870226,12.5678929574788,11.38675735984,10.0355316237547,10.8132157325745,10.9663353385404,11.8436899003573,13.6856176033616,13.7329666293226,12.9102161019109,13.0675297472626,14.0753543660976,15.8279908993281,13.370592883788,11.5644368347712,18.5713756685145,17.2108354922384,19.4791892580688,18.5410897447728,19.2021169881336,17.2358276825398,14.1650054915808,15.6786251603626,15.3615751024336,14.6338984961621,16.6631371960975,13.4303441653028,10.659094826784,13.9932344374247],"type":"scatter","mode":"markers","name":"suv","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(229,196,148,1)"},"error_y":{"color":"rgba(229,196,148,1)"},"error_x":{"color":"rgba(229,196,148,1)"},"line":{"color":"rgba(229,196,148,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}"}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Notice how the class labels appear outside of the box. The reference manual refers to this position as “secondary” box. To get rid of this, we simply add <code>&lt;extra&gt;&lt;/extra&gt;</code> to our hover template. Unfortunately, it appears as if what is not displayed in the primary box cannot be used as part of the hover template.</p>
<p>Thus, we cannot use <code>%{color}</code>. Instead, we simply map <code>class</code> to the <code>text</code> attribute of the markers as well. Then, we can use <code>%{text}</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">plt <span class="ot" style="color: #00769E;">&lt;-</span> jittered_mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">plot_ly</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">add_markers</span>(<span class="at" style="color: #677623;">x =</span> <span class="sc" style="color: #5E5E5E;">~</span>hwy, <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">~</span>cty, <span class="at" style="color: #677623;">color =</span> <span class="sc" style="color: #5E5E5E;">~</span>class, <span class="at" style="color: #677623;">text =</span> <span class="sc" style="color: #5E5E5E;">~</span>class) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">style</span>(</span>
<span id="cb17-5">    <span class="at" style="color: #677623;">marker =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb17-6">      <span class="at" style="color: #677623;">size =</span> <span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb17-7">      <span class="at" style="color: #677623;">opacity =</span> <span class="fl" style="color: #AD0000;">0.6</span>,</span>
<span id="cb17-8">      <span class="at" style="color: #677623;">line =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #677623;">width =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb17-9">    )</span>
<span id="cb17-10">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-11">  <span class="fu" style="color: #4758AB;">style</span>(<span class="at" style="color: #677623;">hovertemplate =</span> <span class="st" style="color: #20794D;">"hwy: %{x:.2f}</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">cty: %{y:.2f}</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">class: %{text} &lt;extra&gt;&lt;/extra&gt;"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-12">  <span class="fu" style="color: #4758AB;">layout</span>(<span class="at" style="color: #677623;">legend =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">orientation =</span> <span class="st" style="color: #20794D;">"h"</span>, <span class="at" style="color: #677623;">y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.2</span>))</span>
<span id="cb17-13">plt</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-023414eb06456b3320f6" style="width:100%;height:464px;" class="plotly html-widget"></div>
<script type="application/json" data-for="htmlwidget-023414eb06456b3320f6">{"x":{"visdat":{"7219443af33e":["function () ","plotlyVisDat"]},"cur_data":"7219443af33e","attrs":{"7219443af33e":{"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"x":{},"y":{},"type":"scatter","mode":"markers","color":{},"text":{},"inherit":true}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"xaxis":{"domain":[0,1],"automargin":true,"title":"hwy"},"yaxis":{"domain":[0,1],"automargin":true,"title":"cty"},"hovermode":"closest","showlegend":true,"legend":{"orientation":"h","y":-0.2}},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[27.9770791064948,23.6228231964633,26.8341218726709,25.1762640988454,24.3765680817887],"y":[15.8087983620353,14.9431525552645,16.7362136137672,15.8514159116894,15.7639551186003],"type":"scatter","mode":"markers","text":["2seater","2seater","2seater","2seater","2seater"],"name":"2seater","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(102,194,165,1)"},"error_y":{"color":"rgba(102,194,165,1)"},"error_x":{"color":"rgba(102,194,165,1)"},"line":{"color":"rgba(102,194,165,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}<br />class: %{text} <extra><\/extra>"},{"x":[28.1503100804985,30.1532205417752,30.6359076872468,31.5320696160197,27.7618691371754,24.1822259975597,27.112421952188,27.5696761775762,25.2057400578633,27.8264589412138,28.8273333813995,24.8133366247639,25.7102825418115,25.2905336078256,23.4116987306625,28.6378998104483,25.0418684473261,24.0627467473969,27.5198922138661,23.735313963145,28.4545764457434,26.0601309258491,29.2583617391065,32.6527528921142,32.6074975579977,25.0966664860025,25.2859310256317,28.9425635375082,30.4799732407555,34.7492563566193,34.8661308092996,36.6273303730413,35.6369212968275,28.1529571227729,24.6825809404254,27.6886869855225,28.9281704220921,23.0118597140536,42.8650191584602,29.6975055523217,24.1906545097008,29.8034123498946,28.4075545538217,28.6357759917155,30.283805295825,24.675429392606,23.1301133204252],"y":[17.5217137141153,20.7943039066158,19.3954894733615,21.6638551256619,15.3057744456455,18.6068370840512,18.0936523131095,18.3246352840215,15.343396987766,20.2661107196473,18.6237394935451,15.4491086928174,16.7978796493262,17.9387128222734,15.9347967412323,21.9276866638102,19.5491830841638,20.1526036751457,19.7908977181651,18.899604968261,20.4130038022995,21.0949189360254,21.288480441086,21.192527089268,21.6438747514039,18.7822286249138,18.2525138948113,17.6058098305948,23.7764093275182,23.3209501849487,26.7251037950628,28.9062024275772,26.1272893669084,21.1677446719259,19.463415317703,20.33104182221,22.7329355264083,17.4171482743695,33.5207990724593,20.2941682171077,18.7161139268428,22.3466649628244,21.0476452033035,20.6996035855263,20.481061403174,15.1163835925981,16.4732394842431],"type":"scatter","mode":"markers","text":["compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact","compact"],"name":"compact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(252,141,98,1)"},"error_y":{"color":"rgba(252,141,98,1)"},"error_x":{"color":"rgba(252,141,98,1)"},"line":{"color":"rgba(252,141,98,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}<br />class: %{text} <extra><\/extra>"},{"x":[25.5992998816073,23.9843509374186,21.1682381341234,27.7628211136907,31.1818696707487,24.0984547380358,28.9111838843673,27.0338381500915,25.642759106122,25.5883787637576,31.7411992130801,30.2049155998975,24.2428822861984,27.7909077601507,28.8823850937188,29.7353980960324,33.370917275548,25.9246471282095,24.9563998226076,24.3067646613345,23.9828947121277,25.9285408221185,24.4443858452141,25.5599777409807,27.2877412559465,26.8675710512325,24.7790720080957,29.3270003991202,28.3590710591525,30.2497926596552,31.8331612888724,25.0600712243468,26.3773727761582,27.9251592019573,29.241013054736,29.7930463794619,29.6627341536805,29.4734049094841,25.7136860350147,26.1683214688674,24.2339139543474],"y":[15.4534050780348,16.5144334929064,15.4435758693144,18.6726624118164,21.6946492628194,17.0400486011058,18.0056260912679,17.7420868272893,18.0520593202673,17.4501467016526,20.9728235281073,20.7404295969754,18.9667003615759,17.7766382303089,18.4584896806628,22.4177526971325,22.617573665455,19.9426849004813,19.1698001869954,18.5216472507454,18.7454187888652,19.5383878224529,17.1899248263799,15.4209741582163,17.9541979925707,17.5926043507643,16.4519660538062,20.9958978723735,20.5520993452519,20.3840466374531,21.9012425281107,17.6434510755353,17.9569127676077,18.0559851438738,20.8722599921748,17.9280332536437,18.3305961624719,21.1698731146753,15.5415560388938,17.4601938407868,17.3824156629853],"type":"scatter","mode":"markers","text":["midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize","midsize"],"name":"midsize","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(141,160,203,1)"},"error_y":{"color":"rgba(141,160,203,1)"},"error_x":{"color":"rgba(141,160,203,1)"},"line":{"color":"rgba(141,160,203,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}<br />class: %{text} <extra><\/extra>"},{"x":[22.8656317433342,23.2727240305394,20.9265031414106,20.5712000895292,23.6581853432581,23.6548973051831,16.4753818036988,20.6097789909691,19.555224253796,21.9321363978088,22.8638498010114],"y":[17.0126015678979,16.1441142479889,15.3284224499948,16.5406681485474,17.4703686116263,17.9437512713484,10.9329447536729,14.1487690266222,15.297636248637,16.5171863390133,15.2742121620104],"type":"scatter","mode":"markers","text":["minivan","minivan","minivan","minivan","minivan","minivan","minivan","minivan","minivan","minivan","minivan"],"name":"minivan","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(231,138,195,1)"},"error_y":{"color":"rgba(231,138,195,1)"},"error_x":{"color":"rgba(231,138,195,1)"},"line":{"color":"rgba(231,138,195,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}<br />class: %{text} <extra><\/extra>"},{"x":[18.0638905614614,19.4313108613715,15.1833246666938,16.7688002968207,20.1956993825734,17.4875970399007,12.2437919350341,15.8261255584657,13.5101266009733,17.2585601555184,11.7940653655678,18.2402574121952,18.2495580380782,17.1773692844436,11.7593267504126,16.017900634557,16.5168845262378,17.8407296054065,13.0024990933016,18.1527833361179,15.4114585770294,15.7395709659904,17.9398279199377,18.5722044575959,16.5458762431517,15.7002106010914,18.9549041073769,21.8494357457384,22.4054629039019,17.0601189089939,18.6102933688089,19.52098616492,19.4563674591482],"y":[14.7931691892445,13.4499706584029,12.1159171210602,13.7917853766121,13.1298565999605,13.4517728658393,8.10925821820274,11.340564079117,10.5954835652374,11.1980836587027,9.59766322234645,13.5691505330615,12.0188598101959,12.5581317655742,9.4587813038379,11.2602637056261,10.9618216599338,12.3132737027481,10.0164310396649,13.4754988099448,13.707972205244,13.713770840317,13.707526747603,12.5917909108102,10.2940966491587,13.4079841226339,14.4696393515915,16.225343930535,16.2163570588455,14.9740651398897,14.1988916466944,14.3223315253854,15.5659857415594],"type":"scatter","mode":"markers","text":["pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup","pickup"],"name":"pickup","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(166,216,84,1)"},"error_y":{"color":"rgba(166,216,84,1)"},"error_x":{"color":"rgba(166,216,84,1)"},"line":{"color":"rgba(166,216,84,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}<br />class: %{text} <extra><\/extra>"},{"x":[24.5227827662602,25.6124077001587,25.3740658890456,24.6270325118676,20.2814929699525,20.7507644770667,24.1291772052646,20.3743799468502,19.8671161662787,33.0460218396038,32.399955837056,31.3312941612676,28.9544521346688,33.8178953099996,33.9316095886752,37.5614008884877,37.6577527476475,29.4349399292842,24.5691771823913,29.1971386242658,29.8163649542257,27.3419334124774,23.6180411269888,24.591573917307,23.2792824683711,26.1347517818213,26.9613374415785,24.8844117512926,25.6509844744578,45.8444191748276,41.9135777130723,29.7455003280193,24.2113757710904,27.5808805385605,28.9113815193996],"y":[17.2076133764349,17.0674555459991,17.9988090558909,15.0697496081702,14.6767825675197,15.8301275232807,15.2344705392607,14.5725706974044,14.4755948060192,28.6681086183526,23.6285415608436,24.9851330956444,23.3947475324385,24.282924707979,26.2878458299674,25.9557068096474,23.8294706689194,20.2388095599599,19.2465950925834,18.2730803941377,20.9349389886484,20.0301436157897,16.3261406584643,16.2438045903109,17.9719083304517,21.9824731117114,19.9721085946076,18.2741349427961,19.8106191633269,35.78015582636,29.6236548321322,21.495032644365,18.3098234515637,19.2494841772132,20.9494516169652],"type":"scatter","mode":"markers","text":["subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact","subcompact"],"name":"subcompact","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(255,217,47,1)"},"error_y":{"color":"rgba(255,217,47,1)"},"error_x":{"color":"rgba(255,217,47,1)"},"line":{"color":"rgba(255,217,47,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}<br />class: %{text} <extra><\/extra>"},{"x":[19.3116828771308,16.8180145965889,21.558157264255,17.7712136246264,17.5620272550732,18.1566389491782,12.5884545892477,16.8520969301462,18.6091961804777,18.0132314572111,18.5801814366132,11.4978511035442,17.6604607785121,14.3793626436964,17.5358785511926,14.0975345782936,16.9012662963942,15.8804755406454,17.5192661508918,17.451084013097,18.4071916369721,15.4445416973904,17.9744778908789,19.6722223497927,16.670587118715,21.2308800434694,17.8790705250576,19.4779554633424,18.9368768138811,10.6168092032894,17.3641759995371,16.5676276311278,14.7600284060463,15.4770259335637,19.5655764685944,18.6919963704422,15.9483109517023,17.0845429031178,16.6393537987024,19.2872218405828,18.1451262068003,20.9192876694724,18.7577261449769,16.2468088082969,18.3898126604035,16.9901090683416,19.5516361193731,16.9857959765941,23.8719626748934,24.009198253043,26.4156182873994,25.5999406352639,25.4988558264449,22.4217815231532,20.9862720165402,20.6731385989115,19.4720714930445,16.4889522409067,20.1193427434191,18.4987293714657,13.6093864673749,18.2914682328701],"y":[14.1860913033597,10.5350428642705,14.0621407977305,13.5705833425745,11.336121621076,14.3483736850321,11.9003339586779,11.0328897885047,14.1530380425975,12.2014431646094,12.1438081944361,9.7608811375685,13.5084948041476,11.6332117752172,13.9642807473429,10.2071992899291,10.9049167884514,10.9845866574906,11.7791742230766,13.9293318837881,15.4265580014326,13.1106038526632,12.7095661950298,13.6056245458312,13.6714176740497,17.3375430349261,14.8378317938186,14.6466899863444,14.6705106399022,8.28763408726081,13.3856318937615,13.7934773652814,10.6162391086109,10.7266010870226,12.5678929574788,11.38675735984,10.0355316237547,10.8132157325745,10.9663353385404,11.8436899003573,13.6856176033616,13.7329666293226,12.9102161019109,13.0675297472626,14.0753543660976,15.8279908993281,13.370592883788,11.5644368347712,18.5713756685145,17.2108354922384,19.4791892580688,18.5410897447728,19.2021169881336,17.2358276825398,14.1650054915808,15.6786251603626,15.3615751024336,14.6338984961621,16.6631371960975,13.4303441653028,10.659094826784,13.9932344374247],"type":"scatter","mode":"markers","text":["suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv","suv"],"name":"suv","marker":{"size":8,"opacity":0.6,"line":{"color":"black","width":2}},"textfont":{"color":"rgba(229,196,148,1)"},"error_y":{"color":"rgba(229,196,148,1)"},"error_x":{"color":"rgba(229,196,148,1)"},"line":{"color":"rgba(229,196,148,1)"},"xaxis":"x","yaxis":"y","frame":null,"hovertemplate":"hwy: %{x:.2f}<br />cty: %{y:.2f}<br />class: %{text} <extra><\/extra>"}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>All right! That’s enough exciting plotting action for today. Hope you enjoyed this blog post and see you next time.</p>


</section>
 ]]></description>
  <category>Visualization</category>
  <category>Exploratory Intro</category>
  <guid>https://albert-rapp.de/posts/05_exploratory_intro_plotly/05_exploratory_intro_quarto.html</guid>
  <pubDate>Sat, 16 Oct 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Did German Voters Become More Impulsive?</title>
  <link>https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage.html</link>
  <description><![CDATA[ 


<p>A bit more than two weeks ago, Germany held a federal election and, naturally, this is always reason for a lot of discussions and subjective truths. One subjective truth I encountered myself related to how fast the party CDU/CSU was able to collect and lose votes according to polls right before the election.</p>
<p>According to the <a href="https://en.wikipedia.org/wiki/Allensbach_Institute">Allensbach Institute</a>, a private polling institute based in Allensbach, Baden-Württemberg, on July 20th, approximately three months before the official election, the CDU/CSU could get 31.5% of the votes<sup>1</sup>. Almost four weeks later on the 19th of August, the Allensbach institute forecast only 27.5% for the CDU/CSU.</p>
<p>At that time, I had the subjective feeling that it was quite common to assume that the CDU/CSU is on a steep downward spiral. In the end, the CDU/CSU was able to slow its downward course and got 24.1% of the votes in the election. While this is still an abysmal outcome for this party, I was surprised that it was not worse.</p>
<p>A “similar” surprising tale can be told for other parties too. For instance, the party SPD was gaining a lot of steam in the last three months of the election campaign and the party DIE GRÜNE, once surprisingly popular during the election, lost a lot of votes towards the end as well.</p>
<p>All of these ups and downs left a feeling of rapid change for some. For example, last weekend I had an interesting discussion about whether voters no longer cast their votes according to “belief” but are much more influenced by the spur of the moment and flip-flop back and forth between parties depending on who is making the headlines at that time. Consequently, I decided that this might be something worth looking at with data.</p>
<p>Thus, this blog post tries to look at historic data from election polls to see if this year’s change before the election is indeed something unprecedented. If this is so, then that might support that voters become more impulsive. So, this is why I scraped election polls<sup>2</sup> since 1998 from the Allensbach institute and the Kantar (Emnid) institute whose election polls can be found publicly <a href="https://www.wahlrecht.de/umfragen/index.htm">here</a><sup>3</sup>.</p>
<section id="data-warning" class="level2">
<h2 class="anchored" data-anchor-id="data-warning">Data Warning</h2>
<p>I believe it is worth pointing out that the polling results will have to be taken with a grain of salt. Especially the fact that people might judge their current preference differently in non-election years compared to election years has to be taken into account. Obviously, I suspect that the polling institutes considered this as part of their forecast but nevertheless it cannot hurt to mention potential caveats.</p>
</section>
<section id="popularity-over-time" class="level2">
<h2 class="anchored" data-anchor-id="popularity-over-time">Popularity Over Time</h2>
<p>This being said, let’s take a look at the six (currently) largest parties and their popularity over time. Here, I will only look at the data from the Allensbach institute as these are already quite a lot of data points and the picture might get messy otherwise. As this is an election-focused blog post, I took the liberty of labeling only the election years on the x-axis<sup>4</sup>.</p>
<div class="cell">

</div>
<div class="cell">

</div>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Some recent trends are detectable but in this particular figure, I don’t see anything that points to an increased volatility in recent times.</p>
</section>
<section id="what-happens-close-to-an-election" class="level2">
<h2 class="anchored" data-anchor-id="what-happens-close-to-an-election">What Happens Close to an Election?</h2>
<p>Instead of looking at the overall fluctuations, we could look at the last three months before an election. Since an election takes places in September, in the next plot I have depicted only the polling results in the months July, August and September in an election year. To make trends more visible, I have added a regression line for each party and each election.</p>
<div class="cell">

</div>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage_files/figure-html/unnamed-chunk-5-1.png" style="height:120.0%" width="672"></p>
</div>
</div>
<p>Interestingly, the most recent election seems to have had more volatile last three months compared to previous elections. Indeed, this could indicate more impulsive voteing behavior but I am not entirely convinced yet.</p>
</section>
<section id="three-month-volatility" class="level2">
<h2 class="anchored" data-anchor-id="three-month-volatility">Three-Month Volatility</h2>
<p>To see if the change in the last three months of the most recent election is truly something out of the ordinary, we need context. In order to get this context, let us consult our historical data again and compute the average share of votes for each party in every quarter of every year. Then, hopefully, these computed mean percentages represent the mood of the majority of people in a given quarter and we can see how much these means change from quarter to quarter.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Taking the fluctuations over time into account, the quarterly change right before this year’s election looks less extreme. In fact, most of the parties have had more extreme or similar changes on a quarterly basis in the past.</p>
<p>Clearly, the fact that we aggregate the share of votes over a period of three months could potentially obscure fluctuations. But as the next plot shows, if we do the same thing but aggregate on a monthly basis, then the overall impression of the new monthly plot is the same as with the original quarterly plot.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="coefficient-of-variation" class="level2">
<h2 class="anchored" data-anchor-id="coefficient-of-variation">Coefficient of Variation</h2>
<p>Before we try to make sense of what all that we have seen could mean in terms of voters’ impulsiveness, let us take one more stab at trying to measure the volatility. This time, let us compute the coefficient of variation (CV)<sup>5</sup> of the mean weekly share of votes for each quarter and each party and display this over time.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Except for the AfD and SPD, no profound trend in the CV can be detected as most regression lines appear to have a slope that is close to zero. Further, the AfD’s decrease in its monthly CV might be explained by the fact that it is a comparatively new party which means that might not have had a solid voter base in the beginning.</p>
<p>Since we are interested in more recent voter behavior, let us try to take only the data since the beginning of 2013 into account. This should give us an impression about the three most recent elections.</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Overall, as the confidence bands of the regression lines indicate that the real slope of the lines might as well be close to zero, I find it hard to argue either way about a more impulsive voting behavior.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>So, we have observed something odd here. In previous elections, a party’s changes in popularity in the last three months were not as profound as the last quarter’s changes that we witnessed this year. Overall, however, the degree of how much changed right before the election is nothing that could not be witnessed in the past at other non-election times.</p>
<p>If I had to guess, I would say that this might indicate that over the last 20 years, people’s willingness to vote for a different party remained somewhat similar. But it appears like the moment, when voters eventually decide for a party, has been moved closer to the election itself. Thus, one might argue that it has become harder to pinpoint which party one feels most connected to and this leads to an indecision right until the end. This indecision could indeed lead to a flipping back and forth between two or three parties one feels similarly connected to. But this, I would argue, is a sign of people lacking a strong connection to one single party and not one of impulsiveness.</p>
<p>What do you think? Is there more that we can extract from this kind of data? As I am quite new to this type of analysis, I am always glad about suggestions about how to improve. If you want to share your ideas, feel free to send me an <a href="mailto:blog@albert-rapp.de">e-mail</a> or leave a message in the comment section. As always, if you liked this blog post, I would appreciate a hit on the applause button below.</p>


</section>

<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The data from the Allensbach institute can be found online <a href="https://www.wahlrecht.de/umfragen/allensbach.htm">here</a>.↩︎</p></li>
<li id="fn2"><p>The resulting data can be found <a href="https://albert-rapp.de/posts/04_sonntagsfrage/allensbach_emnid_votes.csv">here</a> and the script I used to extract the data is <a href="https://albert-rapp.de/posts/04_sonntagsfrage/web_scrape_script.R">here</a>↩︎</p></li>
<li id="fn3"><p>There are a couple of more polling institutes available online but I decided to not scrape all of their results to save time.↩︎</p></li>
<li id="fn4"><p>For better legibility, I have tried to use the colors the parties are usually associated with. In some instances, using only one (primary) color resulted in a hard to read plot. Thus, whenever possible, I have consulted online party guidelines to find colors they use in their own publications.↩︎</p></li>
<li id="fn5"><p>This quantity is defined as the <a href="https://en.wikipedia.org/wiki/Standard_deviation#Sample_standard_deviation">sample standard deviation</a> divided by the <a href="https://en.wikipedia.org/wiki/Sample_mean_and_covariance">sample mean</a>. See also <a href="https://en.wikipedia.org/wiki/Coefficient_of_variation">Wikipedia</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://albert-rapp.de/posts/04_sonntagsfrage/04_sonntagsfrage.html</guid>
  <pubDate>Sun, 03 Oct 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing Versatile Functions with R</title>
  <link>https://albert-rapp.de/posts/03_writing_versatile_fcts/03_writing_versatile_fcts.html</link>
  <description><![CDATA[ 


<p>This week, I had to deal with two very similar tasks on two very similar but not identical data sets that required me to write a function that is versatile enough to deal with both data sets despite their subtle differences. The differences that had to be accounted for mainly related to using functions in the two cases that relied on differently many arguments. Also, some of the column names were different which meant that I could not hard-code the column names into the function I was creating.</p>
<p>Consequently, I had to use a few non-standard concepts (at least not standard to me) that enabled me to create the function which did everything I asked it to do. Since these concepts seemed interesting to me, I decided to implement a small example resulting in this blog post. Actually, I was even motivated to create a video for this blog post. You can find it <a href="https://youtu.be/L_sX-sL9aWM">on YouTube</a>.</p>
<div class="cell">

</div>
<div class="cell">

</div>
<section id="what-we-want-to-achieve" class="level2">
<h2 class="anchored" data-anchor-id="what-we-want-to-achieve">What We Want To Achieve</h2>
<p>The aim of this example is to write a function that can create two tibbles that are conceptually similar but do not necessarily use the same column names or compute the existing columns in the same way. For this blog post, I have already set up two dummy data sets like that so that we can see what we want to do.<br>
Let’s take a look at these data sets I creatively called <code>dat_A</code> and <code>dat_B</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2">dat_A <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 3 × 3
     mu sigma dat             
  &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt;          
1    -1   1   &lt;tibble [5 × 2]&gt;
2    -1   1.5 &lt;tibble [5 × 2]&gt;
3    -1   2   &lt;tibble [5 × 2]&gt;</code></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1">dat_B <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 3 × 2
  lambda dat             
   &lt;dbl&gt; &lt;list&gt;          
1    0.5 &lt;tibble [5 × 2]&gt;
2    0.7 &lt;tibble [5 × 2]&gt;
3    0.9 &lt;tibble [5 × 2]&gt;</code></pre>
</div>
</div>
<p>As you can see, each tibble contains a column <code>dat</code>. This column consists of tibbles with multiple summarized stochastic processes which were simulated using parameters that are given by the remaining columns of <code>dat_A</code> and <code>dat_B</code>.</p>
<p>You probably have already noticed that the stochastic processes must have been simulated using differently many parameters since tibble A contains additional columns <code>mu</code> and <code>sigma</code> whereas tibble B can offer only one additional column <code>lambda</code>. However, even if differently many and differently named parameters are used, the logic of the generating function needs to be the same:</p>
<ol type="1">
<li>Take parameters.</li>
<li>Simulate stochastic processes with these parameters.</li>
<li>Summarize processes</li>
</ol>
<p>Thus, in step 1 the generating function which we want to code, needs to be versatile enough to handle different argument names and amounts. Next, let’s see what the <code>dat</code> column has in store for us.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">dat_A <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"dat"</span>, <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 3 × 2
      n proc_mean
  &lt;int&gt;     &lt;dbl&gt;
1     1    -1.01 
2     2    -0.958
3     3    -0.968</code></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">dat_B <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"dat"</span>, <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 3 × 2
      n proc_variance
  &lt;int&gt;         &lt;dbl&gt;
1     1          5.27
2     2          2.66
3     3          3.08</code></pre>
</div>
</div>
<p>First of all, notice that I accessed the first tibble in the <code>dat</code> column using the super neat <code>pluck()</code> function. In my opinion, this function is preferable to the clunky base R usage of <code>$</code> and <code>[[</code>, e.g.&nbsp;like <code>dat_A$dat[[1]]</code>.</p>
<p>As you can see, the tibbles that are saved in <code>dat</code> contain columns <code>n</code> and <code>proc_mean</code> resp. <code>proc_variance</code>. As hinted at before, each row is supposed to represent a summary of the <code>n</code>-th realization of a stochastic process.</p>
<p>However, notice that the summary statistics in use are not the same! The different column names <code>proc_mean</code> and <code>proc_variance</code> indicate that in tibble A the sample mean was used whereas tibble B contains sample variances. Again, our function that generates <code>tib_A</code> and <code>tib_B</code> should be flexible enough to create differently named and differently computed columns.</p>
</section>
<section id="helpful-concepts" class="level2">
<h2 class="anchored" data-anchor-id="helpful-concepts">Helpful Concepts</h2>
<p>Now that we know what we want to create, let us begin by learning how to handle differently many arguments and their varying names.</p>
<section id="dot-dot-dot" class="level3">
<h3 class="anchored" data-anchor-id="dot-dot-dot">dot-dot-dot</h3>
<p>For these kinds of purposes, R offers the <code>...</code>-operator (pronounced dot-dot-dot). Basically, it serves as a placeholder for everything you do not want to evaluate immediately.</p>
<p>For instance, have you ever wondered how <code>dplyr</code>’s <code>select()</code> function is able to select the correct column?<sup>1</sup> If you’re thinking “No, but what’s so special about this?”, then you may want to notice that it is actually not that simple to define your own <code>select()</code> function even with the help of the <code>dplyr</code> function.</p>
<p>This is because defining an appropriate function to select two columns from, say, the <code>iris</code> data set cannot be done like this:</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1">my_select <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(x, y) {<span class="fu" style="color: #4758AB;">select</span>(iris, x, y)}</span></code></pre></div>
</div>
<p>Now, if you want to use the function the same way you would use <code>dplyr::select()</code>, i.e.&nbsp;simply passing, say, <code>Sepal.Width, Sepal.Length</code> (notice no <code>""</code>) to your new function, it would look like this</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">my_select</span>(Sepal.Width, Sepal.Length)</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;">#&gt; Error: object 'Sepal.Width' not found</span></span></code></pre></div>
</div>
<p>This error appears because at some point, R will try to evaluate the arguments as variables from your current environment. But of course this variable is not present in your environment and only present within the <code>iris</code> data set. Therefore, what <code>dplyr::select()</code> accomplishes is that it lets R know to evaluate the input argument only later on, i.e.&nbsp;when the variable from the data set is “available”.</p>
<p>This is where <code>...</code> comes into play. It is not by chance that <code>select()</code> only has arguments <code>.data</code> and <code>...</code>. Here, <code>select()</code> uses that everything which is thrown into <code>...</code>, will be passed along to be evaluated later. This can save our <code>my_select()</code> function, too.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1">my_select <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(...) {<span class="fu" style="color: #4758AB;">select</span>(iris, ...)}</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">my_select</span>(Sepal.Width, Sepal.Length) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>  Sepal.Width Sepal.Length
1         3.5          5.1
2         3.0          4.9
3         3.2          4.7</code></pre>
</div>
</div>
<p>Works like a charm! This will help us to define a function that is flexible enough for our purposes. Before we start with that, let us learn about another ingredient we will use.</p>
</section>
<section id="curly-curly" class="level3">
<h3 class="anchored" data-anchor-id="curly-curly">curly-curly</h3>
<p>If we were to only select a single column from <code>iris</code> using our <code>my_select()</code> function, we could have also written the function using <code>{{ }}</code> (pronounced curly-curly). It operators similar to <code>...</code> in the sense that it allows for later evaluation but applies this concept to specific variable. Check out how that can be used here.</p>
<div class="cell">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb13-1">my_select <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(x) {<span class="fu" style="color: #4758AB;">select</span>(iris, {{x}})}</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">my_select</span>(Sepal.Width) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>  Sepal.Width
1         3.5
2         3.0
3         3.2</code></pre>
</div>
</div>
<p>What’s more the curly-curly variables - curly-curlied variables (?) - can also be used later on for stuff like naming a new column. For example, let us modify our previous function to demonstrate how that can be used.</p>
<div class="cell">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb15-1">select_and_add <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(x, y) {</span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">select</span>(iris, {{x}}) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">    <span class="fu" style="color: #4758AB;">mutate</span>({{y}} <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="dv" style="color: #AD0000;">5</span>) </span>
<span id="cb15-4">  <span class="co" style="color: #5E5E5E;"># 5 can be replaced by some meaningful calculation</span></span>
<span id="cb15-5">}</span>
<span id="cb15-6"><span class="fu" style="color: #4758AB;">select_and_add</span>(<span class="st" style="color: #20794D;">"Sepal.Width"</span>, <span class="st" style="color: #20794D;">"variable_y"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>  Sepal.Width variable_y
1         3.5          5
2         3.0          5
3         3.2          5</code></pre>
</div>
</div>
<p>Mind the colon! Here, if you want to use <code>y</code> as column name later on you cannot use the standard <code>mutate()</code> syntax but have to use <code>:=</code> instead.</p>
</section>
<section id="functional-programming" class="level3">
<h3 class="anchored" data-anchor-id="functional-programming">Functional Programming</h3>
<p>One last thing that we will use, is the fact that R supports functional programming. Thus, we can use functions as arguments of other functions. For instance, take a look at this super simple, yet somewhat useless wrapper function for illustration purposes.</p>
<div class="cell">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb17-1">my_simulate <span class="ot" style="color: #00769E;">&lt;-</span> <span class="cf" style="color: #00769E;">function</span>(n, func) {</span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">func</span>(n)</span>
<span id="cb17-3">}</span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">564</span>)</span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;">my_simulate</span>(<span class="dv" style="color: #AD0000;">5</span>, rnorm)</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>[1]  0.4605501 -0.7750968 -0.7159321  0.6882645 -2.0544591</code></pre>
</div>
</div>
<p>As you just witnessed, I simply passed <code>rnorm</code> (without a call using <code>()</code>) to <code>my_simulate</code> as the <code>func</code> argument such that <code>rnorm</code> is used whenever <code>func</code> is called. In our use case, this functionality can be used to simulate different stochastic processes (that may depend on different parameters).</p>
</section>
</section>
<section id="the-implementation" class="level2">
<h2 class="anchored" data-anchor-id="the-implementation">The Implementation</h2>
<p>Alright, we have assembled everything we need in order to create our <code>simulate_and_summarize_proc()</code> function. In this example, the simulation of the stochastic processes will consist of simply calling <code>rnorm()</code> or <code>rexp()</code> but, of course, these functions can be substituted with arbitrarily complex simulation functions.</p>
<p>We will use <code>n_simus</code> as the amount of realizations that are supposed to be simulated and each realization will be of length <code>TMax</code>. Further, we will use <code>...</code> to handle an arbitrary amount of parameters that are supposed to be passed to <code>simulation_func</code>. So, let’s implement the simulation part first (detailed explanations below).</p>
<div class="cell">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb19-1">simulate_and_summarize_proc <span class="ot" style="color: #00769E;">&lt;-</span> </span>
<span id="cb19-2">  <span class="cf" style="color: #00769E;">function</span>(..., TMax, n_simus, simulation_func) {</span>
<span id="cb19-3">    argslist <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">n =</span> TMax, ...) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">      <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">rep</span>(., n_simus))</span>
<span id="cb19-5">    </span>
<span id="cb19-6">    <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb19-7">      <span class="at" style="color: #677623;">t =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>TMax),</span>
<span id="cb19-8">      <span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_simus,</span>
<span id="cb19-9">      <span class="at" style="color: #677623;">value =</span> <span class="fu" style="color: #4758AB;">pmap</span>(argslist, simulation_func)</span>
<span id="cb19-10">    ) </span>
<span id="cb19-11">  }</span>
<span id="cb19-12"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">457</span>)</span>
<span id="cb19-13"><span class="fu" style="color: #4758AB;">simulate_and_summarize_proc</span>(</span>
<span id="cb19-14">  <span class="at" style="color: #677623;">mean =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb19-15">  <span class="at" style="color: #677623;">sd =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb19-16">  <span class="at" style="color: #677623;">TMax =</span> <span class="dv" style="color: #AD0000;">200</span>, </span>
<span id="cb19-17">  <span class="at" style="color: #677623;">n_simus =</span> <span class="dv" style="color: #AD0000;">3</span>, </span>
<span id="cb19-18">  <span class="at" style="color: #677623;">simulation_func =</span> rnorm <span class="co" style="color: #5E5E5E;"># arguments -&gt; n, mean, sd</span></span>
<span id="cb19-19">) </span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 3 × 3
  t               n value      
  &lt;list&gt;      &lt;int&gt; &lt;list&gt;     
1 &lt;int [200]&gt;     1 &lt;dbl [200]&gt;
2 &lt;int [200]&gt;     2 &lt;dbl [200]&gt;
3 &lt;int [200]&gt;     3 &lt;dbl [200]&gt;</code></pre>
</div>
</div>
<p>As you can see, this created three (simple) stochastic processes of length 200 using the parameters <code>mean = 1</code> and <code>sd = 2</code>. We can validate that the correct parameters were used once we implement the summary functions.</p>
<p>First, let us address the tricky part in this function. In order to pass a list of arguments to <code>pmap()</code> that are then used with <code>simulation_func</code>, we first need to rearrange the lists a bit. After the first step, by simply putting everything from <code>...</code> into the list we have a list like this:</p>
<div class="cell">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #677623;">mean =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">sd =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str</span>()</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>List of 3
 $ n   : num 100
 $ mean: num 1
 $ sd  : num 2</code></pre>
</div>
</div>
<p>However, we will need to have each variable in the list repeated <code>n_simus</code> time in order to simulate more than one realization. Thus, we use <code>map()</code> to replicate:</p>
<div class="cell">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">200</span>, <span class="at" style="color: #677623;">mean =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">sd =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">rep</span>(., <span class="dv" style="color: #AD0000;">3</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">str</span>()</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>List of 3
 $ n   : num [1:3] 200 200 200
 $ mean: num [1:3] 1 1 1
 $ sd  : num [1:3] 2 2 2</code></pre>
</div>
</div>
<p>Note that calling <code>rep()</code> without <code>map()</code> does not cause an error but does not deliver the appropriate format:</p>
<div class="cell">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #677623;">mean =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">sd =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;">str</span>()</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code>List of 9
 $ n   : num 100
 $ mean: num 1
 $ sd  : num 2
 $ n   : num 100
 $ mean: num 1
 $ sd  : num 2
 $ n   : num 100
 $ mean: num 1
 $ sd  : num 2</code></pre>
</div>
</div>
<p>Next, let us take the current output and implement the summary. To do so, we will add another variables <code>summary_name</code> and <code>summary_func</code> to the function in order to choose a column name resp. a summary statistic.</p>
<div class="cell">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb27-1">simulate_and_summarize_proc <span class="ot" style="color: #00769E;">&lt;-</span> </span>
<span id="cb27-2">  <span class="cf" style="color: #00769E;">function</span>(..., TMax, n_simus, simulation_func, summary_name, summary_func) {</span>
<span id="cb27-3">    argslist <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #677623;">n =</span> TMax, ...) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-4">      <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">rep</span>(., n_simus))</span>
<span id="cb27-5">    </span>
<span id="cb27-6">    <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb27-7">      <span class="at" style="color: #677623;">t =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>TMax),</span>
<span id="cb27-8">      <span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_simus,</span>
<span id="cb27-9">      <span class="at" style="color: #677623;">value =</span> <span class="fu" style="color: #4758AB;">pmap</span>(argslist, simulation_func)</span>
<span id="cb27-10">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># this part is added</span></span>
<span id="cb27-11">      <span class="fu" style="color: #4758AB;">unnest</span>(<span class="fu" style="color: #4758AB;">c</span>(t, value)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-12">      <span class="fu" style="color: #4758AB;">group_by</span>(n) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb27-13">      <span class="fu" style="color: #4758AB;">summarise</span>({{summary_name}} <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">summary_func</span>(value))</span>
<span id="cb27-14">  }</span>
<span id="cb27-15"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">457</span>)</span>
<span id="cb27-16"><span class="fu" style="color: #4758AB;">simulate_and_summarize_proc</span>(</span>
<span id="cb27-17">  <span class="at" style="color: #677623;">mean =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb27-18">  <span class="at" style="color: #677623;">sd =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb27-19">  <span class="at" style="color: #677623;">TMax =</span> <span class="dv" style="color: #AD0000;">200</span>, </span>
<span id="cb27-20">  <span class="at" style="color: #677623;">n_simus =</span> <span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb27-21">  <span class="at" style="color: #677623;">simulation_func =</span> rnorm, </span>
<span id="cb27-22">  <span class="at" style="color: #677623;">summary_name =</span> <span class="st" style="color: #20794D;">"mega_awesome_mean"</span>, </span>
<span id="cb27-23">  <span class="at" style="color: #677623;">summary_func =</span> mean</span>
<span id="cb27-24">) </span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 5 × 2
      n mega_awesome_mean
  &lt;int&gt;             &lt;dbl&gt;
1     1             0.955
2     2             0.932
3     3             0.987
4     4             1.07 
5     5             1.15 </code></pre>
</div>
</div>
<p>Finally, we can use our super versatile function in combination with <code>map()</code> to create <code>dat_A</code> and <code>dat_B</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb29-1">dat_A <span class="ot" style="color: #00769E;">&lt;-</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">expand_grid</span>(</span>
<span id="cb29-3">    <span class="at" style="color: #677623;">mu =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb29-4">    <span class="at" style="color: #677623;">sigma =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb29-5">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">dat =</span> <span class="fu" style="color: #4758AB;">map2</span>(</span>
<span id="cb29-7">    mu, sigma, </span>
<span id="cb29-8">    <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">simulate_and_summarize_proc</span>(</span>
<span id="cb29-9">      <span class="at" style="color: #677623;">mean =</span> .x, </span>
<span id="cb29-10">      <span class="at" style="color: #677623;">sd =</span> .y, </span>
<span id="cb29-11">      <span class="at" style="color: #677623;">TMax =</span> <span class="dv" style="color: #AD0000;">200</span>, </span>
<span id="cb29-12">      <span class="at" style="color: #677623;">n_simus =</span> <span class="dv" style="color: #AD0000;">3</span>, </span>
<span id="cb29-13">      <span class="at" style="color: #677623;">simulation_func =</span> rnorm, </span>
<span id="cb29-14">      <span class="at" style="color: #677623;">summary_name =</span> <span class="st" style="color: #20794D;">"proc_mean"</span>, </span>
<span id="cb29-15">      <span class="at" style="color: #677623;">summary_func =</span> mean</span>
<span id="cb29-16">    )</span>
<span id="cb29-17">  ))</span>
<span id="cb29-18">  </span>
<span id="cb29-19"></span>
<span id="cb29-20">dat_B <span class="ot" style="color: #00769E;">&lt;-</span> </span>
<span id="cb29-21">  <span class="fu" style="color: #4758AB;">expand_grid</span>(</span>
<span id="cb29-22">    <span class="at" style="color: #677623;">lambda =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">1.5</span>, <span class="fl" style="color: #AD0000;">0.2</span>)</span>
<span id="cb29-23">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-24">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">dat =</span> <span class="fu" style="color: #4758AB;">map</span>(</span>
<span id="cb29-25">    lambda, </span>
<span id="cb29-26">    <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">simulate_and_summarize_proc</span>(</span>
<span id="cb29-27">      <span class="at" style="color: #677623;">rate =</span> .,</span>
<span id="cb29-28">      <span class="at" style="color: #677623;">TMax =</span> <span class="dv" style="color: #AD0000;">200</span>, </span>
<span id="cb29-29">      <span class="at" style="color: #677623;">n_simus =</span> <span class="dv" style="color: #AD0000;">3</span>, </span>
<span id="cb29-30">      <span class="at" style="color: #677623;">simulation_func =</span> rexp, </span>
<span id="cb29-31">      <span class="at" style="color: #677623;">summary_name =</span> <span class="st" style="color: #20794D;">"proc_variance"</span>, </span>
<span id="cb29-32">      <span class="at" style="color: #677623;">summary_func =</span> var</span>
<span id="cb29-33">    )</span>
<span id="cb29-34">  ))</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>So, we have seen that we can combine <code>{{ }}</code>, <code>...</code> and functional programming to create highly versatile functions. Of course, as always one might be tempted to say that one could have just programmed two different functions for our particular example.</p>
<p>However, this would cause a lot of code duplication because a lot of steps are essentially the same which is hard to debug and maintain. Also, creating numerous functions does not scale well if we need to cover way more than two cases.</p>
<p>With that being said, I hope that you found this blog post helpful and if so, feel free to hit the comments or push the applause button below. See you next time.</p>


</section>

<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If you have read my <a href="https://yards.albert-rapp.de/index.html">YARDS lecture notes</a> and this sounds familiar to you, you are absolutely right. I have reused and adapted a part of the “Choose Your Own Data Science Adventure”-chapter here.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Functional Programming</category>
  <guid>https://albert-rapp.de/posts/03_writing_versatile_fcts/03_writing_versatile_fcts.html</guid>
  <pubDate>Thu, 16 Sep 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot tips: Using position_stack() for Individual Positioning</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/03_position_adjustment/03_position_adjustment.html</link>
  <description><![CDATA[ 

<p>For a long time I have wondered why some people would use <code>position_stack()</code> for position alignment instead of the simpler version <code>position = "stack"</code>. Recently, though, I learned the purpose of the former approach when I tried to add data labels to a stacked bar chart for better legibility.</p>
<p>Further, I decided that this knowledge is a good addition to this <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a>, so let’s see what <code>position_stack()</code> can do. To achieve this, let us create a small dummy data set.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2">dummy_dat <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #677623;">group =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">"A"</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">"B"</span>, <span class="dv" style="color: #AD0000;">3</span>)),</span>
<span id="cb1-4">  <span class="at" style="color: #677623;">category =</span> <span class="fu" style="color: #4758AB;">factor</span>(</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"low"</span>, <span class="st" style="color: #20794D;">"medium"</span>, <span class="st" style="color: #20794D;">"high"</span>), <span class="dv" style="color: #AD0000;">2</span>)), </span>
<span id="cb1-6">    <span class="at" style="color: #677623;">levels =</span> <span class="fu" style="color: #4758AB;">rev</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"low"</span>, <span class="st" style="color: #20794D;">"medium"</span>, <span class="st" style="color: #20794D;">"high"</span>)),</span>
<span id="cb1-7">  ),</span>
<span id="cb1-8">  <span class="at" style="color: #677623;">percent =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.41</span>, <span class="fl" style="color: #AD0000;">0.16</span>, <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.41</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.16</span>, <span class="fl" style="color: #AD0000;">0.26</span>, <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.26</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.36</span>, <span class="fl" style="color: #AD0000;">0.36</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10">dummy_dat</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 6 × 3
  group category percent
  &lt;chr&gt; &lt;fct&gt;      &lt;dbl&gt;
1 A     low         0.41
2 A     medium      0.16
3 A     high        0.43
4 B     low         0.26
5 B     medium      0.38
6 B     high        0.36</code></pre>
</div>
</div>
<p>Next, take a look at the corresponding stacked bar chart. Since we created a dataset that contains percentages, I took the liberty of appropriately transforming the y-axis via <code>scale_y_continuous()</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1">dummy_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> group, <span class="at" style="color: #677623;">y =</span> percent, <span class="at" style="color: #677623;">fill =</span> category)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent_format</span>())</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/03_position_adjustment/03_position_adjustment_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I believe that this visualization could be improved by adding text labels to each part of the stacked bar chart in order for the reader to immediately detect how large each portion of the bars is. Let’s try this via simply converting the values to strings and adding <code>geom_text()</code> to the plot.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1">dummy_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">percent_labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> group, <span class="at" style="color: #677623;">y =</span> percent, <span class="at" style="color: #677623;">fill =</span> category)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">label =</span> percent_labels)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent_format</span>())</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/03_position_adjustment/03_position_adjustment_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Clearly, this did not work as intended because <code>geom_text()</code> uses <code>position = "identity"</code> by default which is why the y-position of the labels is simply determined by its value. Now, here is where I would usually change the positioning via <code>position = "stack"</code>. However, the result this approach delivers is somewhat less than perfect.</p>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1">dummy_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">percent_labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> group, <span class="at" style="color: #677623;">y =</span> percent, <span class="at" style="color: #677623;">fill =</span> category)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">label =</span> percent_labels), <span class="at" style="color: #677623;">position =</span> <span class="st" style="color: #20794D;">"stack"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent_format</span>())</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/03_position_adjustment/03_position_adjustment_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Ideally, I would like the labels to appear in the middle of each colored block. We could try to use <code>vjust</code> to move the labels which is not a great idea since every label will be moved by the same amount and the blocks are of different height. Similarly, we could compute the block middle points by hand and use that as separate y-aesthetic in <code>geom_text()</code>.</p>
<p>Clearly, this involves a tedious additional computation and we should avoid this, if possible. This is precisely where <code>position_stack()</code> comes in. Conveniently, using <code>position = position_stack()</code> stacks the bars just like <code>position = "stack"</code> does but the function <code>position_stack()</code> has another argument <code>vjust</code> by which we can move the labels individually.</p>
<p>Here, the possible values of <code>vjust</code> range from 0 (bottom of the designated height) to 1 (top of the designated height). Therefore, moving the labels to the middle of each bar is as easy as setting <code>vjust = 0.5</code>.</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1">dummy_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">percent_labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> group, <span class="at" style="color: #677623;">y =</span> percent, <span class="at" style="color: #677623;">fill =</span> category)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">label =</span> percent_labels), </span>
<span id="cb6-7">    <span class="at" style="color: #677623;">position =</span> <span class="fu" style="color: #4758AB;">position_stack</span>(<span class="at" style="color: #677623;">vjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb6-8">  ) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent_format</span>())</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/03_position_adjustment/03_position_adjustment_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Finally, one may - and this is definitely a matter of taste - tweak this plot further by changing the color and text formatting. Personally, I like darker colors combined with a white, bold label. In this case, this would look like this.</p>
<div class="cell">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb7-1">dummy_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #677623;">percent_labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> group, <span class="at" style="color: #677623;">y =</span> percent, <span class="at" style="color: #677623;">fill =</span> category)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">label =</span> percent_labels), </span>
<span id="cb7-7">    <span class="at" style="color: #677623;">position =</span> <span class="fu" style="color: #4758AB;">position_stack</span>(<span class="at" style="color: #677623;">vjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>),</span>
<span id="cb7-8">    <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb7-9">    <span class="at" style="color: #677623;">fontface =</span> <span class="st" style="color: #20794D;">"bold"</span></span>
<span id="cb7-10">  ) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb7-11">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #677623;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent_format</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-12">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #677623;">palette =</span> <span class="st" style="color: #20794D;">"Set1"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/03_position_adjustment/03_position_adjustment_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In summary, we have seen that using <code>position = position_stack()</code> is a more powerful alternative to <code>position = "stack"</code> that allows individual positioning. Nevertheless, as long as the additional arguments of <code>position_stack()</code> are not needed I still find the latter version simpler.</p>


 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/03_position_adjustment/03_position_adjustment.html</guid>
  <pubDate>Sat, 11 Sep 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot tips: Assigning Labels to an Aesthetic</title>
  <link>https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels.html</link>
  <description><![CDATA[ 


<p>This blog post is part of a series I am creating where I collect tips I found useful when I first learned to work with <code>ggplot2</code>. All posts which are part of this series can be found <a href="https://albert-rapp.de/ggplot-series.html">here</a>. In this post I want to deal with how to manually or automatically create labels for some aesthetic.</p>
<section id="manually-assigning-labels" class="level2">
<h2 class="anchored" data-anchor-id="manually-assigning-labels">Manually Assigning Labels</h2>
<p>Assigning labels by hand, e.g.&nbsp;via <code>col = "some label"</code>, can be a great idea in some instances. For example, when you use two different smoothing methods, a hand-written label to differentiate between the two methods helps a lot. For instance, take a look the relationship between city mileage <code>cty</code> and highway mileage <code>hwy</code> of cars in the <code>mpg</code> data set from the <code>ggplot2</code> package.</p>
<div class="cell">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> mpg, <span class="fu" style="color: #4758AB;">aes</span>(hwy, cty)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If one suspects a linear relationship between those two variables, one might want to use <code>geom_smooth(method = 'lm')</code> to check that hypothesis by drawing a straight line through the points. Similarly, one may be inclined to see what <code>geom_smooth()</code> would return if a linear model is not enforced. Adding both smoothing methods to the plot (and removing the confidence bands) yields:</p>
<div class="cell">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> mpg, <span class="fu" style="color: #4758AB;">aes</span>(hwy, cty)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #677623;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Obviously, differently colored lines should be used here to differentiate between the two smoothing methods. We have two approaches to do this. Either, we can manually assign a color (without using <code>aes()</code>):</p>
<div class="cell">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> mpg, <span class="fu" style="color: #4758AB;">aes</span>(hwy, cty)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'red'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #677623;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'blue'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Or we can use <code>aes()</code> and assign labels instead and let <code>ggplot2</code> handle the colors on its own.</p>
<div class="cell">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> mpg, <span class="fu" style="color: #4758AB;">aes</span>(hwy, cty)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'auto'</span>), <span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #677623;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'lm'</span>), <span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'Smoothing'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Personally, I prefer the latter approach because it has a couple of small advantages</p>
<ul>
<li>A legend is automatically generated with the corresponding labels such that even without looking at the code it becomes more obvious how each line was generated. Also, creating labels for an aesthetic is kind of the point of this post.</li>
<li>I do not have to bother about the specific color names. For me, this is something that could take up a lot of time if I want to change the appearance of the plot later on because I might spend way too much time on finding colors that “work” together. Here, if I want to change the colors, I could simply use a Brewer color palette and hope that the creators of that palette had good reasons to arrange the palette the way they did.</li>
</ul>
<div class="cell">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #677623;">data =</span> mpg, <span class="fu" style="color: #4758AB;">aes</span>(hwy, cty)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #677623;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'auto'</span>), <span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #677623;">method =</span> <span class="st" style="color: #20794D;">'lm'</span>, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'lm'</span>), <span class="at" style="color: #677623;">se =</span> F, <span class="at" style="color: #677623;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">'Smoothing'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">scale_color_brewer</span>(<span class="at" style="color: #677623;">palette =</span> <span class="st" style="color: #20794D;">'Set1'</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="automatically-assigning-labels-via-pivoting" class="level2">
<h2 class="anchored" data-anchor-id="automatically-assigning-labels-via-pivoting">Automatically Assigning Labels via Pivoting</h2>
<p>Sometimes, manually coloring aspects of your data can also be a bad idea. Especially, if you find yourself using the exact same <code>geom_*</code> multiple times on different variables of a data set, you may want to think about using a different approach. One such approach can be to rearrange the data first. For example, take a look at the following two time series that were simulated and collected in a tibble as follows:</p>
<div class="cell">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb6-2">x1 <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb6-3">x2 <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb6-4">tib <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb6-5">  <span class="at" style="color: #677623;">t =</span> <span class="fu" style="color: #4758AB;">seq_along</span>(x1),</span>
<span id="cb6-6">  <span class="at" style="color: #677623;">ts1 =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(x1),</span>
<span id="cb6-7">  <span class="at" style="color: #677623;">ts2 =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(x2)</span>
<span id="cb6-8">)</span>
<span id="cb6-9">tib</span></code></pre></div>
<div class="cell-output-stdout">
<pre><code># A tibble: 10 × 3
       t    ts1   ts2
   &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;
 1     1 -0.560  1.22
 2     2 -0.791  1.58
 3     3  0.768  1.98
 4     4  0.839  2.10
 5     5  0.968  1.54
 6     6  2.68   3.33
 7     7  3.14   3.82
 8     8  1.88   1.86
 9     9  1.19   2.56
10    10  0.746  2.09</code></pre>
</div>
</div>
<p>Now, it is possible to plot both times series using <code>geom_line()</code> and use different colors for each line. To do so, one might be tempted (as I often was when I first learned <code>ggplot2</code>) to write code similar to the one we wrote earlier:</p>
<div class="cell">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb8-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">x =</span> t)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">y =</span> ts1, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">"Time series 1"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">y =</span> ts2, <span class="at" style="color: #677623;">col =</span> <span class="st" style="color: #20794D;">"Time series 2"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here, we basically used <code>geom_line()</code> twice for more or less the same plot but with only one aesthetic slightly changed. However, this may not be the best approach. This is especially true if we were to do this for, say, 100 time series as it would involve a lot of code duplication.</p>
<p>Instead, let’s try to rearrange the data via <code>pivot_longer()</code> before even beginning to plot anything<sup>1</sup>. This way, we might even plot way more than 2 time series with only a single <code>geom_line()</code>:</p>
<div class="cell">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;"># Create multiple time series</span></span>
<span id="cb9-3">tib <span class="ot" style="color: #00769E;">&lt;-</span> <span class="fu" style="color: #4758AB;">map_dfc</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">cumsum</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">rename_with</span>(<span class="sc" style="color: #5E5E5E;">~</span>glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"label{1:6}"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">bind_cols</span>(<span class="at" style="color: #677623;">t =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, .)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;"># Pivot and plot</span></span>
<span id="cb9-8">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #677623;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #677623;">names_to =</span> <span class="st" style="color: #20794D;">"ts"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(t, value, <span class="at" style="color: #677623;">col =</span> ts)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>As you just saw, it is also possible to, if necessary, relabel the column names in bulk before rearranging the data in order to label the aesthetic the way we want.</p>
</section>
<section id="same-procedure-different-aesthetic" class="level2">
<h2 class="anchored" data-anchor-id="same-procedure-different-aesthetic">Same Procedure, Different Aesthetic</h2>
<p>For the sake of an additional example, let us use the same ideas but with <code>geom_boxplot()</code> instead of <code>geom_line()</code>. Therefore, we will generate a couple of “data sets” and plot a box plot for each one:</p>
<div class="cell">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">map_dfc</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, rnorm, <span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">rename_with</span>(<span class="sc" style="color: #5E5E5E;">~</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #677623;">cols =</span> <span class="fu" style="color: #4758AB;">everything</span>(), <span class="at" style="color: #677623;">names_to =</span> <span class="st" style="color: #20794D;">"ds"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">col =</span> ds, <span class="at" style="color: #677623;">y =</span> value)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here, I have used <code>col</code> again but as I have recently come to realize, using <code>fill</code> instead of <code>col</code> creates the “prettier” box plots so let’s use that instead.</p>
<div class="cell">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r cell-code code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">map_dfc</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, rnorm, <span class="at" style="color: #677623;">n =</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">rename_with</span>(<span class="sc" style="color: #5E5E5E;">~</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #677623;">cols =</span> <span class="fu" style="color: #4758AB;">everything</span>(), <span class="at" style="color: #677623;">names_to =</span> <span class="st" style="color: #20794D;">"ds"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #677623;">fill =</span> ds, <span class="at" style="color: #677623;">y =</span> value)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So, as you just witnessed, what I have described so far does not only work with the color aesthetic. In fact, we can pretty much use the same approaches for all other aesthetics.</p>
<p>Thus, we have seen how to easily create labels for an aesthetic of our choice by either manually assigning labels or rearranging the data first in order to use the previous column names to assign labels automatically. Let me know what you think in the comments or if you liked this post, simply hit the applause button below.</p>


</section>

<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I am not describing how <code>pivot_longer()</code> works in detail here because I want to keep this post short by only “connecting the dots”. If you are unfamiliar with pivoting, you may check out the <a href="https://yards.albert-rapp.de/dataWrangling.html#tidy-data">tidy data chapter</a> from my YARDS lecture notes which was of course inspired by the infamous <a href="https://r4ds.had.co.nz/">R for Data Science book</a>. For an animation that demonstrates what <code>pivot_longer()</code> and <code>pivot_wider()</code> do, see <a href="https://github.com/gadenbuie/tidyexplain/blob/master/images/tidyr-spread-gather.gif">gadenbuie/tidyexplain on GitHub</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/02_aesthetic_labels/02_aesthetic_labels.html</guid>
  <pubDate>Thu, 19 Aug 2021 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
