---
title: "Untitled"
format: html
editor: visual
---


```{r}
library(tidyverse)
```

Let's create both the original and the improved plot.

Read data
```{r}
dat <- read_csv2('content/en/post/2022-05-01-use-grobs-to-get-rounded-corners/ratios.csv')
```

Compute averages (not necessarily correct calculation but for viz ok)

```{r}
avgs <- dat %>% 
  pivot_longer(
    cols = -1,
    names_to = 'type',
    values_to = 'ratio'
  ) %>% 
  group_by(type) %>% 
  summarise(ratio = mean(ratio)) %>% 
  mutate(location = 'REGION AVERAGE')
avgs
```

Combine with data 

```{r}
dat_longer <- dat %>% 
  pivot_longer(
    cols = -1,
    names_to = 'type',
    values_to = 'ratio'
  ) 
dat_longer_with_avgs <- dat_longer %>% 
  bind_rows(avgs)
```

Create rudimentary plot with only bars

These are the colors we will use throughout this post.

```{r}
color_palette <- thematic::okabe_ito(8)
```


```{r}
dat_factored <- dat_longer %>% 
  mutate(location = factor(location, levels = dat$location)) 
p <- dat_factored %>% 
  ggplot(aes(location, ratio)) +
  geom_col(
    data = filter(dat_factored, type == 'inventory_turnover'),
    fill = color_palette[2]
  ) +
  theme_minimal()
p
```


Turn labels and get rid of axis text

```{r}
p <- p +
  labs(x = element_blank(), y = element_blank()) +
  theme(
    axis.text.x = element_text(angle = 50, hjust = 1)
  )
p
```

Remove expansion to get x-labels closer to the bars

```{r}
p <- p + coord_cartesian(ylim = c(0, 30), expand = F)
p
```

Remove other grid lines

```{r}
p <- p + 
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(colour = 'black', size = 0.75)
  )
p
```

Format y-axis

```{r}
p <- p +
  scale_y_continuous(
    breaks = seq(0, 30, 5),
    labels = scales::label_comma(accuracy = 0.1)
  )
p
```


Add points

```{r}
p <- p +
  geom_point(
    data = filter(dat_factored, type == 'store_lower'),
    col = color_palette[1],
    size = 3
  ) +
  geom_point(
    data = filter(dat_factored, type == 'store_upper'),
    col = color_palette[3],
    size = 3
  ) 
p
```

Add average lines

```{r}
p <- p +
  geom_hline(
    yintercept = avgs[[3, 'ratio']], 
    size = 2.5, 
    col = color_palette[3]
  ) +
  geom_hline(
    yintercept = avgs[[2, 'ratio']], 
    size = 2.5, 
    col = color_palette[1]
  )
p
```

Add text labels

```{r}
p +
  geom_text(
    data = filter(dat_factored, type == 'inventory_turnover'),
    aes(label = ratio),
    nudge_y = 0.8
  )
```


Start new and begin with flipping axes

```{r}
camcorder::gg_record(dir = 'img', width = 16, height = 9, units = 'cm', dpi = 300)
```

Rect does not work as intended

```{r}
dat_with_avgs <- dat_longer_with_avgs %>% 
  pivot_wider(
    names_from = 'type',
    values_from = 'ratio'
  ) 

dat_with_avgs %>% 
  ggplot() +
  geom_rect(
    aes(
      xmin = store_lower, 
      xmax = store_upper, 
      ymin = location, 
      ymax = location
    )
  )
```

So, create a new numeric column with a locations rank based on its `inventory_turnover`.
This is done with `row_number()`.
While we're at it let us create a new tibble that also contains information on the colors each geom wants to use.
Then, we can map to these new columns in ggplot and make sure that the values are used as is by setting `scale_*_identity()`.
This is what the new tibble looks like.

```{r}
bar_height <- 0.4 
no_highlight_col <- 'grey70'
average_highlight_col <- 'grey40'
below_highlight <- color_palette[2]

sorted_dat <- dat_with_avgs %>% 
  mutate(num = row_number(inventory_turnover)) %>% 
  arrange(desc(num)) %>% 
  mutate(
    rect_color = case_when(
      inventory_turnover < store_lower ~ below_highlight,
      location == 'REGION AVERAGE' ~ average_highlight_col,
      T ~ no_highlight_col
    ),
    rect_alpha = if_else(
      inventory_turnover < store_lower,
      0.5,
      1
    ),
    point_color = if_else(
      inventory_turnover < store_lower,
      below_highlight,
      'black'
    ),
    point_fill = if_else(
      inventory_turnover < store_lower,
      below_highlight,
      'white'
    ),
    point_size = if_else(
      inventory_turnover < store_lower,
      2.5,
      1.75
    )
  )
```

And now we can create our plot.
Notice that I set `shape = 21` in `geom_point()` to have both a `fill` and `col` variable.

```{r}
p <- sorted_dat %>% 
  ggplot() +
  ggchicklet:::geom_rrect(
    aes(
      xmin = store_lower, 
      xmax = store_upper, 
      ymin = num - bar_height, 
      ymax = num + bar_height, 
      fill = rect_color,
      alpha = rect_alpha
    ),
    r = unit(0.5, 'npc')
  ) +
  geom_point(
    aes(
      x = inventory_turnover,
      y = num,
      fill = point_fill,
      col = point_color,
      size = point_size
    ),
    shape = 21
  ) +
  scale_fill_identity() +
  scale_color_identity() +
  scale_size_identity() +
  scale_alpha_identity() +
  theme_minimal()
p
```

Y-axis labels will have to be set manually later on.
Otherwise, we cannot change its colors.
Let's get rid of superfluous grid lines, move the x-axis and add a title.
Here, I will have to draw the axis line manually with a segment annotation.
This seems weird.
Unfortunately, it cannot be helped because I still need room for the y-axis labels.
And if I do not plot the axis line manually, then the line will start all the way 
to the left.

```{r}
title_lab <- 'Review stores with turnover ratios that are below their\nforecasted range'
title_size <- 10
axis_label_size <- 7
text_size <- 14
p <- p +
  scale_x_continuous(
    breaks = seq(0, 25, 5),
    position = 'top'
  ) +
  coord_cartesian(
    xlim = c(-5, 25), 
    ylim = c(0.75, 24.75),  
    expand = F,
    clip = 'off'
  ) +
  annotate(
    'segment',
    x = 0,
    xend = 25,
    y = 24.75,
    yend = 24.75,
    col = no_highlight_col,
    size = 0.25
  ) +
  labs(
    x = 'INVENTORY TURNOVER RATIO',
    y = element_blank(),
    title = title_lab
  ) +
  theme(
    text = element_text(
      size = text_size,
      color = average_highlight_col
    ),
    plot.title.position = 'plot',
    panel.grid = element_blank(),
    axis.title.x = element_text(
      size = axis_label_size,
      hjust = 0.2175,
      color = no_highlight_col
    ),
    axis.text.x = element_text(
      size = axis_label_size,
      color = no_highlight_col
    ),
    axis.ticks.x = element_line(color = no_highlight_col, size = 0.25),
    axis.text.y = element_blank(),
    axis.line.x = element_blank()
  )
p
```

Next, let us add the y-axis labels.

```{r}
y_axis_text_size <- 2.5
p +
  geom_text(
    aes(
      x = 0,
      y = num,
      label = location,
      col = no_highlight_col,
      hjust = 1,
      size = y_axis_text_size
    )
  )
```

Let us turn to text highlights.
For that we will need `ggtext`.
This will let us use `geom_richtext()` instead of `geom_text()`.

```{r}
library(ggtext)
sorted_dat_with_new_labels <- sorted_dat %>% 
  mutate(location_label = case_when(
    inventory_turnover < store_lower ~ glue::glue(
      '<span style = "color:{below_highlight}">**{location}**</span>'
    ),
    location == 'REGION AVERAGE' ~ glue::glue(
      '<span style = "color:{average_highlight_col}">**{location}**</span>'
    ),
    T ~ location
  ))

p <- p +
  geom_richtext(
    data = sorted_dat_with_new_labels,
    aes(
      x = 0,
      y = num,
      label = location_label,
      col = no_highlight_col,
      hjust = 1,
      size = y_axis_text_size
    ),
    label.colour = NA,
    label.r = unit(0, 'cm'),
    fill = NA
  )
p
```

Fantastic!
Next, we only have to highlight words in our call to action.

```{r}
title_lab_adjusted <- glue::glue(
  "Review stores with **turnover ratios** that are <span style = 'color:{below_highlight}'>below their</span><br><span style = 'color:#7fceb9;'>**forecasted range**</span>"
)
caption_text <- "Original: Storytelling with Data blog - 'bar charts and dot plots and line graphs, oh my!'<br>{ggplot2} remake by Albert Rapp (@rappa753)."

p +
  labs(
    title = title_lab_adjusted,
    caption = caption_text
  ) +
  theme(
    plot.title = element_markdown(),
    plot.background = element_rect(color = NA, fill = 'white'),
    panel.background = element_rect(color = NA, fill = 'white'),
    plot.caption.position = 'plot',
    plot.caption = element_markdown(
      hjust = 1, 
      size = 7, 
      colour = no_highlight_col,
      lineheight = 1.25,
      margin = margin(t = 1, unit = 'mm')
    ),
  )
```


```{r}

## Write function that does splitting for each rectangle
## Found no suitable purrr function that works in my case
extract_value <- function(list, arg, rect) {
  x <- list[[arg]]
  # name and just need do be treated different
  # In all cases just pick the i-th entry of list[[arg]]
  if (!(arg %in% c('name', 'just'))) return(x[rect])
  
  ## There is only one name, so extract that and modify id
  if (arg == 'name') {
    return(paste0(x,  rect))
  }
  
  # 'just' is two part vector and should always be the same
  if (arg == 'just') return(x)
}

split_my_list <- function(list, n_rects) {
  combinations <- tibble(
    rect = 1:n_rects,
    arg = list(names(list))
  ) %>% 
    unnest(cols = c(arg)) 
  
  flattened_list <- combinations %>% 
    pmap(~extract_value(list, ..2, ..1))
  
  names(flattened_list) <- combinations$arg
  split(flattened_list, combinations$rect)
}

l <- ggplotGrob(p_with_edges)
grobs <- l$grobs[[6]]

# What arguments does roundrectGrob need?
arg_names <- args(grid::roundrectGrob) %>% as.list() %>% names()
# Somehow last one is NULL
arg_names <- arg_names[-length(arg_names)]
arg_names

# Extract the arguments roundrectGrob needs from grobs$children[3]
extracted_args <- map(arg_names, ~pluck(grobs$children[3], 1, .)) 
names(extracted_args) <- arg_names

## How many rectangles are there?
n_rects <- extracted_args$x %>% length()

## Make sure that all list components in gp have equally many values
extracted_args$r <- unit(rep(0.5, n_rects), 'npc')
extracted_args$gp$linejoin <- rep(extracted_args$gp$linejoin, n_rects)
extracted_args$gp$lineend <- rep(extracted_args$gp$lineend, n_rects)
                                 
list_of_arglists <-  split_my_list(extracted_args, n_rects)
list_of_grobs <- map(list_of_arglists, ~do.call(grid::roundrectGrob, .)) 

# Build new list of grobs by replacing one part in old list
grobs_new <- grobs

# save one list argument into children[3]
grobs_new$children[3] <- do.call(grid::grobTree, list_of_grobs) %>% list()
l_new <- l
l_new$grobs[[6]] <- grobs_new

ragg::agg_jpeg()
# Draw Plot
grid::grid.newpage()
grid::grid.draw(l_new)

ggplotify::as.ggplot(l_new, hjust = 0, res = 300)

```

```{r}
library(ggchicklet)
sorted_dat %>% 
  ggplot() +
  ggchicklet:::geom_rrect(
    aes(
      xmin = store_lower, 
      xmax = store_upper, 
      ymin = num - bar_height, 
      ymax = num + bar_height,
      fill = rect_color,
      alpha = rect_alpha
    ),
    r = unit(0.5, 'npc')
  ) +
  geom_point(
    aes(
      x = inventory_turnover,
      y = num,
      fill = point_fill,
      col = point_color,
      size = point_size
    ),
    shape = 21
  ) +
  scale_fill_identity() +
  scale_color_identity() +
  scale_size_identity() +
  scale_alpha_identity() +
  theme_minimal()
```











A standard ggplot output cannot convey a powerful message.

For effective data visualization you need to customize your plot.

[A couple of weeks ago](https://albert-rapp.de/post/2022-03-29-recreating-the-swd-look/), 
I showed you how.

In this blog post, I will rebuild another great data viz from scratch.

Most of the techniques that I use, can be found in my previous post.

But for today's installment of my [ggplot2 series](https://albert-rapp.de/series/ggplot2-tips/) 
I will show you something truly special.

I will show you...\*drum roll\*...rounded corners.

Sounds exciting, doesn't it?

Well, maybe not.

But it looks great.

Check it out.

```{r}
# Show final plot
```

This plot comes to you via another great entry of the [storytelling with data (SWD) blog](https://www.storytellingwithdata.com/blog/bar-charts-and-dot-plots-and-line-graphs-oh-my).

To draw rectangles with rounded corners we can leverage the [ggchicklet package](https://github.com/hrbrmstr/ggchicklet).

For some mysterious reason, though, the `geom_*` that we need is hidden in that package.

Therefore, we will have to dig it out.

That's the easy way to do it.

Honestly, this is probably also the practical way to do it.

However, every now and then I want to go wild.

Every now and then, I want to do things the hard way.

So, my dear reader, this is why I will also show you how to chip off edges the hard way.

But only after showing you the easy way, of course.



Only then, in the second part of this blog post, will I take the sadistically-inclined among you on a tour to the world of grobs.

Grobs, you say?

[Is that an instrument](https://knowyourmeme.com/memes/is-mayonnaise-an-instrument)?

No, Patrick, it is an **gr**aphical **ob**ject.

Under the hood, we can transform a ggplot to a list of graphical objects.

And with a few hacks, we can adjust that list.

This way, the list will contain not `rectGrob`s but `roundrectGrobs`.

Then, we can stick everything back together, close the hood and enjoy our round corners.


## Basic plot

First off, let us recreate the "bad" plot that the above SWD blog post remodels.

In the end, we will work on the remodeled data viz too.

As always, though, there is something to be learnt from [creating an ugly plot](https://www.allisonhorst.com/post/do-your-worst/).

So, here's the beast that we will build.

```{r}
# original pic here
```





















