<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>visualization on Albert Rapp</title>
    <link>https://albert-rapp.de/tags/visualization/</link>
    <description>Recent content in visualization on Albert Rapp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>blog@albert-rapp.de (Albert Rapp)</managingEditor>
    <webMaster>blog@albert-rapp.de (Albert Rapp)</webMaster>
    <copyright>Â©2021, This work is licensed under a <a href="https://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0 license</a>.</copyright>
    <lastBuildDate>Thu, 28 Oct 2021 00:00:00 +0000</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://albert-rapp.de/tags/visualization/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>ggplot tips: Arranging plots</title>
        <link>https://albert-rapp.de/post/2021-10-28-extend-plot-variety/</link>
        <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
        <author>blog@albert-rapp.de (Albert Rapp)</author>
        <atom:modified>Thu, 28 Oct 2021 00:00:00 +0000</atom:modified>
        <guid>https://albert-rapp.de/post/2021-10-28-extend-plot-variety/</guid>
        <description>In this week&amp;rsquo;s TidyTuesday, I noticed that I am frequently not using only ggplot2 to create plots. In fact, it has become essential to me to leverage the powers of other great additional packages that align well with ggplot2. Therefore, I decided to extend my ggplot2-tips series by introducing a few packages I use quite often.
In this post, I want to cover how to arrange multiple plots. In particular, I will talk about the fantastic patchwork package by Thomas Lin Pedersen which helps to arrange plots quite intuitively.</description>
        
        <dc:creator>Albert Rapp</dc:creator>
        
        
        
        
          
            
              <category>visualization</category>
            
          
        
        
        
          
            
              <category>ggplot2-tips</category>
            
          
        
      </item>
      
      <item>
        <title>An Exploratory Introduction to the Plotly Package</title>
        <link>https://albert-rapp.de/post/2021-10-16-exploratory-intro-plotly/</link>
        <pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate>
        <author>blog@albert-rapp.de (Albert Rapp)</author>
        <atom:modified>Sat, 16 Oct 2021 00:00:00 +0000</atom:modified>
        <guid>https://albert-rapp.de/post/2021-10-16-exploratory-intro-plotly/</guid>
        <description>Currently, I am quite curious about interactive plots which is why I am reading Scott Murray&amp;rsquo;s highly recommendable book on D3. For those of you who don&amp;rsquo;t know it, D3.js is a JavaScript library that is great for creating amazing interactive Data-Driven-Documents on the web.
Unfortunately, compared to ggplot2, D3&amp;rsquo;s learning curve feels quite steep and I am not yet able to work with it yet. Fortunately, there are other interactive graphing libraries out there that I can use to get a first feel for creating interactive plots.</description>
        
        <dc:creator>Albert Rapp</dc:creator>
        
        
        
        
          
            
              <category>visualization</category>
            
          
            
              <category>exploratory-intro</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>ggplot tips: Using position_stack() for Individual Positioning</title>
        <link>https://albert-rapp.de/post/2021-09-11-position-adjustment/</link>
        <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
        <author>blog@albert-rapp.de (Albert Rapp)</author>
        <atom:modified>Sat, 11 Sep 2021 00:00:00 +0000</atom:modified>
        <guid>https://albert-rapp.de/post/2021-09-11-position-adjustment/</guid>
        <description>For a long time I have wondered why some people would use position_stack() for position alignment instead of the simpler version position = &amp;quot;stack&amp;quot;. Recently, though, I learned the purpose of the former approach when I tried to add data labels to a stacked bar chart for better legibility.
Further, I decided that this knowledge is a good addition to this ggplot2-tips series, so let&amp;rsquo;s see what position_stack() can do. To achieve this, let us create a small dummy data set.</description>
        
        <dc:creator>Albert Rapp</dc:creator>
        
        
        
        
          
            
              <category>visualization</category>
            
          
        
        
        
          
            
              <category>ggplot2-tips</category>
            
          
        
      </item>
      
      <item>
        <title>ggplot tips: Assigning Labels to an Aesthetic</title>
        <link>https://albert-rapp.de/post/2021-08-19-aesthetic-labels/</link>
        <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
        <author>blog@albert-rapp.de (Albert Rapp)</author>
        <atom:modified>Thu, 19 Aug 2021 00:00:00 +0000</atom:modified>
        <guid>https://albert-rapp.de/post/2021-08-19-aesthetic-labels/</guid>
        <description>This blog post is part of a series I am creating where I collect tips I found useful when I first learned to work with ggplot2. All posts which are part of this series can be found here. In this post I want to deal with how to manually or automatically create labels for some aesthetic.
Manually Assigning Labels Assigning labels by hand, e.g. via col = &amp;quot;some label&amp;quot;, can be a great idea in some instances.</description>
        
        <dc:creator>Albert Rapp</dc:creator>
        
        
        
        
          
            
              <category>visualization</category>
            
          
        
        
        
          
            
              <category>ggplot2-tips</category>
            
          
        
      </item>
      
      <item>
        <title>Beginning a ggplot2 Series: Logarithmize Your Scales</title>
        <link>https://albert-rapp.de/post/2021-08-07-a-few-ggplot-tips/</link>
        <pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
        <author>blog@albert-rapp.de (Albert Rapp)</author>
        <atom:modified>Sat, 07 Aug 2021 00:00:00 +0000</atom:modified>
        <guid>https://albert-rapp.de/post/2021-08-07-a-few-ggplot-tips/</guid>
        <description>It is not that long ago when I first encountered ggplot2 and decided to learn how to use it1. By no means do I think that I have sufficiently mastered this package yet but as time has passed I have certainly picked up a few tips on my journey to get better at creating more meaningful visualizations. So, in order to remind myself of and share what I learned, I decided to create a sort of series containing tips that enhanced my visualization skills.</description>
        
        <dc:creator>Albert Rapp</dc:creator>
        
        
        
        
          
            
              <category>visualization</category>
            
          
        
        
        
          
            
              <category>ggplot2-tips</category>
            
          
        
      </item>
      
      <item>
        <title>Animating kernel density estimators</title>
        <link>https://albert-rapp.de/post/visualize-kernel-density-estimation/</link>
        <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
        <author>blog@albert-rapp.de (Albert Rapp)</author>
        <atom:modified>Wed, 14 Jul 2021 00:00:00 +0000</atom:modified>
        <guid>https://albert-rapp.de/post/visualize-kernel-density-estimation/</guid>
        <description>For my first post on this blog I decided to create an animation using the animation package. To give this animation some purpose let me demonstrate how kernel density estimators work with the help of an animation.
In general, kernel density estimators are, as is kind of obvious by the name, used to estimate the underlying density of a random sample. For instance, imagine that we have a sample drawn from an some unknown distribution.</description>
        
        <dc:creator>Albert Rapp</dc:creator>
        
        
        
        
          
            
              <category>statistics</category>
            
          
            
              <category>visualization</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>
